# [PackageDev] target_format: plist, ext: tmLanguage
name: VEX
scopeName: source.vex
fileTypes: [vfl, h]

patterns:
- include: '#include'
- include: '#define'
- include: '#if'
- include: '#pragma'
- include: '#comment'
- include: '#string'
- include: '#access'
- include: '#function'

- name: constant.numeric.floating.left.vex
  match: \.[0-9]+\b

- name: constant.numeric.floating.right.vex
  match: \b[0-9]\.(?!\d)

- name: constant.numeric.vex
  match: \b(0[xX][0-9a-fA-F]+|([0-9]+\.?[0-9]*|\.[0-9]+)([eE][\+-]?[0-9]+)?)\b

- name: constant.language.vex
  match: \b(false|true)\b

- name: keyword.control.vex
  match: \b(break|continue|do|else|foreach|forpoints|for|gather|if|illuminance|import(?!\s*\()|return|while)\b

- name: keyword.ternary.vex
  match: (\?|:)

# - name: keyword.operator.dereference.vex
#   match: (\.)(?=[A-Za-z_]\w*)
# - name: keyword.operator.assignment.vex
#   match: (\-|\+|\*|\/|%|&|\||\^)?=
# - name: keyword.operator.comparison.vex
#   match: (==|!=|<=|>=|<>|<|>)
# - name: keyword.operator.increment-decrement.vex
#   match: (\-\-|\+\+)
# - name: keyword.operator.arithmetic.vex
#   match: (\-|\+|\*|\/|%)
# - name: keyword.operator.logical.vex
#   match: (!|&&|\|\|)
# - name: keyword.operator.bitwise.vex
#   match: (~|&|\||\^)

- name: storage.type.struct.vex
  match: \b(struct)\b

- name: storage.modifier.vex
  match: \b(const|export)\b

- name: storage.type.vex
  match: \b(void|int|float|vector2|vector|vector4|matrix2|matrix3|matrix|string|bsdf|light|material)\b

- name: support.constant.vex
  match: \b(__vex|__vex_major|__vex_minor|__vex_build|__vex_patch|__LINE__|__FILE__|__DATE__|__TIME__)\b

- name: support.type.vex
  match: \b(chop|cop2|cvex|displacement|fog|image3d|light|pop|shadow|sop|surface)\b

- name: support.function.lib.vex
  match: \b(abs|accessframe|acos|addattrib|addattribute|adddetailattrib|addgroup|addpoint|addpointattrib|addprim|addprimattrib|addvariablename|addvertex|addvertexattrib|agentclipcatalog|agentaddclip|agentcliplength|agentclipnames|agentclipsamplelocal|agentclipsampleworld|agentcliptimes|agentclipweights|agentcollisionlayer|agentcurrentlayer|agentlayerbindings|agentlayers|agentlayershapes|agentlocaltransform|agentlocaltransforms|agentrigchildren|agentrigfind|agentrigparent|agenttransformcount|agenttransformnames|agenttransformtolocal|agenttransformtoworld|agentworldtransform|agentworldtransforms|albedo|alphaname|ambient|anoise|append|area|argsort|array|arraylength|ashikhmin|asin|assign|atan|atan2|atof|atoi|atten|attribsize|attribtype|attribtypeinfo|avg|binput|blackbody|blinn|blinnBRDF|bouncelabel|bouncemask|bumpmap|bumpmapA|bumpmapB|bumpmapG|bumpmapL|bumpmapR|bumpname|cbrt|ceil|ch|ch3|ch4|chend|chendf|chendt|chf|chi|chinput|chname|chnumchan|chp|chr|chramp|chrate|chs|chsraw|chstart|chstartf|chstartt|chv|cinput|ckspline|clamp|clip|colormap|colorname|computenormal|concat|cone|cos|cosh|cracktransform|cross|cspline|ctransform|curlnoise|curlnoise2d|curlxnoise|curlxnoise2d|cvex_bsdf|degrees|depthmap|depthname|detail|detailattrib|detailattribsize|detailattribtype|detailattribtypeinfo|detailintrinsic|determinant|diffuse|diffuseBRDF|dihedral|dimport|distance|distance2|dot|dsmpixel|Du|Dv|Dw|eigenvalues|emission_bsdf|endswith|environment|erf|erf_inv|erfc|eulertoquaternion|eval_bsdf|exp|expandpointgroup|expandprimgroup|fastshadow|filamentsample|file_eof|file_flush|file_open|file_read|file_readline|file_readlines|file_seek|file_size|file_stat|file_tell|file_write|file_writeline|file_writelines|filtershadow|filterstep|find|findattribval|findattribvalcount|finput|fit|fit01|fit10|fit11|floor|flownoise|flowpnoise|foreach|forpoints|frac|fresnel|fromNDC|frontface|gather|geoself|getattribute|getbbox|getblurP|getbounces|getbounds|getcomp|getcomponents|getfogname|getglobalraylevel|getlight|getlightid|getlightname|getlights|getlightscope|getmaterial|getobjectname|getphotonlight|getpointbbox|getprimid|getptextureid|getraylevel|getrayweight|getscope|getspace|gradient|gradient3d|hair|hasdetailattrib|haslight|hasplane|haspointattrib|hasprimattrib|hasvertexattrib|hedge_dstpoint|hedge_dstvertex|hedge_equivcount|hedge_isequiv|hedge_isprimary|hedge_isvalid|hedge_next|hedge_nextequiv|hedge_postdstpoint|hedge_postdstvertex|hedge_presrcpoint|hedge_presrcvertex|hedge_prev|hedge_prim|hedge_primary|hedge_srcpoint|hedge_srcvertex|henyeygreenstein|hscript_noise|hscript_rand|hscript_snoise|hscript_sturb|hscript_turb|hsvtorgb|iaspect|ichname|ident|iend|iendtime|ihasplane|illuminance|import|importance_light|ingroup|inpointgroup|inprimgroup|insert|instance|integrate3d|integrate3dClip|interpolate|intersect|intersect3d|intersect_all|intersect_lights|inumplanes|invert|iplaneindex|iplanename|iplanesize|irate|irradiance|isalpha|isbound|isconnected|isdigit|isfinite|isfogray|isframes|isnan|isotropic|israytracing|issamples|isseconds|isshadowray|istart|istarttime|istracing|isuvrendering|isvalidindex|isvarying|itoa|ixres|iyres|join|kspline|len|length|length2|lerp|lightid|limit_sample_space|limport|lkspline|log|log10|lookat|lspline|lstrip|luminance|lumname|makebasis|maketransform|maskname|match|matchvex_blinn|matchvex_specular|mattrib|max|mdensity|metaimport|metamarch|metanext|metastart|metaweight|min|minpos|mspace|nbouncetypes|nearpoint|nearpoints|neighbour|neighbourcount|neighbours|newgroup|newsampler|nextsample|ninput|noise|noised|normal_bsdf|normalize|normalname|npoints|npointsgroup|nprimitives|nprimitivesgroup|nrandom|ntransform|nuniqueval|occlusion|onoise|opend|opstart|optransform|ord|osd_facecount|osd_firstpatch|osd_limitsurface|osd_limitsurfacevertex|osd_patchcount|osd_patches|outerproduct|ow_nspace|ow_space|ow_vspace|pack_inttosafefloat|pathtrace|pcclose|pcconvex|pcexport|pcfarthest|pcfilter|pcfind|pcfind_radius|pcgenerate|pcimport|pcimportbyidx3|pcimportbyidx4|pcimportbyidxf|pcimportbyidxi|pcimportbyidxp|pcimportbyidxs|pcimportbyidxv|pciterate|pcnumfound|pcopen|pcopenlod|pcsampleleaf|pcsize|pcunshaded|pcwrite|phong|phongBRDF|phonglobe|photonmap|planeindex|planename|planesize|pluralize|pnoise|point|pointattrib|pointattribsize|pointattribtype|pointattribtypeinfo|pointedge|pointhedge|pointhedgenext|pointname|pointprims|pointvertex|pointvertices|polardecomp|pop|pow|prim|prim_attribute|prim_normal|primattrib|primattribsize|primattribtype|primattribtypeinfo|primhedge|primintrinsic|primpoint|primpoints|primuv|primvertex|primvertexcount|primvertices|printf|ptexture|ptlined|ptransform|push|qconvert|qdistance|qinvert|qmultiply|qrotate|quaternion|radians|rand|random|random_fhash|random_ihash|random_shash|random_sobol|rawbumpmap|rawbumpmapA|rawbumpmapB|rawbumpmapG|rawbumpmapL|rawbumpmapR|rawcolormap|rayhittest|rayimport|re_find|re_findall|re_match|re_replace|re_split|reflect|reflectlight|refract|refractlight|relbbox|relpointbbox|removegroup|removeindex|removepoint|removeprim|removevalue|renderstate|reorder|resize|resolvemissedray|reverse|rgbtohsv|rgbtoxyz|rint|rotate|rotate_x_to|rstrip|sample_bsdf|sample_cauchy|sample_circle_arc|sample_circle_edge_uniform|sample_circle_slice|sample_circle_uniform|sample_direction_cone|sample_direction_uniform|sample_discrete|sample_exponential|sample_geometry|sample_hemisphere|sample_hypersphere_cone|sample_hypersphere_uniform|sample_light|sample_lognormal|sample_lognormal_by_median|sample_normal|sample_orientation_cone|sample_orientation_uniform|sample_photon|sample_sphere_cone|sample_sphere_uniform|sampledisk|scale|select|sensor_panorama_create|sensor_panorama_getcolor|sensor_panorama_getcone|sensor_panorama_getdepth|sensor_save|serialize|set|setagentclipnames|setagentcliptimes|setagentclipweights|setagentcollisionlayer|setagentcurrentlayer|setagentlocaltransform|setagentlocaltransforms|setagentworldtransform|setagentworldtransforms|setattrib|setattribtypeinfo|setcomp|setcurrentlight|setdetailattrib|setpointattrib|setpointgroup|setprimattrib|setprimgroup|setprimintrinsic|setprimvertex|setvertexattrib|shadow|shadow_light|shadowmap|shimport|shl|shr|shrz|sign|simport|sin|sinh|sleep|slerp|slice|smooth|snoise|solvecubic|solvepoly|solvequadratic|sort|specular|specularBRDF|spline|split|sprintf|sqrt|startswith|storelightexport|strip|strlen|switch|swizzle|tan|tanh|tet_adjacent|tet_faceindex|teximport|texprintf|texture|texture3d|texture3dBox|titlecase|tolower|toNDC|toupper|trace|translate|translucent|transpose|trunc|tw_nspace|tw_space|tw_vspace|uniqueval|unpack_intfromsafefloat|unserialize|upush|variadicarguments|variance|velocityname|vertex|vertexattrib|vertexattribsize|vertexattribtype|vertexattribtypeinfo|vertexhedge|vertexindex|vertexnext|vertexpoint|vertexprev|vertexprim|vertexprimindex|vnoise|volume|volumegradient|volumeindex|volumeindexorigin|volumeindextopos|volumeindexv|volumepostoindex|volumeres|volumesample|volumesamplev|vtransform|wireblinn|wirediffuse|wnoise|wo_nspace|wo_space|wo_vspace|writepixel|wt_nspace|wt_space|wt_vspace|xnoise|xnoised|xyzdist|xyztorgb)\b(?=\s*\()

- name: support.variable.common.vex
  match: \b(accel|backtrack|Cd|center|density|dPd[xyz]|force|Frame|group_[\w-]*|i[xyz]|id|instance|name|nextid|num(pt|vtx|prim)|N|OpInput[1-4]|orient|P|pstate|(pt|vtx|prim)num|res[xyzt]|rot|scale|Time([iI]nc)?|torque|up|uv|v)\b

# - name: support.other.vex
#   match: \b(char|color|hpoint|integer|normal|point|typedef|union)\b
#   comment: Officially Useless Words.

# - name: support.variable.sop.vex
#   match: \b(accel|age|Cd|Frame|id|life|Npt|N|pstate|ptnum|Pw|P|TimeInc|Time|v)\b
# - name: support.variable.image3d.vex
#   match: \b(density|P)\b
# - name: support.variable.surface.vex
#   match: \b(Af|Cf|Cl|dPds|dPdt|dPdz|Eye|F|I|L|Ng|N|Of|Pz|P|SID|s|Time|t)\b
# - name: support.variable.displacement.vex
#   match: \b(Cl|dPds|dPdt|dPdz|L|Ng|N|Pz|P|s|Time|t)\b
# - name: support.variable.light.vex
#   match: \b(Cl|dPds|dPdt|dPdz|Eye|I|Lz|L|Ng|N|Ps|P|SID|s|Time|t)\b
# - name: support.variable.shadow.vex
#   match: \b(Cl|dPds|dPdt|dPdz|Eye|I|Lz|L|Ng|N|Ps|P|SID|s|Time|t)\b
# - name: support.variable.fog.vex
#   match: \b(Af|Cf|Cl|dPds|dPdt|dPdz|Eye|F|I|L|Ng|N|Of|Pz|P|SID|s|Time|t)\b
# - name: support.variable.chop.vex
#   match: \b(C|E|I|L|NC|SR|S|V)\b
# - name: support.variable.cop2.vex
#   match: \b(AI|AR|AS|A|B|C4|Cb|Cg|Cr|EF|FR|F|G|H|IX|IY|I|NI|NP|PL|PNAME|PS|PXSC|R|SF|S|TIME|TINC|V|XRES|X|YRES|Y)\b
# - name: support.variable.pop.vex
#   match: \b(accel|age|Cd|Frame|id|life|Npt|N|pstate|ptnum|Pw|P|TimeInc|Time|v)\b

repository:
  include:
    patterns:
    - name: meta.preprocessor.include.quoted.vex
      match: ^\s*(#include)\s+(".*")\s*$
      captures:
        '1': {name: keyword.other.vex}
        '2': {name: string.quoted.vex}

    - name: meta.preprocessor.include.lt-gt.vex
      match: ^\s*(#include)\s+(<.*>)\s*$
      captures:
        '1': {name: keyword.control.vex}
        '2': {name: string.quoted.vex}

  define:
    patterns:
    - name: meta.preprocessor.define.vex
      begin: ^\s*(#define)\b
      beginCaptures:
        '1': {name: keyword.other.vex}
      end: (?<=^|[^\\])(?=\n)
      patterns:
      - name: meta.preprocessor.function.vex
        begin: (?<=#define)\s*([A-Za-z_]\w*)(\()
        beginCaptures:
          '1': {name: entity.name.macro-function.vex}
          '2': {name: punctuation.parameters.vex}
          '3': {name: punctuation.definition.vex}
        end: (\))|(?<=^|[^\\])(?=\n)
        endCaptures:
          '1': {name: punctuation.parameters.vex}
        patterns:
        - name: variable.parameter.vex
          match: ([A-Za-z_]\w*)
        - include: '#continuation'
      - name: entity.name.macro.vex
        match: (?<=#define)\s*([A-Za-z_]\w*)
      - name: string.quoted.token-string.vex
        comment: Matches after the whitespaces following a first closed parentheses.
        begin: (?<=\))\s+(?!$)
        end: (?<=^|[^\\])(?=\n)
        patterns:
        - name: variable.parameter.concat.vex
          match: \#\#
        - include: '#continuation'
      - name: string.quoted.token-string.vex
        comment: Matches after the whitespaces following the end of a first word (macro name).
        begin: (?<=\w)\s+(?!$)
        end: (?<=^|[^\\])(?=\n)
        patterns:
        - include: '#continuation'
      - include: '#continuation'

    - name: meta.preprocessor.undef.vex
      match: ^\s*(#undef)\s+(\w*)\b
      captures:
        '1': {name: keyword.other.vex}
        '2': {name: entity.name.macro.vex}

  if:
    patterns:
    - name: meta.preprocessor.if.vex
      begin: ^\s*(#if)\b
      end: (#endif)
      captures:
        '1': {name: keyword.other.vex}
      patterns:
      - include: '#preprocessor-function'
      - include: '#disabled'
      - include: '#elif'
      - include: '#else'
      - include: $self

    - name: meta.preprocessor.ifdef.vex
      begin: ^\s*(#ifn?def)\s+(\w*)\s*$
      end: (#endif)
      captures:
        '1': {name: keyword.other.vex}
        '2': {name: entity.name.macro.vex}
      patterns:
      - include: '#elif'
      - include: '#else'
      - include: $self

  elif:
    name: meta.preprocessor.elif.vex
    begin: (#elif)
    beginCaptures:
      '1': {name: keyword.other.vex}
    end: (?=#elif|#else|#endif)
    patterns:
    - include: '#preprocessor-function'
    - include: '#disabled'
    - include: $self

  else:
    name: meta.preprocessor.else.vex
    begin: (#else)
    beginCaptures:
      '1': {name: keyword.other.vex}
    end: (?=#endif)
    patterns:
    - include: $self

  disabled:
    name: meta.preprocessor.disabled.vex
    begin: (?<=#if|#elif)\s+(0+)\b
    beginCaptures:
      '1': {name: constant.numeric.vex}
    end: (?=#elif|#else|#endif)
    contentName: comment.line.preprocessor.disabled.vex
    patterns:
    - include: '#eat-nested-ifs'

  eat-nested-ifs:
    begin: ^\s*#if(?:n?def)?\b.*$
    end: ^\s*#endif\b.*$
    patterns:
    - include: '#eat-nested-ifs'

  preprocessor-function:
    name: entity.name.preprocessor-function.vex
    match: \b(defined|environment|access|access|strcmp)\b

  pragma:
    patterns:
    - name: meta.preprocessor.pragma.vex
      begin: ^\s*(#pragma)\s+(\w*)\b
      beginCaptures:
        '1': {name: keyword.other.vex}
        '2': {name: entity.name.pragma.vex}
      end: (?<=^|[^\\])(\n)
      patterns:
      - include: $self
      - include: '#continuation'

    - name: support.function.pragma.vex
      match: \b(_Pragma)\b(?=\()

  string:
    patterns:
    - name: string.quoted.hscript.vex
      begin: (`)
      end: (`)
      contentName: string.quoted.double.vex

    - name: string.quoted.double.vex
      begin: (")
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.vex}
      end: (")|(?<=^|[^\\])(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.vex}
        '2': {name: invalid.illegal.mismatched-quotation.vex}
      patterns:
      - include: '#string-escape'
      - include: '#string-placeholder'
      - include: '#continuation'

    - name: string.quoted.single.vex
      begin: (')
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.vex}
      end: (')|(?<=^|[^\\])(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.vex}
        '2': {name: invalid.illegal.mismatched-quotation.vex}
      patterns:
      # - include: '#string-escape'
      # - include: '#string-placeholder'
      - include: '#continuation'

  string-escape:
    name: constant.character.escape.vex
    match: \\(\d+|[nrt\\"]|x[a-fA-F0-9]{1,8}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})

  string-placeholder:
    name: constant.other.placeholder.vex
    match: \%(\%|[\d+]?[cdfgpsx])

  comment:
    patterns:
    - name: comment.block.vex
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.vex}
      patterns:
      - include: '#todo'

    - name: comment.line.vex
      begin: //
      beginCaptures:
        '0': {name: punctuation.definition.comment.vex}
      end: (?<=^|[^\\])\s*(?=\n)$\n?
      patterns:
      - include: '#todo'
      - include: '#continuation'

  todo:
    name: invalid.illegal.todo.vex
    match: \b(TODO)\b

  continuation:
    name: meta.continuation.vex
    match: (\\)(\s*)(?=\n$)
    captures:
      '1': {name: keyword.continuation.vex}
      '2': {name: invalid.illegal.continuation-space.vex}

  access:
    patterns:
    - name: keyword.operator.attribute-access.vex
      match: (@)
    - name: storage.type.attribute-access.vex
      match: \b([ifuvp234s](?:\[\])?)?(?=@)

  function:
    patterns:
    - name: entity.name.function.definition.vex
      match: \b\w+\b(?=\s*\((?:int|float|vector2|vector|vector4|matrix2|matrix3|matrix|string|bsdf|light|material)\s*\w)
    - name: entity.name.function.definition.vex
      match: (?<=void|int|float|vector2|vector|vector4|matrix2|matrix3|matrix|string|bsdf|light|material|chop|cop2|cvex|displacement|fog|image3d|light|pop|shadow|sop|surface)\s*\b\w*\b(?=\s*\()
    # - name: entity.name.function.call.vex
    #   match: \b(\w*)\b(?=\s*\()