<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>vfl</string>
		<string>h</string>
	</array>
	<key>name</key>
	<string>VEX</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#include</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#define</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#if</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#pragma</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#access</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#backticks</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?&lt;!\w|\.)((\.[0-9][0-9_]*|[0-9][0-9_]*\.|([0-9]+|[0-9][0-9_]*[0-9])\.[0-9][0-9_]*)f?|([1-9]|0_)[0-9_]*|0)([eE][\+-]?[0-9]+)?(?!\w|\.)</string>
			<key>name</key>
			<string>constant.numeric.dec.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(0b[01][01_]*)\b</string>
			<key>name</key>
			<string>constant.numeric.bin.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(0+[0-7][0-7_]*)\b</string>
			<key>name</key>
			<string>constant.numeric.oct.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(0[xX][0-9a-fA-F][0-9a-fA-F_]*)\b</string>
			<key>name</key>
			<string>constant.numeric.hex.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(false|true)\b</string>
			<key>name</key>
			<string>constant.language.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|continue|do|else|foreach|forpoints|for|gather|if|illuminance|import(?!\s*\()|return|while)\b</string>
			<key>name</key>
			<string>keyword.control.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\?|:)</string>
			<key>name</key>
			<string>keyword.operator.ternary.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(const|export)\b</string>
			<key>name</key>
			<string>storage.modifier.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(void|int|float|vector2|vector|vector4|matrix2|matrix3|matrix|string|bsdf|light|material|chop|cop2|cvex|displacement|fog|image3d|light|pop|shadow|sop|surface|struct)\b</string>
			<key>name</key>
			<string>storage.type.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(abs|accessframe|acos|addattribute|addattrib|adddetailattrib|addgroup|addpointattrib|addpoint|addprimattrib|addprim|addvariablename|addvertexattrib|addvertex|addvisualizer|agentaddclip|agentclipcatalog|agentcliplength|agentclipnames|agentclipsamplelocal|agentclipsampleworld|agentcliptimes|agentclipweights|agentcollisionlayer|agentcurrentlayer|agentlayerbindings|agentlayershapes|agentlayers|agentlocaltransforms|agentlocaltransform|agentrigchildren|agentrigfind|agentrigparent|agenttransformcount|agenttransformnames|agenttransformtolocal|agenttransformtoworld|agentworldtransforms|agentworldtransform|albedo|alphaname|ambient|anoise|append|area|argsort|arraylength|array|ashikhmin|asin|assert_enabled|assign|atan2|atan|atof|atoi|atten|attribclass|attribsize|attribtypeinfo|attribtype|attrib|avg|binput|blackbody|blinnBRDF|blinn|bouncelabel|bouncemask|bumpmapA|bumpmapB|bumpmapG|bumpmapL|bumpmapR|bumpmap|bumpname|cbrt|ceil|ch3|ch4|chendf|chendt|chend|chf|chinput|chi|chname|chnumchan|chp|chramp|chrate|chr|chsraw|chstartf|chstartt|chstart|chs|chv|ch|cinput|ckspline|clamp|clip|colormap|colorname|computenormal|concat|cone|cosh|cos|cracktransform|cross|cspline|ctransform|curlnoise2d|curlnoise|curlxnoise2d|curlxnoise|cvex_bsdf|degrees|depthmap|depthname|detailattribsize|detailattribtypeinfo|detailattribtype|detailattrib|detailintrinsic|detail|determinant|diffuseBRDF|diffuse|dihedral|dimport|distance2|distance|dot|dsmpixel|Du|Dv|Dw|eigenvalues|emission_bsdf|endswith|environment|erf_inv|erfc|erf|eulertoquaternion|eval_bsdf|expand_udim|expandpointgroup|expandprimgroup|exp|fastshadow|filamentsample|file_eof|file_flush|file_open|file_readlines|file_readline|file_read|file_seek|file_size|file_stat|file_tell|file_writelines|file_writeline|file_write|filtershadow|filterstep|findattribvalcount|findattribval|find|finput|fit01|fit10|fit11|fit|floor|flownoise|flowpnoise|foreach|forpoints|frac|fresnel|fromNDC|frontface|fuzzify|fuzzy_and|fuzzy_defuzz_centroid|fuzzy_nand|fuzzy_nor|fuzzy_not|fuzzy_nxor|fuzzy_or|fuzzy_xor|gather|geoself|getattribute|getattrib|getbbox|getblurP|getbounces|getbounds|getcomponents|getcomp|getfogname|getglobalraylevel|getlightid|getlightname|getlightscope|getlights|getlight|getmaterial|getobjectname|getphotonlight|getpointbbox|getprimid|getptextureid|getraylevel|getrayweight|getscope|getsmoothP|getspace|gradient3d|gradient|hair|hasattrib|hasdetailattrib|haslight|hasplane|haspointattrib|hasprimattrib|hasvertexattrib|hedge_dstpoint|hedge_dstvertex|hedge_equivcount|hedge_isequiv|hedge_isprimary|hedge_isvalid|hedge_nextequiv|hedge_next|hedge_postdstpoint|hedge_postdstvertex|hedge_presrcpoint|hedge_presrcvertex|hedge_prev|hedge_primary|hedge_prim|hedge_srcpoint|hedge_srcvertex|henyeygreenstein|hscript_noise|hscript_rand|hscript_snoise|hscript_sturb|hscript_turb|hsvtorgb|iaspect|ichname|ident|idtopoint|idtoprim|iendtime|iend|ihasplane|illuminance|importance_light|import|ingroup|inpointgroup|inprimgroup|insert|instance|integrate3dClip|integrate3d|interpolate|intersect3d|intersect_all|intersect_lights|intersect|inumplanes|invertexgroup|invert|iplaneindex|iplanename|iplanesize|irate|irradiance|isalpha|isbound|isconnected|isdigit|isfinite|isfogray|isframes|isnan|isotropic|israytracing|issamples|isseconds|isshadowray|istarttime|istart|istracing|isuvrendering|isvalidindex|isvarying|itoa|ixres|iyres|join|kspline|length2|length|len|lerp|lightid|limit_sample_space|limport|lkspline|log10|log|lookat|lspline|lstrip|luminance|lumname|makebasis|maketransform|maskname|matchvex_blinn|matchvex_specular|match|mattrib|max|mdensity|metaimport|metamarch|metanext|metastart|metaweight|minpos|min|mspace|nametopoint|nametoprim|nbouncetypes|nearpoints|nearpoint|neighbourcount|neighbours|neighbour|newgroup|newsampler|nextsample|ninput|noised|noise|normal_bsdf|normalize|normalname|npointsgroup|npoints|nprimitivesgroup|nprimitives|nrandom|ntransform|nuniqueval|nverticesgroup|nvertices|occlusion|onoise|opdigits|opdigits|opend|opstart|optransform|ord|osd_facecount|osd_firstpatch|osd_limitsurfacevertex|osd_limitsurface|osd_patchcount|osd_patches|outerproduct|ow_nspace|ow_space|ow_vspace|pack_inttosafefloat|pathtrace|pcclose|pcconvex|pcexport|pcfarthest|pcfilter|pcfind_radius|pcfind|pcgenerate|pcimportbyidx3|pcimportbyidx4|pcimportbyidxf|pcimportbyidxi|pcimportbyidxp|pcimportbyidxs|pcimportbyidxv|pcimport|pciterate|pcnumfound|pcopenlod|pcopen|pcsampleleaf|pcsize|pcunshaded|pcwrite|pgfind|phongBRDF|phonglobe|phong|photonmap|planeindex|planename|planesize|pluralize|pnoise|pointattribsize|pointattribtypeinfo|pointattribtype|pointattrib|pointedge|pointhedgenext|pointhedge|pointname|pointprims|pointvertex|pointvertices|point|polardecomp|pop|pow|prim_attribute|prim_normal|primattribsize|primattribtypeinfo|primattribtype|primattrib|primhedge|primintrinsic|primpoints|primpoint|primuv|primvertexcount|primvertex|primvertices|prim|print_once|printf|product|ptexture|ptlined|ptransform|push|qconvert|qdistance|qinvert|qmultiply|qrotate|quaternion|radians|random_fhash|random_ihash|random_shash|random_sobol|random|rand|rawbumpmapA|rawbumpmapB|rawbumpmapG|rawbumpmapL|rawbumpmapR|rawbumpmap|rawcolormap|rayhittest|rayimport|re_findall|re_find|re_match|re_replace|re_split|reflectlight|reflect|refractlight|refract|relativepath|relbbox|relpointbbox|removegroup|removeindex|removepoint|removeprim|removevalue|renderstate|reorder|resample_linear|resize|resolvemissedray|reverse|rgbtohsv|rgbtoxyz|rint|rotate_x_to|rotate|rstrip|sample_bsdf|sample_cauchy|sample_circle_arc|sample_circle_edge_uniform|sample_circle_slice|sample_circle_uniform|sample_direction_cone|sample_direction_uniform|sample_discrete|sample_exponential|sample_geometry|sample_hemisphere|sample_hypersphere_cone|sample_hypersphere_uniform|sample_light|sample_lognormal_by_median|sample_lognormal|sample_normal|sample_orientation_cone|sample_orientation_uniform|sample_photon|sample_sphere_cone|sample_sphere_uniform|sampledisk|scale|select|sensor_panorama_create|sensor_panorama_getcolor|sensor_panorama_getcone|sensor_panorama_getdepth|sensor_save|serialize|setagentclipnames|setagentcliptimes|setagentclipweights|setagentcollisionlayer|setagentcurrentlayer|setagentlocaltransforms|setagentlocaltransform|setagentworldtransforms|setagentworldtransform|setattribtypeinfo|setattrib|setcomp|setcurrentlight|setdetailattrib|setpointattrib|setpointgroup|setprimattrib|setprimgroup|setprimintrinsic|setprimvertex|setvertexattrib|setvertexgroup|set|shadow_light|shadowmap|shadow|shimport|shl|shrz|shr|sign|simport|sinh|sin|sleep|slerp|slice|smoothrotation|smooth|snoise|solvecubic|solvepoly|solvequadratic|sort|specularBRDF|specular|spline|splitpath|split|sprintf|sqrt|startswith|storelightexport|strip|strlen|sum|switch|swizzle|tanh|tan|tet_adjacent|tet_faceindex|teximport|texprintf|texture3dBox|texture3d|texture|titlecase|tolower|toNDC|toupper|trace|translate|translucent|transpose|trunc|tw_nspace|tw_space|tw_vspace|uniqueval|unpack_intfromsafefloat|unserialize|upush|uvunwrap|variance|velocityname|vertexattribsize|vertexattribtypeinfo|vertexattribtype|vertexattrib|vertexhedge|vertexindex|vertexnext|vertexpoint|vertexprev|vertexprimindex|vertexprim|vertex|vnoise|volumegradient|volumeindexorigin|volumeindextopos|volumeindexv|volumeindex|volumepostoindex|volumeres|volumesamplev|volumesample|volume|vtransform|wireblinn|wirediffuse|wnoise|wo_nspace|wo_space|wo_vspace|writepixel|wt_nspace|wt_space|wt_vspace|xnoised|xnoise|xyzdist|xyztorgb)\b(?=\s*\()</string>
			<key>name</key>
			<string>support.function.lib.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(__vex|__vex_major|__vex_minor|__vex_build|__vex_patch|__LINE__|__FILE__|__DATE__|__TIME__)\b</string>
			<key>name</key>
			<string>support.constant.vex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(accel|backtrack|Cd|center|density|dPd[xyz]|force|Frame|group_[\w-]*|i[xyz]|id|instance|name|nextid|num(pt|vtx|prim)|N|OpInput[1-4]|orient|P|pstate|(pt|vtx|prim)num|res[xyzt]|rot|scale|Time([iI]nc)?|torque|up|uv|v)\b</string>
			<key>name</key>
			<string>support.variable.common.vex</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(@)</string>
					<key>name</key>
					<string>keyword.operator.attribute-access.vex</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([ifuvp234s](?:\[\])?)?(?=@)</string>
					<key>name</key>
					<string>storage.type.attribute-access.vex</string>
				</dict>
			</array>
		</dict>
		<key>backticks</key>
		<dict>
			<key>begin</key>
			<string>(`)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.backticks.vex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(`)</string>
			<key>name</key>
			<string>source.hscript</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.hscript</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.vex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.vex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#todo</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.vex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=^|[^\\])\s*(?=\n)$\n?</string>
					<key>name</key>
					<string>comment.line.vex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#todo</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#continuation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>continuation</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.continuation.vex</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.continuation-space.vex</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\\)(\s*)(?=\n$)</string>
			<key>name</key>
			<string>meta.continuation.vex</string>
		</dict>
		<key>define</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#define)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.vex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=^|[^\\])(?=\n)</string>
					<key>name</key>
					<string>meta.preprocessor.define.vex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=#define)\s*([A-Za-z_]\w*)(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.macro-function.vex</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.parameters.vex</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.vex</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(\))|(?&lt;=^|[^\\])(?=\n)</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.parameters.vex</string>
								</dict>
							</dict>
							<key>name</key>
							<string>meta.preprocessor.function.vex</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>([A-Za-z_]\w*)</string>
									<key>name</key>
									<string>variable.parameter.vex</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#continuation</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;=#define)\s*([A-Za-z_]\w*)</string>
							<key>name</key>
							<string>entity.name.macro.vex</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\))\s+(?!$)</string>
							<key>comment</key>
							<string>Matches after the whitespaces following a first closed parentheses.</string>
							<key>end</key>
							<string>(?&lt;=^|[^\\])(?=\n)</string>
							<key>name</key>
							<string>string.quoted.token-string.vex</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\#\#</string>
									<key>name</key>
									<string>variable.parameter.concat.vex</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#continuation</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=\w)\s+(?!$)</string>
							<key>comment</key>
							<string>Matches after the whitespaces following the end of a first word (macro name).</string>
							<key>end</key>
							<string>(?&lt;=^|[^\\])(?=\n)</string>
							<key>name</key>
							<string>string.quoted.token-string.vex</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#continuation</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#continuation</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.vex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.macro.vex</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(#undef)\s+(\w*)\b</string>
					<key>name</key>
					<string>meta.preprocessor.undef.vex</string>
				</dict>
			</array>
		</dict>
		<key>disabled</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=#if|#elif)\s+(0+)\s*$</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.vex</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>comment.line.preprocessor.disabled.vex</string>
			<key>end</key>
			<string>(?=#elif|#else|#endif)</string>
			<key>name</key>
			<string>meta.preprocessor.disabled.vex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#eat-nested-ifs</string>
				</dict>
			</array>
		</dict>
		<key>eat-nested-ifs</key>
		<dict>
			<key>begin</key>
			<string>^\s*#if(?:n?def)?\b.*$</string>
			<key>end</key>
			<string>^\s*#endif\b.*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#eat-nested-ifs</string>
				</dict>
			</array>
		</dict>
		<key>elif</key>
		<dict>
			<key>begin</key>
			<string>(#elif)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.vex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=#elif|#else|#endif)</string>
			<key>name</key>
			<string>meta.preprocessor.elif.vex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#preprocessor-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#disabled</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>else</key>
		<dict>
			<key>begin</key>
			<string>(#else)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.vex</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=#endif)</string>
			<key>name</key>
			<string>meta.preprocessor.else.vex</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?!for|foreach)(\w+)\b(?=\s*\(\s*(const|export|int|float|vector2|vector|vector4|matrix2|matrix3|matrix|string|bsdf|light|material)\s+\w)</string>
					<key>name</key>
					<string>entity.name.function.definition.args.vex</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.vex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.definition.type.vex</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(void|int|float|vector2|vector|vector4|matrix2|matrix3|matrix|string|bsdf|light|material|chop|cop2|cvex|displacement|fog|image3d|light|pop|shadow|sop|surface|struct)\s*(?:\[\])?\s*\b(\w*)\b(?=\s*\()</string>
				</dict>
			</array>
		</dict>
		<key>if</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#if)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.vex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(#endif)</string>
					<key>name</key>
					<string>meta.preprocessor.if.vex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#preprocessor-function</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#elif</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#else</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(#ifn?def)\s+(\w*)\s*$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.vex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.macro.vex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(#endif)</string>
					<key>name</key>
					<string>meta.preprocessor.ifdef.vex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#elif</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#else</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>include</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.vex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.quoted.vex</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(#include)\s+(".*")\s*$</string>
					<key>name</key>
					<string>meta.preprocessor.include.quoted.vex</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.vex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.quoted.vex</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(#include)\s+(&lt;.*&gt;)\s*$</string>
					<key>name</key>
					<string>meta.preprocessor.include.lt-gt.vex</string>
				</dict>
			</array>
		</dict>
		<key>pragma</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#pragma)\s+(\w*)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.vex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.pragma.vex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=^|[^\\])(\n)</string>
					<key>name</key>
					<string>meta.preprocessor.pragma.vex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#continuation</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(_Pragma)\b(?=\()</string>
					<key>name</key>
					<string>support.function.pragma.vex</string>
				</dict>
			</array>
		</dict>
		<key>preprocessor-function</key>
		<dict>
			<key>match</key>
			<string>\b(defined|environment|access|access|strcmp)\b</string>
			<key>name</key>
			<string>support.function.preprocessor.vex</string>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(")</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.vex</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.misquot.vex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(")|(?&lt;=^|[^\\])(\n)</string>
					<key>name</key>
					<string>meta.string.double.vex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(\d+|[nrt\\"]|x[a-fA-F0-9]{1,8}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})</string>
							<key>name</key>
							<string>constant.character.escape.vex</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\%(\%|[\d+]?[cdfgpsx])</string>
							<key>name</key>
							<string>constant.other.placeholder.vex</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#continuation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#backticks</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Match all symbols in string outside possible backticks</string>
							<key>match</key>
							<string>(.)</string>
							<key>name</key>
							<string>string.quoted.double.vex</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(')</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.mismatched-quotation.vex</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(')|(?&lt;=^|[^\\])(\n)</string>
					<key>name</key>
					<string>string.quoted.single.vex</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#continuation</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>todo</key>
		<dict>
			<key>match</key>
			<string>\b(TODO)\b</string>
			<key>name</key>
			<string>invalid.illegal.todo.vex</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.vex</string>
</dict>
</plist>
