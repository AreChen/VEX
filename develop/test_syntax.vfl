#include <voplib.h>
#include "mylib.h"

#ifndef TEST
    #if access("testing.h") && environment(TESTING)
        #include "testing.h"
    #endif
#elif !strcmp(__vex_major, TEST)
    #define TEST 100
#elif 0
    #define TEST NaN
#else
    #define TEST 100
#endif

#define TEST "NaN"
#define SWAP(a, b) ((b), (a));

#define GREET(EXP, name)             \
    do                               \
    {                                \
        if (##EXP)                   \
        {                            \
            printf("Hello, ##name"); \
        }                            \
    }                                \
    while (false)

_Pragma("label parm \"Parameter \ Label\"");


#pragma opname v_supermat
#pragma oplabel "Super Material"
#pragma opicon SHOP_surface

#pragma label spectype "Shading Model"
#pragma label amb "Ambient"
#pragma label diff "Diffuse"
#pragma label spec "Specular"
#pragma label refl "Reflection"
#pragma label trans "Transmit"
#pragma label emit "Emission"
#pragma label drough "Diff Rough"

#pragma choice  tstyle  0   "Intrinsic World Space"    \
                        1   "Intrinsic Object Space"   \
                        2   "Compute from UV"


// Constants.
1.f
1.0_f
.1f
1.3
.3
1.
1_1.3_3
.3_3
1_1.
1.1_
1_000
1000_
0b0
0b1000
0b10_10_10 // 42!
017
0_17
00_07
0007
0xA1
0xA_1
0xA_1_
1e2
1e-2
1e+2
1e10
1_0.1e-2
true

// Illegal ones.
1.1.1
1_.1 // Truncates fractional part.
._1
1._1
_1000
00_08
0008
019 // Illegal octal.
0_19 // Legal and decimal.
0x_A1

r"asd\"fgh\t\\t\f%se\nd\\"
'asd\"fgh\t\\t\f%se\nd'
"%a%s%d%%f%fk%dfgh"
"\\t\td"
"\x41a"
"\595 \
\101"
"\895"
"\795"
"\uDEADBEEF"
"\u0123456789"
"\n \b \" \\ \r"


import shader;
import(something);
import_test();

vector Cf = 0
superfoo.x = x
f@orient = {0, 0, 1, 1}
@orient = .3
3[]@test
x = 0 ? x : 1
a0a0a_a_0


float function(vector temp)
{
    return 8;
}

float eight = function(P)

float some_function_def(
    vector pos;
    float rough;
    int maxoctaves;
    string noisetype
)
{
    float blur = sqrt(AREA(pos));
    MACRO_FUNC(blur)
    sometype inner_function(int a)
    {
        inner_function(pos, rough)
        return 0.0;
    }
    float nval = inner_function(pos, rough);
    return nval;
}

some_function_call(
    pos,
    rough,
    maxoctaves,
    noisetype
)

float x
x = some_function_call(pos, rough, maxoctaves, noisetype)
float x = some_function_call(pos, rough, maxoctaves, noisetype)

foreach (int i; array)
{
    0;
}
void for_each(int i; array)
{
    0;
}
sometype for_each(int i; array)
{
    return (sometype) 0;
}



/*
 * Test block comment.
 * Test TODO.
 */
int func(float TABLE_SIZE)
{
    // Test line comment.
    int table[TABLE_SIZE];
    {
        // Continued \
           comment   \
           test.
        for (int i = idx; i < len(points); i++)
        {
            if (intqwert && true)
            {
                removepoint(geo, points[i]);
            }
        }
        return 0;
    }
    find(table, 1);
}

// HScript in backticks support.
"Value is `if($PT % 2 == 0, ($TX - point("../mountain_z", ($PT + 1), "P", 0)), (point("../mountain_z", ($PT - 1), "P", 0) - $TX)))`"
"Truth in `if(1, 1, 0)` expression."
`if(1, 1, 0)`


// Compute curve u.

addpointattrib(0, "u", 0.0);

float length = primintrinsic(0, "measuredperimeter", 0);

float passed = 0;
for (int i = 1; i < @numpt; i++)
{
    vector a = point(0, "P", i);
    vector b = point(0, "P", i-1);
    passed += distance(a, b);
    setpointattrib(0, "u", i, passed/length);
}


#define PI `$PI`


if (i@group_main)
{
    int vtx = vertexindex(0, @primnum, 1);
    int pt = vertexpoint(0, vtx);
    s@point_pairs = sprintf("%d_%d", @ptnum, pt);
    i@group_pair`opdigits(oppwd())` = true;
}
else
{
    // TODO: something.
    foreach (int i; pointprims(0, @ptnum))
    {
        append(i[]@nbprims, i + @ptnum)
    }
    removepoint(0, @ptnum);
}
