{
    "Du": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/Du\">Du</a></h1><p class=\"summary\">Takes the derivative of the given value with respect to U.</p><ul><li><code>float Du(float value, ...)</code></li><li><code>vector Du(vector value, ...)</code></li><li><code>vector4 Du(vector4 value, ...)</code></li></ul>\n\n\n\n<p>Takes the derivative of the given value with respect to U.</p>\n<p>In shading contexts, this is the change in the variable over the area\nbeing shaded.</p>\n<p>You can <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#derive\">specify optional parameters</a>\nto control the computation.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "Dv": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/Dv\">Dv</a></h1><p class=\"summary\">Takes the derivative of the given value with respect to V.</p><ul><li><code>float Dv(float value, ...)</code></li><li><code>vector Dv(vector value, ...)</code></li><li><code>vector4 Dv(vector4 value, ...)</code></li></ul>\n\n\n\n<p>Takes the derivative of the given value with respect to V.</p>\n<p>In shading contexts, this is the change in the variable over the area\nbeing shaded.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "Dw": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/Dw\">Dw</a></h1><p class=\"summary\">Takes the derivative of the given value with respect to the 3rd axis, for volume rendering.</p><ul><li><code>float Dw(float p, ...)</code></li><li><code>vector Dw(vector p, ...)</code></li><li><code>vector4 Dw(vector4 p, ...)</code></li></ul>\n\n\n\n<p>In shading contexts, this is the change in the variable over the volume being shaded.\nWhen rendering surfaces, this function returns 0.</p>\n<p>You can <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#derive\">specify optional parameters</a>\nto control the computation.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Du\">Du()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to U.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Dv\">Dv()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to V.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "p"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "p"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "p"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "abs": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/abs\">abs</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the absolute value of the argument.</p><ul><li><code>int abs(int value)</code></li><li><code>float abs(float value)</code></li><li><code>vector2 abs(vector2 value)</code></li><li><code>vector abs(vector value)</code></li><li><code>vector4 abs(vector4 value)</code></li></ul>\n\n\n\n<h2 class=\"label section\" id=\"syntax\">\n            \n            Syntax\n        </h2>\n<div class=\"content\" id=\"syntax-body\">\n<div class=\"code-container\">\n<code class=\"line\">int abs(int n);\n</code><code class=\"line\">float abs(float n);\n</code><code class=\"line\">vector2 abs(vector2 n);\n</code><code class=\"line\">vector abs(vector n);\n</code><code class=\"line\">vector4 abs(vector4 n);\n</code>\n</div>\n</div>\n\n\n<h2 class=\"label section\" id=\"parameters\">\n            \n            Parameters\n        </h2>\n<div class=\"content\" id=\"parameters-body\">\n<p>n:\nA scalar or vector value.</p>\n</div>\n\n\n<h2 class=\"label section\" id=\"return\">\n            \n            Return Value\n        </h2>\n<div class=\"content\" id=\"return-body\">\n<p>The the scalar versions of <code>abs</code> return the absolute value\nof the given argument. The vector versions return a component-wise\nabsolute value of each vector value.</p>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "accessframe": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/accessframe\">accessframe</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\"></p><ul><li><code>void accessframe(int frame)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Tell the COP manager that you need access to the given frame.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "frame"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "acos": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/acos\">acos</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the inverse cosine of the argument.</p><ul><li><code>float acos(float v)</code></li><li><code>vector2 acos(vector2 v)</code></li><li><code>vector acos(vector v)</code></li><li><code>vector4 acos(vector4 v)</code></li></ul>\n\n\n\n<p>Returns the inverse cosine of the argument. The return value is in the range\n0 to \u03c0. The vector versions apply the operation in a component-wise fashion.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "addattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addattrib\">addattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Adds an attribute to a geometry.</p><ul><li><code>int addattrib(int geohandle, string attribtype, string name, int defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, string defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, float defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, vector2 defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, vector defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, vector4 defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, matrix2 defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, matrix3 defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, matrix defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, int[] defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, string[] defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, float[] defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, vector2[] defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, vector[] defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, vector4[] defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, matrix2[] defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, matrix3[] defvalue)</code></li><li><code>int addattrib(int geohandle, string attribtype, string name, matrix[] defvalue)</code></li></ul>\n\n\n\n<p>Adds an attribute value on the given geometry.  If an attribute of the same\nname already exists, an attempt will be made to convert it to the new type.\nIt returns the geohandle on success or -1 on failure.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>attribtype</code> is one of:</p>\n\n<p>\n<code>\"detail\"</code>, <code>\"global\"</code>\n\n<div class=\"content\">\n<p>Detail attributes.</p>\n</div>\n</p>\n<p>\n<code>\"point\"</code>\n\n<div class=\"content\">\n<p>Point attributes.</p>\n</div>\n</p>\n<p>\n<code>\"prim\"</code>\n\n<div class=\"content\">\n<p>Primitive attributes.</p>\n</div>\n</p>\n<p>\n<code>\"vertex\"</code>\n\n<div class=\"content\">\n<p>Vertex attributes.</p>\n</div>\n</p>\n\n<p><code>name</code> is the name of the attribute to create.</p>\n<p><code>defvalue</code> provides the default value for the attribute and determines the\ntype of attribute to create.  String and array attributes cannot have defaults, so only the type is used in those cases.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "addattribute": {
        "sigs": [
            {
                "argnames": [
                    "aname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const matrix3"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "aname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const matrix"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "aname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "aname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "aname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "aname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "aname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "name",
                    "values",
                    "capacity"
                ],
                "args": [
                    "const string",
                    "const float[]",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "adddetailattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/adddetailattrib\">adddetailattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Adds an attribute to a geometry.</p><ul><li><code>int adddetailattrib(int geohandle, string name, int defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, int defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, string defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, string defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, float defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, float defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, vector2 defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, vector2 defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, vector defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, vector defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, vector4 defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, vector4 defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, matrix2 defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, matrix2 defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, matrix3 defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, matrix3 defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, matrix defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, matrix defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, int[] defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, int[] defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, string[] defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, string[] defvalue, string typeinfo=\"\")</code></li><li><code>int adddetailattrib(int geohandle, string name, float[] defvalue)</code></li><li><code>int adddetailattrib(int geohandle, string name, float[] defvalue, string typeinfo=\"\")</code></li></ul>\n\n\n\n<p>Adds an attribute value on the given geometry.  If an attribute of the same\nname already exists, an attempt will be made to convert it to the new type.\nIt returns the geohandle on success or -1 on failure.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the attribute to create.</p>\n<p><code>defvalue</code> provides the default value for the attribute and determines the\ntype of attribute to create.  String and array attributes cannot have defaults, so only the type is used in those cases.</p>\n<p><code>typeinfo</code> controls how the attribute is transformed.  See <code>attribtypeinfo</code> for more details.  If unspecified, this is unchanged.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "addgroup": {
        "sigs": [
            {
                "argnames": [
                    "group_name",
                    "point_number"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "addpoint": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addpoint\">addpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Adds a point to the geometry.</p><ul><li><code>int addpoint(int geohandle, int point_number)</code></li><li><code>int addpoint(int geohandle, vector pos)</code></li></ul>\n\n\n\n<p>Creates a point in the geometry specified by <code>geohandle</code>.  The returned value is a point number that can be used with the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setpointattrib\" title=\"Sets a point attribute in a geometry.\">setpointattrib()</a> to change the value of the point, but is <em>not</em> the final point number of the point.  It returns -1 on failure.</p>\n<p>If a point_number is specified, that point will be cloned and all of its attribute and group memberships copied.</p>\n<p>If the <code>pos</code> is specified, a point with default attributes will be created at that location.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addvertex\">addvertex()</a><div class=\"related-summary\">Adds a vertex to the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addprim\">addprim()</a><div class=\"related-summary\">Adds a primitive to the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "point_number"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "pos"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "addpointattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addpointattrib\">addpointattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Adds an attribute to a geometry.</p><ul><li><code>int addpointattrib(int geohandle, string name, int defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, int defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, string defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, string defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, float defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, float defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, vector2 defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, vector2 defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, vector defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, vector defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, vector4 defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, vector4 defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, matrix2 defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, matrix2 defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, matrix3 defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, matrix3 defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, matrix defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, matrix defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, int[] defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, int[] defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, string[] defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, string[] defvalue, string typeinfo=\"\")</code></li><li><code>int addpointattrib(int geohandle, string name, float[] defvalue)</code></li><li><code>int addpointattrib(int geohandle, string name, float[] defvalue, string typeinfo=\"\")</code></li></ul>\n\n\n\n<p>Adds an attribute value on the given geometry.  If an attribute of the same\nname already exists, an attempt will be made to convert it to the new type.\nIt returns the geohandle on success or -1 on failure.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the attribute to create.</p>\n<p><code>defvalue</code> provides the default value for the attribute and determines the\ntype of attribute to create.  String and array attributes cannot have defaults, so only the type is used in those cases.</p>\n<p><code>typeinfo</code> controls how the attribute is transformed.  See <code>attribtypeinfo</code> for more details.  If unspecified, this is unchanged.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "addprim": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addprim\">addprim</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Adds a primitive to the geometry.</p><ul><li><code>void addprim(int &amp;primnum, int geohandle, string type, int pt0, int pt1, int pt2, int pt3, int[] &amp;vertices)</code></li><li><code>void addprim(int &amp;primnum, int geohandle, string type, int pt0, int pt1, int pt2, int[] &amp;vertices)</code></li><li><code>void addprim(int &amp;primnum, int geohandle, string type, int pt0, int pt1, int[] &amp;vertices)</code></li><li><code>void addprim(int &amp;primnum, int geohandle, string type, int pt0, int[] &amp;vertices)</code></li><li><code>void addprim(int &amp;primnum, int geohandle, string type, int[] points, int[] &amp;vertices)</code></li><li><code>int addprim(int geohandle, string type)</code></li><li><code>int addprim(int geohandle, string type, int pt0)</code></li><li><code>int addprim(int geohandle, string type, int pt0, int pt1)</code></li><li><code>int addprim(int geohandle, string type, int pt0, int pt1, int pt2)</code></li><li><code>int addprim(int geohandle, string type, int pt0, int pt1, int pt2, int pt3)</code></li><li><code>int addprim(int geohandle, string type, int[] points)</code></li></ul>\n\n\n\n<p>Creates a primitive in the geometry specified by <code>geohandle</code>.  The returned value is a primitive number that can be used with the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setprimattrib\" title=\"Sets a primitive attribute in a geometry.\">setprimattrib()</a> to set attribute values of the primitive, but is <em>not</em> the final primitive number of the primitive.  It returns -1 on failure.</p>\n<p>If any point numbers are specified, vertices will be added to the new primitive.  This is necessary for tetrahedra, spheres, circles, and tubes.  If a <code>vertices</code> array is given, it will be filled with numbers of those vertices for use with <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setvertexattrib\" title=\"Sets a vertex attribute in a geometry.\">setvertexattrib()</a>, but these are <em>not</em> the final vertex numbers of the vertices.  If the primitive was created, but any points are not valid, the corresponding numbers in <code>vertices</code> may be -1.</p>\n<p><code>type</code> can be:</p>\n\n<p>\n<code>\"poly\"</code>\n\n<div class=\"content\">\n<p>Closed polygon.</p>\n</div>\n</p>\n<p>\n<code>\"polyline\"</code>\n\n<div class=\"content\">\n<p>Open polygon.</p>\n</div>\n</p>\n<p>\n<code>\"tet\"</code>\n\n<div class=\"content\">\n<p>Tetrahedron primitive.  This requires exactly 4 valid points to be specified.  <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/addvertex\" title=\"Adds a vertex to the geometry.\">addvertex()</a> cannot be called on this primitive.</p>\n</div>\n</p>\n<p>\n<code>\"sphere\"</code>, <code>\"circle\"</code>, <code>\"tube\"</code>, <code>\"metaball\"</code>, <code>\"metasquad\"</code>\n\n<div class=\"content\">\n<p>Sphere, circle, tube, metaball, or metasuperquadric primitive.  These require exactly 1 valid point to be specified.  <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/addvertex\" title=\"Adds a vertex to the geometry.\">addvertex()</a> cannot be called on these primitives.  Their transforms can be set using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setprimintrinsic\" title=\"Sets a primitive intrinsic value in a geometry.\">setprimintrinsic()</a>, e.g. <code>setprimintrinsic(geoself(), \"transform\", prim, transform_value);</code>, where transform_value is a <code>matrix3</code>.</p>\n</div>\n</p>\n<p>\n<code>\"AlembicRef\"</code>, <code>\"PackedDisk\"</code>\n\n<div class=\"content\">\n<p>Packed Alembic or packed disk primitive.  These require exactly 1 valid point to be specified.  <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/addvertex\" title=\"Adds a vertex to the geometry.\">addvertex()</a> cannot be called on these primitives.  Their intrinsics can be set using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setprimintrinsic\" title=\"Sets a primitive intrinsic value in a geometry.\">setprimintrinsic()</a>, e.g. <code>setprimintrinsic(geoself(), \"unexpandedfilename\", prim, \"test.bgeo\");</code> for a packed disk primitive.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addvertex\">addvertex()</a><div class=\"related-summary\">Adds a vertex to the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addpoint\">addpoint()</a><div class=\"related-summary\">Adds a point to the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "type"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "type",
                    "pt0"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "type",
                    "pt0",
                    "pt1"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "type",
                    "pt0",
                    "pt1",
                    "pt2"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "type",
                    "pt0",
                    "pt1",
                    "pt2",
                    "pt3"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "primnum",
                    "geohandle",
                    "type",
                    "pt0",
                    "pt1",
                    "pt2",
                    "pt3",
                    "vertices"
                ],
                "args": [
                    "int",
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "primnum",
                    "geohandle",
                    "type",
                    "pt0",
                    "pt1",
                    "pt2",
                    "vertices"
                ],
                "args": [
                    "int",
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int",
                    "int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "primnum",
                    "geohandle",
                    "type",
                    "pt0",
                    "pt1",
                    "vertices"
                ],
                "args": [
                    "int",
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "primnum",
                    "geohandle",
                    "type",
                    "pt0",
                    "vertices"
                ],
                "args": [
                    "int",
                    "const int",
                    "const string",
                    "const int",
                    "int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "geohandle",
                    "type",
                    "points"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "primnum",
                    "geohandle",
                    "type",
                    "points",
                    "vertices"
                ],
                "args": [
                    "int",
                    "const int",
                    "const string",
                    "const int[]",
                    "int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "addprimattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addprimattrib\">addprimattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Adds an attribute to a geometry.</p><ul><li><code>int addprimattrib(int geohandle, string name, int defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, int defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, string defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, string defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, float defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, float defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, vector2 defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, vector2 defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, vector defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, vector defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, vector4 defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, vector4 defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, matrix2 defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, matrix2 defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, matrix3 defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, matrix3 defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, matrix defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, matrix defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, int[] defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, int[] defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, string[] defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, string[] defvalue, string typeinfo=\"\")</code></li><li><code>int addprimattrib(int geohandle, string name, float[] defvalue)</code></li><li><code>int addprimattrib(int geohandle, string name, float[] defvalue, string typeinfo=\"\")</code></li></ul>\n\n\n\n<p>Adds an attribute value on the given geometry.  If an attribute of the same\nname already exists, an attempt will be made to convert it to the new type.\nIt returns the geohandle on success or -1 on failure.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the attribute to create.</p>\n<p><code>defvalue</code> provides the default value for the attribute and determines the\ntype of attribute to create.  String and array attributes cannot have defaults, so only the type is used in those cases.</p>\n<p><code>typeinfo</code> controls how the attribute is transformed.  See <code>attribtypeinfo</code> for more details.  If unspecified, this is unchanged.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "addvariablename": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addvariablename\">addvariablename</a></h1><span><span class=\"padder\"><span class=\"pillow\">node</span></span></span><p class=\"summary\">Adds the mapping of the attribute aname to the local variable\nvname.</p><ul><li><code>void addvariablename(string aname, string vname)</code><span class=\"padder\"><span class=\"pillow\">pop</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></li><li><code>int addvariablename(int handle, string aname, string vname)</code></li></ul>\n\n\n\n<p>Adds the mapping of the attribute <code>aname</code> to the local variable <code>vname</code>. In\nSOPs that support this, such as the Point SOP, one will then have the\nlocal variable $<code>vname</code> referencing the attribute <code>aname</code>. This\nemulates the behavior of the <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/attribcreate\" title=\"Adds or edits user defined attributes.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/SOP/attribcreate.svg\">[Image \ud83d\udd17]</a>AttribCreate SOP</a>.</p>\n<p>The version taking a handle can be used in CVEX contexts. The handle\nshould be something like <code>geoself()</code> to refer your own geometry.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "aname",
                    "vname"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "aname",
                    "vname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic_pair": true
            }
        ]
    },
    "addvertex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addvertex\">addvertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Adds a vertex to the geometry.</p><ul><li><code>int addvertex(int geohandle, int prim, int point)</code></li></ul>\n\n\n\n<p>Creates a vertex in the geometry specified by <code>geohandle</code>.  The returned value is a vertex number that can be used with the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setvertexattrib\" title=\"Sets a vertex attribute in a geometry.\">setvertexattrib()</a> to change the value of the vertex, but is <em>not</em> the final vertex number of the vertex.  It returns -1 on failure.</p>\n<p>The new vertex will be appended to the given primitives vertex list. It will be wired to the given point.  If either of these are -1, no operation is performed and -1 is returned.</p>\n<p>The return value is a linear vertex.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addprim\">addprim()</a><div class=\"related-summary\">Adds a primitive to the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addpoint\">addpoint()</a><div class=\"related-summary\">Adds a point to the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "point"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "addvertexattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addvertexattrib\">addvertexattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Adds an attribute to a geometry.</p><ul><li><code>int addvertexattrib(int geohandle, string name, int defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, int defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, string defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, string defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, float defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, float defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, vector2 defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, vector2 defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, vector defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, vector defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, vector4 defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, vector4 defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, matrix2 defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, matrix2 defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, matrix3 defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, matrix3 defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, matrix defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, matrix defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, int[] defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, int[] defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, string[] defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, string[] defvalue, string typeinfo=\"\")</code></li><li><code>int addvertexattrib(int geohandle, string name, float[] defvalue)</code></li><li><code>int addvertexattrib(int geohandle, string name, float[] defvalue, string typeinfo=\"\")</code></li></ul>\n\n\n\n<p>Adds an attribute value on the given geometry.  If an attribute of the same\nname already exists, an attempt will be made to convert it to the new type.\nIt returns the geohandle on success or -1 on failure.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the attribute to create.</p>\n<p><code>defvalue</code> provides the default value for the attribute and determines the\ntype of attribute to create.  String and array attributes cannot have defaults, so only the type is used in those cases.</p>\n<p><code>typeinfo</code> controls how the attribute is transformed.  See <code>attribtypeinfo</code> for more details.  If unspecified, this is unchanged.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "defvalue",
                    "typeinfo=\"\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "addvisualizer": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/addvisualizer\">addvisualizer</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Appends to the visualizer detail attribute.</p><ul><li><code>int addvisualizer(int geohandle, string visualizer)</code></li></ul>\n\n\n\n<p>Creates the <code>visualizer</code> detail string array attribute and merges the\ngiven visualizer in.  This does not add it if it is already in the array.</p>\n<p>A visualizer entry should be a full <code>op:</code> path to a node.  That node\u2019s\nvisualizers will be used every time the geometry is displayed.  This\nis a soft reference, so updates to the nodes visualizer will be reflected\nin the geometry right away.  Similarly, the visualizer will not work\nin other Houdini sessions if the source node isn\u2019t present.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>visualizer</code> is the string to add to the visualizer list for the geometry.  It should start with <code>op:</code> and then a full path to a node.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "visualizer"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agentaddclip": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentaddclip\">agentaddclip</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Add a clip into an agent\u2019s definition.</p><ul><li><code>int agentaddclip(int geohandle, int prim, string clipname, string clippath, int keepref)</code></li></ul>\n\n\n\n<p>This function adds a <code>.clip</code> or <code>.bclip</code> file saved from a CHOP (or generated\nby an <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/out/agent\" title=\"This output operator is used to write agent definition files.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/CROWDS/agent.svg\">[Image \ud83d\udd17]</a>Agent</a> ROP) to the definition of the given agent primitive.\nClips in an agent definition contains transform animation for driving the\nagent\u2019s skeleton.</p>\n<p>The channels within the clip should of the form <code>transform_name:channel_name</code>\nwhere _transform_name_ is a string matching the values returned by\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformnames\" title=\"Returns the name of each transform in an agent primitive\u2019s rig.\">agenttransformnames()</a>() and _channel_name_ is one of <code>tx</code>, <code>ty</code>, <code>tz</code>, <code>rx</code>,\n<code>ry</code>, <code>rz</code>, <code>sx</code>, <code>sy</code>, or <code>sz</code>. The channels starting with <code>t</code> denote\ntranslation, <code>r</code> denote rotation, and <code>s</code> denote scale. The resulting\ntransforms will be treated as <em>local</em> transforms, such as those returned by\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransform\" title=\"Returns the current local space transform of an agent primitive\u2019s bone.\">agentlocaltransform()</a>() (ie. they are relative to the corresponding parent\ntransform in the agent\u2019s skeleton).</p>\n<p><code>geohandle</code>:\nHandle to the geometry to write to. <code>geoself()</code> can be used to get a handle\nto the current geometry.</p>\n<p><code>prim</code>:\nThe primitive number of the agent primitive whose definition is to be\nmodified.</p>\n<p><code>clipname</code>:\nThe name to identify the clip. All clips in an agent definition must have\nunique names.</p>\n<p><code>clippath</code>:\nThe filename of the <code>.clip</code> or <code>.bclip</code> file saved from a CHOP or generated\nby the <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/out/agent\" title=\"This output operator is used to write agent definition files.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/CROWDS/agent.svg\">[Image \ud83d\udd17]</a>Agent</a> ROP. Use <code>op:full_path_to_chop</code> to directly refer\nto a CHOP in the scene.</p>\n<p><code>keepref</code>:\nWhen <code>clippath</code> refers to a filename on disk, this boolean flag indicates\nwhether the external reference should be maintained when the geometry will\nbe saved. If the reference is maintained, then the original source of the\nclip needs to be available when the saved geometry is used. Otherwise, a\ncopy of the clip will be inlined when saving out the geometry so that the\noriginal clip is no longer needed.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransform\">agentlocaltransform()</a><div class=\"related-summary\">Returns the current local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigparent\">agentrigparent()</a><div class=\"related-summary\">Returns the parent transform of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformnames\">agenttransformnames()</a><div class=\"related-summary\">Returns the name of each transform in an agent primitive\u2019s rig.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "clipname",
                    "clippath",
                    "keepref"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agentclipcatalog": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns all of the animation clips that have been loaded for an agent primitive.</p><ul><li><code>string[] agentclipcatalog(int opinput, int prim)</code></li><li><code>string[] agentclipcatalog(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "agentclipchannel": {
        "added": "15.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipchannel\">agentclipchannel</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.5</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds the index of a channel in an agent\u2019s animation clip.</p><ul><li><code>int agentclipchannel(int opinput, int prim, string clipname, string channel)</code></li><li><code>int agentclipchannel(string geometry, int prim, string clipname, string channel)</code></li></ul>\n\n\n\n<p>Returns the index of a channel in the specified animation clip.\nReturns -1 if <code>clipname</code> is not one of the agent\u2019s <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\" title=\"Returns all of the animation clips that have been loaded for an agent primitive.\">animation clips</a>,  <code>prim</code> is out of range, <code>prim</code> is not an agent primitive, or <code>channel</code> does not exist.</p>\n<p>For sampling the clip\u2019s transform channels, use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentrigfind\" title=\"Finds the index of a transform in an agent primitive\u2019s rig.\">agentrigfind()</a> and either <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\" title=\"Samples an agent\u2019s animation clip at a specific time.\">agentclipsamplelocal()</a> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\" title=\"Samples an agent\u2019s animation clip at a specific time.\">agentclipsampleworld()</a>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>clipname</code>:\nThe name of the animation clip.</p>\n<p><code>channel</code>:\nName of a channel in the animation clip.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsample\">agentclipsample()</a><div class=\"related-summary\">Samples a channel of an agent\u2019s clip at a specific time.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname",
                    "channel"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname",
                    "channel"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agentcliplength": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</p><ul><li><code>float agentcliplength(int opinput, int prim, string clipname)</code></li><li><code>float agentcliplength(string geometry, int prim, string clipname)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if <code>prim</code> is out of range or is not an agent primitive, or if <code>clipname</code> is not one of the agent\u2019s <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\" title=\"Returns all of the animation clips that have been loaded for an agent primitive.\">animation clips</a>.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>The number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>clipname</code>\n\n<div class=\"content\">\n<p>The name of the animation clip.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplerate\">agentclipsamplerate()</a><div class=\"related-summary\">Returns the sample rate of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "agentclipnames": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns an agent primitive\u2019s current animation clips.</p><ul><li><code>string[] agentclipnames(int opinput, int prim)</code></li><li><code>string[] agentclipnames(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "agentclipsample": {
        "added": "15.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipsample\">agentclipsample</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.5</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Samples a channel of an agent\u2019s clip at a specific time.</p><ul><li><code>float agentclipsample(int opinput, int prim, string clipname, float time, int channel_index)</code></li><li><code>float agentclipsample(int opinput, int prim, string clipname, float time, string channel)</code></li><li><code>float agentclipsample(string geometry, int prim, string clipname, float time, int channel_index)</code></li><li><code>float agentclipsample(string geometry, int prim, string clipname, float time, string channel)</code></li></ul>\n\n\n\n<p>Evaluates the clip at the given time and returns the value of the specified channel.\nReturns zero if <code>clipname</code> is not one of the agent\u2019s <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\" title=\"Returns all of the animation clips that have been loaded for an agent primitive.\">animation clips</a>,  <code>prim</code> is out of range, <code>prim</code> is not an agent primitive, <code>channel_index</code> is out of range, or <code>channel</code> does not exist.</p>\n<p>For sampling the clip\u2019s transform channels, use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\" title=\"Samples an agent\u2019s animation clip at a specific time.\">agentclipsamplelocal()</a> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\" title=\"Samples an agent\u2019s animation clip at a specific time.\">agentclipsampleworld()</a> instead.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>clipname</code>:\nThe name of the animation clip.</p>\n<p><code>time</code>:\nThe time (in seconds) to evaluate the clip at. If this time is greater than the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\" title=\"Returns the length (in seconds) of an agent\u2019s animation clip.\">clip\u2019s length</a>, it will be wrapped around.</p>\n<p><code>channel_index</code>:\nIndex of a channel in the animation clip, as returned by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipchannel\" title=\"Finds the index of a channel in an agent\u2019s animation clip.\">agentclipchannel()</a>.</p>\n<p><code>channel</code>:\nName of a channel in the animation clip.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Sample a channel of the walk clip after 1.2 seconds.</p>\n<div class=\"code-container\">\n<code class=\"line\">float value = agentclipsample(0, @primnum, \"walk\", 1.2, \"latch_leftfoot\");\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipchannel\">agentclipchannel()</a><div class=\"related-summary\">Finds the index of a channel in an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplerate\">agentclipsamplerate()</a><div class=\"related-summary\">Returns the sample rate of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname",
                    "time",
                    "channel_index"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname",
                    "time",
                    "channel"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname",
                    "time",
                    "channel_index"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname",
                    "time",
                    "channel"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "agentclipsamplelocal": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Samples an agent\u2019s animation clip at a specific time.</p><ul><li><code>matrix agentclipsamplelocal(int opinput, int prim, string clipname, float time, int transform)</code></li><li><code>matrix agentclipsamplelocal(string geometry, int prim, string clipname, float time, int transform)</code></li><li><code>matrix[] agentclipsamplelocal(int opinput, int prim, string clipname, float time)</code></li><li><code>matrix[] agentclipsamplelocal(string geometry, int prim, string clipname, float time)</code></li></ul>\n\n\n\n<p>Evaluates the clip at the given time and returns the local transforms of the agent\u2019s rig.\nReturns an empty array if <code>clipname</code> is not one of the agent\u2019s <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\" title=\"Returns all of the animation clips that have been loaded for an agent primitive.\">animation clips</a>,  <code>prim</code> is out of range, <code>prim</code> is not an agent primitive, or <code>transform</code> is <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\" title=\"Returns the number of transforms in an agent primitive\u2019s rig.\">out of range</a>.\nThe <code>matrix</code> signature is more efficient than the <code>matrix[]</code> signature for sampling a single transform.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>clipname</code>:\nThe name of the animation clip.</p>\n<p><code>time</code>:\nThe time (in seconds) to evaluate the clip at. If this time is greater than the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\" title=\"Returns the length (in seconds) of an agent\u2019s animation clip.\">clip\u2019s length</a>, it will be wrapped around.</p>\n<p><code>transform</code>:\nIndex of a transform in the agent\u2019s rig.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Sample the local transforms of the walk clip after 1.2 seconds.</p>\n<div class=\"code-container\">\n<code class=\"line\">matrix xforms[] = agentclipsamplelocal(0, @primnum, \"agent1_clip.walk\", 1.2);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\">agenttransformcount()</a><div class=\"related-summary\">Returns the number of transforms in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname",
                    "time",
                    "transform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname",
                    "time",
                    "transform"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname",
                    "time"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname",
                    "time"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            }
        ]
    },
    "agentclipsamplerate": {
        "added": "15.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplerate\">agentclipsamplerate</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.5</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the sample rate of an agent\u2019s animation clip.</p><ul><li><code>float agentclipsamplerate(int opinput, int prim, string clipname)</code></li><li><code>float agentclipsamplerate(string geometry, int prim, string clipname)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if <code>prim</code> is out of range or is not an agent primitive, or if <code>clipname</code> is not one of the agent\u2019s <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\" title=\"Returns all of the animation clips that have been loaded for an agent primitive.\">animation clips</a>.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>The number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>clipname</code>\n\n<div class=\"content\">\n<p>The name of the animation clip.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "agentclipsampleworld": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Samples an agent\u2019s animation clip at a specific time.</p><ul><li><code>matrix agentclipsampleworld(int opinput, int prim, string clipname, float time, int transform)</code></li><li><code>matrix agentclipsampleworld(string geometry, int prim, string clipname, float time, int transform)</code></li><li><code>matrix[] agentclipsampleworld(int opinput, int prim, string clipname, float time)</code></li><li><code>matrix[] agentclipsampleworld(string geometry, int prim, string clipname, float time)</code></li></ul>\n\n\n\n<p>Evaluates the clip at the given time and returns the world transforms of the agent\u2019s rig.\nReturns an empty array if <code>clipname</code> is not one of the agent\u2019s <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\" title=\"Returns all of the animation clips that have been loaded for an agent primitive.\">animation clips</a>,  <code>prim</code> is out of range, <code>prim</code> is not an agent primitive, or <code>transform</code> is <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\" title=\"Returns the number of transforms in an agent primitive\u2019s rig.\">out of range</a>.\nThe <code>matrix</code> signature is more efficient than the <code>matrix[]</code> signature for sampling a single transform.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>clipname</code>:\nThe name of the animation clip.</p>\n<p><code>time</code>:\nThe time (in seconds) to evaluate the clip at. If this time is greater than the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\" title=\"Returns the length (in seconds) of an agent\u2019s animation clip.\">clip\u2019s length</a>, it will be wrapped around.</p>\n<p><code>transform</code>:\nIndex of a transform in the agent\u2019s rig.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Sample the world transforms of the walk clip after 1.2 seconds.</p>\n<div class=\"code-container\">\n<code class=\"line\">matrix xforms[] = agentclipsampleworld(0, @primnum, \"agent1_clip.walk\", 1.2);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\">agenttransformcount()</a><div class=\"related-summary\">Returns the number of transforms in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname",
                    "time",
                    "transform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname",
                    "time",
                    "transform"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "clipname",
                    "time"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "clipname",
                    "time"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            }
        ]
    },
    "agentcliptimes": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the current times for an agent primitive\u2019s animation clips.</p><ul><li><code>float[] agentcliptimes(int opinput, int prim)</code></li><li><code>float[] agentcliptimes(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            }
        ]
    },
    "agentcliptransformgroups": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentcliptransformgroups\">agentcliptransformgroups</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the transform groups for an agent primitive\u2019s current animation clips.</p><ul><li><code>string[] agentcliptransformgroups(int opinput, int prim)</code></li><li><code>string[] agentcliptransformgroups(string geometry, int prim)</code></li></ul>\n\n\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../crowds/agents#xformgroups\">Transform Groups</a> for more information.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">string[] agentcliptransformgroups(int opinput, int prim)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">string[] agentcliptransformgroups(string geometry, int prim)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>The number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformgroupmember\">agenttransformgroupmember()</a><div class=\"related-summary\">Returns whether a transform is a member of the specified transform group.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformgroups\">agenttransformgroups()</a><div class=\"related-summary\">Returns the names of the transform groups in an agent\u2019s definition.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "agentclipweights": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</p><ul><li><code>float[] agentclipweights(int opinput, int prim)</code></li><li><code>float[] agentclipweights(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            }
        ]
    },
    "agentcollisionlayer": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentcollisionlayer\">agentcollisionlayer</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the name of the collision layer of an agent primitive.</p><ul><li><code>string agentcollisionlayer(int opinput, int prim)</code></li><li><code>string agentcollisionlayer(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns an empty string if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcurrentlayer\">agentcurrentlayer()</a><div class=\"related-summary\">Returns the name of the current layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayerbindings\">agentlayerbindings()</a><div class=\"related-summary\">Returns the transform that each shape in an agent\u2019s layer is bound to.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\">agentlayers()</a><div class=\"related-summary\">Returns all of the layers that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayershapes\">agentlayershapes()</a><div class=\"related-summary\">Returns the names of the shapes referenced by an agent primitive\u2019s layer.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcollisionlayer\">setagentcollisionlayer()</a><div class=\"related-summary\">Sets the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcurrentlayer\">setagentcurrentlayer()</a><div class=\"related-summary\">Sets the current layer of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "agentcurrentlayer": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentcurrentlayer\">agentcurrentlayer</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the name of the current layer of an agent primitive.</p><ul><li><code>string agentcurrentlayer(int opinput, int prim)</code></li><li><code>string agentcurrentlayer(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns an empty string if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcollisionlayer\">agentcollisionlayer()</a><div class=\"related-summary\">Returns the name of the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayerbindings\">agentlayerbindings()</a><div class=\"related-summary\">Returns the transform that each shape in an agent\u2019s layer is bound to.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\">agentlayers()</a><div class=\"related-summary\">Returns all of the layers that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayershapes\">agentlayershapes()</a><div class=\"related-summary\">Returns the names of the shapes referenced by an agent primitive\u2019s layer.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcollisionlayer\">setagentcollisionlayer()</a><div class=\"related-summary\">Sets the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcurrentlayer\">setagentcurrentlayer()</a><div class=\"related-summary\">Sets the current layer of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "agentlayerbindings": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlayerbindings\">agentlayerbindings</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the transform that each shape in an agent\u2019s layer is bound to.</p><ul><li><code>int[] agentlayerbindings(int opinput, int prim, string layername, string shapetype)</code></li><li><code>int[] agentlayerbindings(string geometry, int prim, string layername, string shapetype)</code></li></ul>\n\n\n\n<p>Returns an empty array if <code>layername</code> is not one of the agent\u2019s <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\" title=\"Returns all of the layers that have been loaded for an agent primitive.\">layers</a>, <code>shapetype</code> is invalid, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>layername</code>:\nThe name of one of the agent\u2019s layers.</p>\n<p><code>shapetype</code>:\nWhether to inspect <code>\"static\"</code>, <code>\"deforming\"</code>, or <code>\"all\"</code> shapes from the specified layer.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Find the current world transform of each static shape in the collision layer.</p>\n<div class=\"code-container\">\n<code class=\"line\">string layer = agentcollisionlayer(0, @primnum);\n</code><code class=\"line\">int bindings[] = agentlayerbindings(0, @primnum, layer, \"static\");\n</code><code class=\"line\">matrix xforms[] = agentworldtransforms(0, @primnum);\n</code><code class=\"line\">\n</code><code class=\"line\">foreach (int idx; bindings) {\n</code><code class=\"line\">matrix xform = xforms[idx];\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcollisionlayer\">agentcollisionlayer()</a><div class=\"related-summary\">Returns the name of the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcurrentlayer\">agentcurrentlayer()</a><div class=\"related-summary\">Returns the name of the current layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\">agentlayers()</a><div class=\"related-summary\">Returns all of the layers that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayershapes\">agentlayershapes()</a><div class=\"related-summary\">Returns the names of the shapes referenced by an agent primitive\u2019s layer.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcollisionlayer\">setagentcollisionlayer()</a><div class=\"related-summary\">Sets the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcurrentlayer\">setagentcurrentlayer()</a><div class=\"related-summary\">Sets the current layer of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "layername",
                    "shapetype"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "layername",
                    "shapetype"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "agentlayers": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\">agentlayers</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns all of the layers that have been loaded for an agent primitive.</p><ul><li><code>string[] agentlayers(int opinput, int prim)</code></li><li><code>string[] agentlayers(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcollisionlayer\">agentcollisionlayer()</a><div class=\"related-summary\">Returns the name of the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcurrentlayer\">agentcurrentlayer()</a><div class=\"related-summary\">Returns the name of the current layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayerbindings\">agentlayerbindings()</a><div class=\"related-summary\">Returns the transform that each shape in an agent\u2019s layer is bound to.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayershapes\">agentlayershapes()</a><div class=\"related-summary\">Returns the names of the shapes referenced by an agent primitive\u2019s layer.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcollisionlayer\">setagentcollisionlayer()</a><div class=\"related-summary\">Sets the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcurrentlayer\">setagentcurrentlayer()</a><div class=\"related-summary\">Sets the current layer of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "agentlayershapes": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlayershapes\">agentlayershapes</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the names of the shapes referenced by an agent primitive\u2019s layer.</p><ul><li><code>string[] agentlayershapes(int opinput, int prim, string layername, int transform)</code></li><li><code>string[] agentlayershapes(int opinput, int prim, string layername, string shapetype)</code></li><li><code>string[] agentlayershapes(string geometry, int prim, string layername, int transform)</code></li><li><code>string[] agentlayershapes(string geometry, int prim, string layername, string shapetype)</code></li></ul>\n\n\n\n<p>Returns the names of all shapes that are referenced by the layer and satisfy the <code>shapetype</code> filter.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">string[] agentlayershapes(int opinput, int prim, string layername, int transform)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">string[] agentlayershapes(string geometry, int prim, string layername, int transform)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the names of all shapes that are referenced by the layer and are bound to the specified transform.</p>\n<p>Returns an empty array if <code>layername</code> is not one of the agent\u2019s <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\" title=\"Returns all of the layers that have been loaded for an agent primitive.\">layers</a>, <code>shapetype</code> is invalid, <code>transform</code> is out of range, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>layername</code>:\nThe name of one of the agent\u2019s layers.</p>\n<p><code>shapetype</code>:\nWhether to inspect <code>\"static\"</code>, <code>\"deforming\"</code>, or <code>\"all\"</code> shapes from the specified layer.</p>\n<p><code>transform</code>:\nIndex of a transform in the agent\u2019s rig.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcollisionlayer\">agentcollisionlayer()</a><div class=\"related-summary\">Returns the name of the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcurrentlayer\">agentcurrentlayer()</a><div class=\"related-summary\">Returns the name of the current layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayerbindings\">agentlayerbindings()</a><div class=\"related-summary\">Returns the transform that each shape in an agent\u2019s layer is bound to.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\">agentlayers()</a><div class=\"related-summary\">Returns all of the layers that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcollisionlayer\">setagentcollisionlayer()</a><div class=\"related-summary\">Sets the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcurrentlayer\">setagentcurrentlayer()</a><div class=\"related-summary\">Sets the current layer of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "layername",
                    "transform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "layername",
                    "shapetype"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "layername",
                    "transform"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "layername",
                    "shapetype"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "agentlocaltransform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransform\">agentlocaltransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the current local space transform of an agent primitive\u2019s bone.</p><ul><li><code>matrix agentlocaltransform(int opinput, int prim, int transform)</code></li><li><code>matrix agentlocaltransform(string geometry, int prim, int transform)</code></li></ul>\n\n\n\n<p>Returns an identity matrix if <code>transform</code> is <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\" title=\"Returns the number of transforms in an agent primitive\u2019s rig.\">out of range</a>, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>transform</code>:\nIndex of a transform in the agent\u2019s rig.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransform\">agentworldtransform()</a><div class=\"related-summary\">Returns the current world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\">setagentlocaltransform()</a><div class=\"related-summary\">Overrides the local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\">setagentworldtransform()</a><div class=\"related-summary\">Overrides the world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "transform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "transform"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "agentlocaltransforms": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the current local space transforms of an agent primitive.</p><ul><li><code>matrix[] agentlocaltransforms(int opinput, int prim)</code></li><li><code>matrix[] agentlocaltransforms(string geometry, int prim)</code></li></ul>\n\n\n\n<p>If only a single transform is needed, using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransform\" title=\"Returns the current local space transform of an agent primitive\u2019s bone.\">agentlocaltransform()</a> instead can be significantly faster.</p>\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransform\">agentlocaltransform()</a><div class=\"related-summary\">Returns the current local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransform\">agentworldtransform()</a><div class=\"related-summary\">Returns the current world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\">setagentlocaltransform()</a><div class=\"related-summary\">Overrides the local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\">setagentworldtransform()</a><div class=\"related-summary\">Overrides the world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            }
        ]
    },
    "agentrigchildren": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentrigchildren\">agentrigchildren</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the child transforms of a transform in an agent primitive\u2019s rig.</p><ul><li><code>int[] agentrigchildren(int opinput, int prim, int transform)</code></li><li><code>int[] agentrigchildren(string geometry, int prim, int transform)</code></li></ul>\n\n\n\n<p>Returns a list of the direct children of the given transform.</p>\n<p>Returns an empty array if <code>transform</code> is <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\" title=\"Returns the number of transforms in an agent primitive\u2019s rig.\">out of range</a>, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>transform</code>:\nIndex of a transform in the agent\u2019s rig.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Visit all of the children of a given transform.</p>\n<div class=\"code-container\">\n<code class=\"line\">int queue[] = { transform };\n</code><code class=\"line\">\n</code><code class=\"line\">while (len(queue) &gt; 0) {\n</code><code class=\"line\">int i = removeindex(queue, 0);\n</code><code class=\"line\">printf(\"%d\\n\", i);\n</code><code class=\"line\">\n</code><code class=\"line\">foreach (int child; agentrigchildren(0, @primnum, i))\n</code><code class=\"line\">push(queue, child);\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigfind\">agentrigfind()</a><div class=\"related-summary\">Finds the index of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigparent\">agentrigparent()</a><div class=\"related-summary\">Returns the parent transform of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\">agenttransformcount()</a><div class=\"related-summary\">Returns the number of transforms in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "transform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "transform"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "agentrigfind": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentrigfind\">agentrigfind</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds the index of a transform in an agent primitive\u2019s rig.</p><ul><li><code>int agentrigfind(int opinput, int prim, string transformname)</code></li><li><code>int agentrigfind(string geometry, int prim, string transformname)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>transformname</code> was not found in the rig, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>transformname</code>:\nThe name of a transform in the agent\u2019s rig.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Find the current local transform of a given bone.</p>\n<div class=\"code-container\">\n<code class=\"line\">int idx = agentrigfind(0, @primnum, \"Hips\");\n</code><code class=\"line\">if (idx &gt;= 0) {\n</code><code class=\"line\">matrix local_xforms[] = agentlocaltransforms(0, @primnum);\n</code><code class=\"line\">matrix xform = local_xforms[idx];\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigchildren\">agentrigchildren()</a><div class=\"related-summary\">Returns the child transforms of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigparent\">agentrigparent()</a><div class=\"related-summary\">Returns the parent transform of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\">agenttransformcount()</a><div class=\"related-summary\">Returns the number of transforms in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformnames\">agenttransformnames()</a><div class=\"related-summary\">Returns the name of each transform in an agent primitive\u2019s rig.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "transformname"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "transformname"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agentrigparent": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentrigparent\">agentrigparent</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the parent transform of a transform in an agent primitive\u2019s rig.</p><ul><li><code>int agentrigparent(int opinput, int prim, int transform)</code></li><li><code>int agentrigparent(string geometry, int prim, int transform)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>transform</code> is a root of the transform hierarchy, <code>transform</code> is <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\" title=\"Returns the number of transforms in an agent primitive\u2019s rig.\">out of range</a>, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>transform</code>:\nIndex of a transform in the agent\u2019s rig.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Find the world transform of the rig\u2019s root, beginning from a given bone.</p>\n<div class=\"code-container\">\n<code class=\"line\">int root;\n</code><code class=\"line\">while (true) {\n</code><code class=\"line\">int parent = agentrigparent(0, @primnum, transform);\n</code><code class=\"line\">\n</code><code class=\"line\">if (parent &lt; 0)\n</code><code class=\"line\">{\n</code><code class=\"line\">root = transform;\n</code><code class=\"line\">break;\n</code><code class=\"line\">}\n</code><code class=\"line\">else\n</code><code class=\"line\">transform = parent;\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">matrix root_xform = agentworldtransform(0, @primnum, root);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransform\">agentlocaltransform()</a><div class=\"related-summary\">Returns the current local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigchildren\">agentrigchildren()</a><div class=\"related-summary\">Returns the child transforms of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigfind\">agentrigfind()</a><div class=\"related-summary\">Finds the index of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\">agenttransformcount()</a><div class=\"related-summary\">Returns the number of transforms in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransform\">agentworldtransform()</a><div class=\"related-summary\">Returns the current world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "transform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "transform"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agenttransformcount": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\">agenttransformcount</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of transforms in an agent primitive\u2019s rig.</p><ul><li><code>int agenttransformcount(int opinput, int prim)</code></li><li><code>int agenttransformcount(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigchildren\">agentrigchildren()</a><div class=\"related-summary\">Returns the child transforms of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigfind\">agentrigfind()</a><div class=\"related-summary\">Finds the index of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigparent\">agentrigparent()</a><div class=\"related-summary\">Returns the parent transform of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agenttransformgroupmember": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformgroupmember\">agenttransformgroupmember</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns whether a transform is a member of the specified transform group.</p><ul><li><code>int agenttransformgroupmember(int opinput, int prim, string transformgroup, int transform)</code></li><li><code>int agenttransformgroupmember(string geometry, int prim, string transformgroup, int transform)</code></li></ul>\n\n\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../crowds/agents#xformgroups\">Transform Groups</a> for more information.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int agenttransformgroupmember(int opinput, int prim, string transformgroup, int transform)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int agenttransformgroupmember(string geometry, int prim, string transformgroup, int transform)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns a non-zero value if the transform is a member of the specified transform group, and zero otherwise.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>The number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>transformgroup</code>\n\n<div class=\"content\">\n<p>Name of a transform group in the agent\u2019s definition.</p>\n</div>\n</p>\n<p>\n<code>transform</code>\n\n<div class=\"content\">\n<p>Index of a transform in the agent\u2019s rig.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptransformgroups\">agentcliptransformgroups()</a><div class=\"related-summary\">Returns the transform groups for an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigfind\">agentrigfind()</a><div class=\"related-summary\">Finds the index of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformgroups\">agenttransformgroups()</a><div class=\"related-summary\">Returns the names of the transform groups in an agent\u2019s definition.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "transformgroup",
                    "transform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "transformgroup",
                    "transform"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agenttransformgroups": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformgroups\">agenttransformgroups</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the names of the transform groups in an agent\u2019s definition.</p><ul><li><code>string[] agenttransformgroups(int opinput, int prim)</code></li><li><code>string[] agenttransformgroups(string geometry, int prim)</code></li></ul>\n\n\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../crowds/agents#xformgroups\">Transform Groups</a> for more information.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">string[] agenttransformgroups(int opinput, int prim)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">string[] agenttransformgroups(string geometry, int prim)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>The number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptransformgroups\">agentcliptransformgroups()</a><div class=\"related-summary\">Returns the transform groups for an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformgroupmember\">agenttransformgroupmember()</a><div class=\"related-summary\">Returns whether a transform is a member of the specified transform group.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "agenttransformnames": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformnames\">agenttransformnames</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the name of each transform in an agent primitive\u2019s rig.</p><ul><li><code>string[] agenttransformnames(int opinput, int prim)</code></li><li><code>string[] agenttransformnames(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentrigfind\">agentrigfind()</a><div class=\"related-summary\">Finds the index of a transform in an agent primitive\u2019s rig.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\">agenttransformcount()</a><div class=\"related-summary\">Returns the number of transforms in an agent primitive\u2019s rig.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "agenttransformtolocal": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Converts transforms from world space to local space for an agent primitive.</p><ul><li><code>int agenttransformtolocal(int opinput, int prim, matrix[] &amp;transforms)</code></li><li><code>int agenttransformtolocal(string geometry, int prim, matrix[] &amp;transforms)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>len(transforms)</code> does not match the number of transforms in the agent\u2019s rig, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>transforms</code>:\nThe transforms to convert from world space to local space.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "transforms"
                ],
                "args": [
                    "const int",
                    "const int",
                    "export matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "transforms"
                ],
                "args": [
                    "const string",
                    "const int",
                    "export matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agenttransformtoworld": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Converts transforms from local space to world space for an agent primitive.</p><ul><li><code>int agenttransformtoworld(int opinput, int prim, matrix[] &amp;transforms)</code></li><li><code>int agenttransformtoworld(string geometry, int prim, matrix[] &amp;transforms)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>len(transforms)</code> does not match the number of transforms in the agent\u2019s rig, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>transforms</code>:\nThe transforms to convert from local space to world space.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "transforms"
                ],
                "args": [
                    "const int",
                    "const int",
                    "export matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "transforms"
                ],
                "args": [
                    "const string",
                    "const int",
                    "export matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "agentworldtransform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransform\">agentworldtransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the current world space transform of an agent primitive\u2019s bone.</p><ul><li><code>matrix agentworldtransform(int opinput, int prim, int transform)</code></li><li><code>matrix agentworldtransform(string geometry, int prim, int transform)</code></li></ul>\n\n\n\n<p>Returns an identity matrix if <code>transform</code> is <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agenttransformcount\" title=\"Returns the number of transforms in an agent primitive\u2019s rig.\">out of range</a>, <code>prim</code> is out of range, or <code>prim</code> is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n<p><code>transform</code>:\nIndex of a transform in the agent\u2019s rig.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransform\">agentlocaltransform()</a><div class=\"related-summary\">Returns the current local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\">setagentlocaltransform()</a><div class=\"related-summary\">Overrides the local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\">setagentworldtransform()</a><div class=\"related-summary\">Overrides the world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim",
                    "transform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "prim",
                    "transform"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "agentworldtransforms": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the current world space transforms of an agent primitive.</p><ul><li><code>matrix[] agentworldtransforms(int opinput, int prim)</code></li><li><code>matrix[] agentworldtransforms(string geometry, int prim)</code></li></ul>\n\n\n\n<p>If only a single transform is needed, using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransform\" title=\"Returns the current world space transform of an agent primitive\u2019s bone.\">agentworldtransform()</a> instead can be significantly faster.</p>\n<p>Returns an empty array if <code>prim</code> is out of range or is not an agent primitive.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransform\">agentlocaltransform()</a><div class=\"related-summary\">Returns the current local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransform\">agentworldtransform()</a><div class=\"related-summary\">Returns the current world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\">setagentlocaltransform()</a><div class=\"related-summary\">Overrides the local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\">setagentworldtransform()</a><div class=\"related-summary\">Overrides the world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            }
        ]
    },
    "albedo": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/albedo\">albedo</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns the albedo (percentage of reflected light) for a bsdf given the outgoing light direction.</p><ul><li><code>vector albedo(bsdf b, ...)</code></li><li><code>vector albedo(bsdf b, int mask, ...)</code></li><li><code>vector albedo(bsdf b, vector viewer, ...)</code></li><li><code>vector albedo(bsdf b, vector viewer, int mask, ...)</code></li></ul>\n\n\n\n<p><code>viewer</code>:\nVector toward viewer.\n<code>mask</code>:\nA bitmask indicating which types of bounces to evaluate.</p>\n<p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/eval_bsdf\">eval_bsdf()</a><div class=\"related-summary\">Evaluates a bsdf given two vectors.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_bsdf\">sample_bsdf()</a><div class=\"related-summary\">Samples a bsdf.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/emission_bsdf\">emission_bsdf()</a><div class=\"related-summary\">Returns the emissive component of a bsdf.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "b",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer"
                ],
                "args": [
                    "const bsdf",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b"
                ],
                "args": [
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "alphaname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/alphaname\">alphaname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the alpha plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string alphaname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the alpha plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"A\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "ambient": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ambient\">ambient</a></h1><span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Returns the color of ambient light in the scene.</p><ul><li><code>vector ambient(...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Returns the color of ambient light in the scene.</p>\n<p>You can optionally specify a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#lightmask\">light mask</a>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "anoise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/anoise\">anoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">These functions are similar to the Worley noise functions listed\nabove.</p><ul><li><code>float anoise(vector pos)</code></li><li><code>float anoise(vector pos, int turbulence, float rough, float atten)</code></li><li><code>vector anoise(vector pos)</code></li><li><code>vector anoise(vector pos, int turbulence, float rough, float atten)</code></li></ul>\n\n\n\n<p>These functions are similar to the Worley noise functions listed above.\nIt is currently not possible to simulate alligator noise using the\nWorley functions, but it\u2019s possible to get a very similar \"look\".</p>\n<p>The bounds on the noise are roughly (0, 1). Only 3D noise is supported.\nHowever, this noise has the ability to compute turbulence with roughness\nand attenuation on the noise.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos",
                    "turbulence",
                    "rough",
                    "atten"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "pos",
                    "turbulence",
                    "rough",
                    "atten"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "append": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/append\">append</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Adds an item to an array or string.</p><ul><li><code>void append(string &amp;array, string value)</code></li><li><code>void append(int[] &amp;array, int value)</code></li><li><code>void append(int[] &amp;array, int[] value)</code></li><li><code>void append(string[] &amp;array, string value)</code></li><li><code>void append(string[] &amp;array, string[] value)</code></li><li><code>void append(float[] &amp;array, float value)</code></li><li><code>void append(float[] &amp;array, float[] value)</code></li><li><code>void append(vector2[] &amp;array, vector2 value)</code></li><li><code>void append(vector2[] &amp;array, vector2[] value)</code></li><li><code>void append(vector[] &amp;array, vector value)</code></li><li><code>void append(vector[] &amp;array, vector[] value)</code></li><li><code>void append(vector4[] &amp;array, vector4 value)</code></li><li><code>void append(vector4[] &amp;array, vector4[] value)</code></li><li><code>void append(matrix2[] &amp;array, matrix2 value)</code></li><li><code>void append(matrix2[] &amp;array, matrix2[] value)</code></li><li><code>void append(matrix3[] &amp;array, matrix3 value)</code></li><li><code>void append(matrix3[] &amp;array, matrix3[] value)</code></li><li><code>void append(matrix[] &amp;array, matrix value)</code></li><li><code>void append(matrix[] &amp;array, matrix[] value)</code></li></ul>\n\n\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/len\">len()</a><div class=\"related-summary\">Returns the length of an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/push\">push()</a><div class=\"related-summary\">Adds an item to an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/append\">append()</a><div class=\"related-summary\">Adds an item to an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize()</a><div class=\"related-summary\">Sets the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix2[]",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix2[]",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix3[]",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix3[]",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix[]",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix[]",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export float[]",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export float[]",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export int[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector4[]",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector4[]",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export string[]",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector2[]",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector2[]",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector[]",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector[]",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            }
        ]
    },
    "area": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/area\">area</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the area of the micropolygon containing a variable such as P.</p><ul><li><code>float area(vector p, ...)</code></li></ul>\n\n\n\n<p>This is a more accurate and convenient method to get the micropolygon area\nthan multiplying the length of <code>Du(P)</code> by the length of <code>Dv(P)</code>.\nThis function is typically used to get the shading area in pixels.</p>\n<p>NOTE:\nThis function works because VEX \"knows\" that the variable <code>P</code>\nhas derivatives (<code>dPdu</code> and <code>dPdv</code>). Passing a literal vector\ninstead of a special variables such as <code>P</code> will return <code>0</code> since\nVEX will not be able to access the derivatives.</p>\n<p>You can <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#derive\">specify optional parameters</a>\nto control the computation. The optional parameter <code>\"extrapolate\"</code>\ncontrols whether to do derivative extrapolation at the edges.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Return the area of the current micro-polygon in camera space:</p>\n<div class=\"code-container\">\n<code class=\"line\">area(P)\n</code>\n</div>\n<p>Return the area of the current micro-polygon in NDC space:</p>\n<div class=\"code-container\">\n<code class=\"line\">area(transform(\"ndc\", P))\n</code>\n</div>\n<p>Returns <code>0</code>, since the argument is not a variable VEX knows the derivatives for:</p>\n<div class=\"code-container\">\n<code class=\"line\">area({0.1, 2.3, 4.5})\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/volume\">volume()</a><div class=\"related-summary\">Returns the volume of the microvoxel containing a variable such as P.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Du\">Du()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to U.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Dv\">Dv()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to V.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "p"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "argsort": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/argsort\">argsort</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns the indices of a sorted version of an array.</p><ul><li><code>int[] argsort(int[] value)</code></li><li><code>int[] argsort(string[] value)</code></li><li><code>int[] argsort(float[] value)</code></li></ul>\n\n\n\n<p>Returns a list of indices that, if applied to the given array, will give a\nsorted sequence in increasing order.  Performs a stable sort.</p>\n<p>This lets sort your keys, but then apply those sorted indices to other arrays\nwithout having to also reorder those arrays.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/reorder\">reorder()</a><div class=\"related-summary\">Reorders items in an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sort\">sort()</a><div class=\"related-summary\">Returns the array sorted in increasing order.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "array": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/array\">array</a></h1><p class=\"summary\">Efficiently creates an array from its arguments.</p><ul><li><code>int[] array(...)</code></li><li><code>string[] array(...)</code></li><li><code>float[] array(...)</code></li><li><code>vector2[] array(...)</code></li><li><code>vector[] array(...)</code></li><li><code>vector4[] array(...)</code></li><li><code>matrix2[] array(...)</code></li><li><code>matrix3[] array(...)</code></li><li><code>matrix[] array(...)</code></li></ul>\n\n\n\n<p>You should use function-style casting to ensure the array members have the\ncorrect type:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector v[] = vector[](array( 1, {1,2,3}, 3, s, t, Cl, P, N));\n</code><code class=\"line\">float  f[] = float[](array(1, 2, s, t, length(P-L), length(N)));\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix2[]",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix3[]",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix[]",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "float[]",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "int[]",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "vector4[]",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "string[]",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "vector2[]",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "vector[]",
                "variadic": true
            }
        ]
    },
    "ashikhmin": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ashikhmin\">ashikhmin</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns a specular BSDF using the Ashikhmin shading model</p><ul><li><code>bsdf ashikhmin(float exponentx, float exponenty, vector framex, vector framey, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf ashikhmin(vector nml, float exponentx, float exponenty, vector framex, vector framey, ...)</code></li></ul>\n\n\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/ashikhmin1.png\">[Image \ud83d\udd17]\n<a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/ashikhmin2.png\">[Image \ud83d\udd17]\n</a></a></p>\n<p>An anisotropic <code>bsdf</code> similar to <code>phong()</code> but with independent controls for the highlight size along 2 tangent vectors.</p>\n\n<p>\n<code>exponentx</code>\n\n<div class=\"content\">\n<p>Phong exponent along the <code>framex</code> vector.</p>\n</div>\n</p>\n<p>\n<code>exponenty</code>\n\n<div class=\"content\">\n<p>Phong exponent along the <code>framey</code> vector.</p>\n</div>\n</p>\n<p>\n<code>framex</code>\n\n<div class=\"content\">\n<p>Highlight X direction.</p>\n</div>\n</p>\n<p>\n<code>framey</code>\n\n<div class=\"content\">\n<p>Highlight Y direction.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phong\">phong()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phonglobe\">phonglobe()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "exponentx",
                    "exponenty",
                    "framex",
                    "framey"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "exponentx",
                    "exponenty",
                    "framex",
                    "framey"
                ],
                "args": [
                    "const vector",
                    "const float",
                    "const float",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "asin": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/asin\">asin</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the inverse sine of the argument.</p><ul><li><code>float asin(float value)</code></li><li><code>vector2 asin(vector2 value)</code></li><li><code>vector asin(vector value)</code></li><li><code>vector4 asin(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the inverse sine of the argument. The return value is in the range\n-\u03c0/2 to \u03c0/2. The vector versions apply the operation in a component-wise fashion.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "assert_enabled": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/assert_enabled\">assert_enabled</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Returns 1 if the VEX assertions are enabled (see HOUDINI_VEX_ASSERT) or 0 if assertions are disabled.</p><ul><li><code>int assert_enabled()</code></li></ul>\n\n\n\n<p>Returns 1 if the environment variable <code>HOUDINI_VEX_ASSERT</code> is set or 0 if the variable isn\u2019t set.</p>\n<p>The normal use for this function is to use the <code>assert()</code> macro defined in the <code>assert.h</code> include file.</p>\n<p>When assertions are disabled, this function will typically be optimized out of code, adding virtually no cost to execution.</p>\n<p>Examples:</p>\n<div class=\"code-container\">\n<code class=\"line\">#include \"assert.h\"\n</code><code class=\"line\">\n</code><code class=\"line\">cvex\n</code><code class=\"line\">test_assert(string texture_map=\"\")\n</code><code class=\"line\">{\n</code><code class=\"line\">assert(1 == 2);\n</code><code class=\"line\">assert(0 == 0);\n</code><code class=\"line\">assert(texture_map != \"\");\n</code><code class=\"line\">}\n</code>\n</div><div class=\"code-container\">\n<code class=\"line\">% export HOUDINI_VEX_ASSERT=1\n</code><code class=\"line\">\n</code><code class=\"line\">% vexexec test_assert.vfl\n</code><code class=\"line\">VEX Assertion Failed ./test_assert.vfl:6 - (1 == 2)\n</code><code class=\"line\">VEX Assertion Failed ./test_assert.vfl:8 - (texture_map != \"\")\n</code><code class=\"line\">\n</code><code class=\"line\">% vexexec test_assert.vfl texture_map Mandril.rat\n</code><code class=\"line\">VEX Assertion Failed ./test_assert.vfl:6 - (1 == 2)\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "assign": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/assign\">assign</a></h1><span><span class=\"padder\"><span class=\"pillow\">data</span></span></span><p class=\"summary\">An efficient way of extracting the components of a vector, vector4,\nmatrix3 or matrix to float variables.</p><ul><li><code>void assign(float &amp;c1, float &amp;c2, float &amp;c3, float &amp;c4, float &amp;c5, float &amp;c6, float &amp;c7, float &amp;c8, float &amp;c9, float &amp;c10, float &amp;c11, float &amp;c12, float &amp;c13, float &amp;c14, float &amp;c15, float &amp;c16, matrix source)</code></li><li><code>void assign(float &amp;c1, float &amp;c2, float &amp;c3, float &amp;c4, float &amp;c5, float &amp;c6, float &amp;c7, float &amp;c8, float &amp;c9, matrix3 source)</code></li><li><code>void assign(float &amp;c1, float &amp;c2, float &amp;c3, float &amp;c4, vector4 source)</code></li><li><code>void assign(float &amp;c1, float &amp;c2, float &amp;c3, float &amp;c4, matrix2 source)</code></li><li><code>void assign(float &amp;c1, float &amp;c2, float &amp;c3, vector source)</code></li><li><code>void assign(float &amp;c1, float &amp;c2, vector2 source)</code></li></ul>\n\n\n\n<p>An efficient way of extracting the components of a vector, vector4,\nmatrix3 or matrix to float variables. Provide references to enough float\nvariables to hold the components. The last argument is the source from\nwhich to extract the components.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "c1",
                    "c2",
                    "c3",
                    "c4",
                    "source"
                ],
                "args": [
                    "float",
                    "float",
                    "float",
                    "float",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "c1",
                    "c2",
                    "c3",
                    "c4",
                    "c5",
                    "c6",
                    "c7",
                    "c8",
                    "c9",
                    "source"
                ],
                "args": [
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "c1",
                    "c2",
                    "c3",
                    "c4",
                    "c5",
                    "c6",
                    "c7",
                    "c8",
                    "c9",
                    "c10",
                    "c11",
                    "c12",
                    "c13",
                    "c14",
                    "c15",
                    "c16",
                    "source"
                ],
                "args": [
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "c1",
                    "c2",
                    "c3",
                    "c4",
                    "source"
                ],
                "args": [
                    "float",
                    "float",
                    "float",
                    "float",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "c1",
                    "c2",
                    "c3",
                    "source"
                ],
                "args": [
                    "float",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "c1",
                    "c2",
                    "source"
                ],
                "args": [
                    "float",
                    "float",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "atan": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/atan\">atan</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the inverse tangent of the argument.</p><ul><li><code>float atan(float v)</code></li><li><code>float atan(float y, float x)</code></li><li><code>vector2 atan(vector2 v)</code></li><li><code>vector atan(vector v)</code></li><li><code>vector4 atan(vector4 v)</code></li></ul>\n\n\n\n<p>Returns the inverse tangent of the argument. The return value is in the\nrange -\u03c0/2 to \u03c0/2. The vector versions apply the operation in a\ncomponent-wise fashion on the input vector.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "y",
                    "x"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "atan2": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/atan2\">atan2</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the inverse tangent of y/x.</p><ul><li><code>float atan2(float y, float x)</code></li></ul>\n\n\n\n<p>Returns the principal value of the inverse tangent of y/x, using the signs\nof the two arguments to determine the quadrant of the result. The return value\nis in the range -\u03c0 to \u03c0.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "y",
                    "x"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "atof": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/atof\">atof</a></h1><span><span class=\"padder\"><span class=\"pillow\">conversion</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Converts a string to a float.</p><ul><li><code>float atof(string str)</code></li></ul>\n\n\n\n<p>Converts a string to a floating point value.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "str"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "atoi": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/atoi\">atoi</a></h1><span><span class=\"padder\"><span class=\"pillow\">conversion</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Converts a string to an integer.</p><ul><li><code>int atoi(string str)</code></li></ul>\n\n\n\n<p>Converts the string argument to an integer value.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "str"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "atten": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/atten\">atten</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Computes attenuated falloff.</p><ul><li><code>float atten(float attenuation, float distance)</code></li></ul>\n\n\n\n<p>Computes attenuated falloff. This is equivalent to <code> <code>attenuation</code> /\n(<code>attenuation</code> + <code>distance</code>)</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "attenuation",
                    "distance"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "attrib": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/attrib\">attrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Reads an attribute value from geometry.</p><ul><li><code>int attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>int attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>string attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>string attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>float attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>float attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>vector2 attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>vector2 attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>vector attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>vector attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>vector4 attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>vector4 attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>matrix2 attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>matrix2 attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>matrix3 attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>matrix3 attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>matrix attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>matrix attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>int[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>int[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>string[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>string[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>float[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>float[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>vector2[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>vector2[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>vector[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>vector[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>vector4[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>vector4[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>matrix2[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>matrix2[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>matrix3[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>matrix3[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li><li><code>matrix[] attrib(int input, string attribclass, string name, int elemnum)</code></li><li><code>matrix[] attrib(string geometry, string attribclass, string name, int elemnum)</code></li></ul>\n\n\n\n<p>Reads an attribute value on the given geometry.  If the attribute or element does not exist, this returns <code>0</code>, <code>\"\"</code>, or <code>[]</code>.  To check for validity, use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/getattrib\" title=\"Reads an attribute value from geometry, with validity check.\">getattrib()</a>.</p>\n<p><code>input</code>:\nThe number of the input whose geometry should be read.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to read.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribclass</code>:\nSpecifies the attribute class, which can be one of:</p>\n<p>\"detail\", \"global\":\nDetail attributes.\n\"point\":\nPoint attributes.\n\"pointgroup\":\nPoint groups.\n\"prim\", \"primitive\":\nPrimitive attributes.\n\"primgroup\":\nPrimitive groups.\n\"vertex\":\nVertex attributes.\n\"vertexgroup\":\nVertex groups.</p>\n<p><code>name</code>:\nThe name of the attribute, group, or intrinsic to read from.</p>\n<p><code>elemnum</code>:\nWhich element number to read from.  It is ignored for detail attributes.  See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexindex\" title=\"Converts a primitive/vertex pair into a linear vertex.\">vertexindex()</a> to convert a primitive/vertex pair into a vertex number.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "attribclass": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/attribclass\">attribclass</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the class of a geometry attribute.</p><ul><li><code>string attribclass(int opinput, string attribute_name)</code></li><li><code>string attribclass(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n<p>Both functions return a string which indicates the class of the attribute,\nwhere the value can be one of</p>\n<p><code>\"vertex\"</code>:\nVertex Attribute\n<code>\"point\"</code>:\nPoint Attribute\n<code>\"prim\"</code>:\nPrimitive Attribute\n<code>\"detail\"</code>:\nDetail, or Global, Attribute\n<code>\"vertexgroup\"</code>:\nVertex Group\n<code>\"pointgroup\"</code>:\nPoint Group\n<code>\"primgroup\"</code>:\nPrimitive Group\n<code>\"\"</code>:\nAttribute was not found in any class.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "attribsize": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/attribsize\">attribsize</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the size of a geometry attribute.</p><ul><li><code>int attribsize(int opinput, string attribute_class, string attribute_name)</code></li><li><code>int attribsize(string geometry, string attribute_class, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Otherwise, it is the tuple size of the attribute.  A vector, for example, has size 3.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n<p><code>attribute_class</code>:\nOne of the following.</p>\n<p><code>detail</code>, <code>global</code>:\nDetail or global attribute\n<code>prim</code>, <code>primitive</code>:\nPrimitive attribute\n<code>point</code>:\nPoint attribute\n<code>vertex</code>:\nVertex attribute</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label section\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">// Get the size of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">int size = attribsize(\"defgeo.bgeo\", \"point\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_class",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_class",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "attribtype": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/attribtype\">attribtype</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type of a geometry attribute.</p><ul><li><code>int attribtype(int opinput, string attribute_class, string attribute_name)</code></li><li><code>int attribtype(string geometry, string attribute_class, string attribute_name)</code></li></ul>\n\n\n\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n<p><code>attribute_class</code>:\nOne of the following.</p>\n<p><code>detail</code>, <code>global</code>:\nDetail or global attribute\n<code>prim</code>, <code>primitive</code>:\nPrimitive attribute\n<code>point</code>:\nPoint attribute\n<code>vertex</code>:\nVertex attribute</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n<p>Returns <code>-1</code> if the attribute can\u2019t be found.</p>\n<p>Otherwise:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>-1</code>: Unknown or not found type.\n</li>\n<li class=\"bullet \">\n<code>0</code>: Integer type\n</li>\n<li class=\"bullet \">\n<code>1</code>: Float type\n</li>\n<li class=\"bullet \">\n<code>2</code>: String type\n</li>\n<li class=\"bullet \">\n<code>3</code>: Integer Array type\n</li>\n<li class=\"bullet \">\n<code>4</code>: Float Array type\n</li>\n<li class=\"bullet \">\n<code>5</code>: String Array type\n</li>\n</ul>\n<p>Note that vectors are considered float type.</p>\n\n<h2 class=\"label section\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">// Get the type of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">int type = attribtype(\"defgeo.bgeo\", \"point\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_class",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_class",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "attribtypeinfo": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/attribtypeinfo\">attribtypeinfo</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type info of a geometry attribute.</p><ul><li><code>string attribtypeinfo(int opinput, string attribute_class, string attribute_name)</code></li><li><code>string attribtypeinfo(string geometry, string attribute_class, string attribute_name)</code></li></ul>\n\n\n\n<h2 class=\"label heading\" id=\"overview\">\n            \n            Overview\n        </h2>\n<div class=\"content\" id=\"overview-body\">\n<ol>\n<li>\n<p><code>string attribtypeinfo(string geometry, string attribute_class, string attribute_name)</code></p>\n</li>\n<li>\n<p><code>string attribtypeinfo(int opinput, string attribute_class, string attribute_name)</code></p>\n</li>\n</ol>\n<p>Geometry attributes have metadata describing the contents of the attribute. This tells Houdini how to treat the attribute in the user interface and when transforming the geometry. So Houdini can, for example, display a different interface for editing a vector if it\u2019s a position or a color, and transform it if it\u2019s a point but not if it\u2019s a color. This metadata is set when you create the attribute.</p>\n<p>This function returns a string indicating the metadata for a given geometry attribute.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"arguments\">\n            \n            Arguments\n        </h2>\n<div class=\"content\" id=\"arguments-body\">\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of a geometry file to reference. Inside Houdini, this may be <code>op:/full/path/to/node</code> to reference geometry from a node.</p>\n</div>\n</p>\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>The number of the input to the current node, starting with <code>0</code> for the first input.</p>\n</div>\n</p>\n<p>\n<code>attribute_class</code>\n\n<div class=\"content\">\n\n<p>\n<code>\"detail\"</code>, <code>\"global\"</code>\n\n<div class=\"content\">\n<p>Detail or global attribute</p>\n</div>\n</p>\n<p>\n<code>\"prim\"</code>, <code>\"primitive\"</code>\n\n<div class=\"content\">\n<p>Primitive attribute</p>\n</div>\n</p>\n<p>\n<code>\"point\"</code>\n\n<div class=\"content\">\n<p>Point attribute</p>\n</div>\n</p>\n<p>\n<code>\"vertex\"</code>\n\n<div class=\"content\">\n<p>Vertex attribute</p>\n</div>\n</p>\n\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>) for which to get the type info.</p>\n</div>\n</p>\n\n</div>\n\n\n<h2 class=\"label heading\" id=\"returns\">\n            \n            Returns\n        </h2>\n<div class=\"content\" id=\"returns-body\">\n<p>This function returns <strong>an empty string</strong> if the attribute can\u2019t be found.</p>\n<p>Otherwise:</p>\n\n<p>\n<code>\"none\"</code>\n\n<div class=\"content\">\n<p>No transformations should be applied.</p>\n</div>\n</p>\n<p>\n<code>\"point\"</code>\n\n<div class=\"content\">\n<p>Scales, rotations, and translations should be applied.</p>\n</div>\n</p>\n<p>\n<code>\"hpoint\"</code>\n\n<div class=\"content\">\n<p>A four-vector with scales, rotations, and translations applied.</p>\n</div>\n</p>\n<p>\n<code>\"vector\"</code>\n\n<div class=\"content\">\n<p>Scales and rotations should be applied.</p>\n</div>\n</p>\n<p>\n<code>\"normal\"</code>\n\n<div class=\"content\">\n<p>Scales and rotations should be applied.  Scales are applied with inverse-transpose.</p>\n</div>\n</p>\n<p>\n<code>\"color\"</code>\n\n<div class=\"content\">\n<p>No transformations.</p>\n</div>\n</p>\n<p>\n<code>\"matrix\"</code>\n\n<div class=\"content\">\n<p>A 4\u00d74 matrix with scale, rotations, and translations applied.</p>\n</div>\n</p>\n<p>\n<code>\"quaternion\"</code>\n\n<div class=\"content\">\n<p>A four-vector with rotations applied.</p>\n</div>\n</p>\n<p>\n<code>\"indexpair\"</code>\n\n<div class=\"content\">\n<p>No transformations.</p>\n</div>\n</p>\n<p>\n<code>\"integer\"</code>\n\n<div class=\"content\">\n<p>Integer values that do not blend when points are averaged.</p>\n</div>\n</p>\n<p>\n<code>\"integer-blend\"</code>\n\n<div class=\"content\">\n<p>Integer values that blend when points are averaged.</p>\n</div>\n</p>\n\n</div>\n\n\n<h2 class=\"label section\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">// Get the type of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">string typeinfo = attribtypeinfo(\"defgeo.bgeo\", \"point\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_class",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_class",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "avg": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/avg\">avg</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the average value of the input(s)</p><ul><li><code>int avg(int values)</code></li><li><code>int avg(int[] values)</code></li><li><code>float avg(float values)</code></li><li><code>float avg(float a, float b, ...)</code></li><li><code>float avg(vector2 values)</code></li><li><code>float avg(vector v)</code></li><li><code>float avg(vector4 values)</code></li><li><code>float avg(float[] values)</code></li><li><code>vector2 avg(vector2 a, vector2 b, ...)</code></li><li><code>vector2 avg(vector2[] values)</code></li><li><code>vector avg(vector a, vector b, ...)</code></li><li><code>vector avg(vector[] values)</code></li><li><code>vector4 avg(vector4 a, vector4 b, ...)</code></li><li><code>vector4 avg(vector4[] values)</code></li></ul>\n\n\n\n<p>v:\nA vector value.\na:\nA float or a vector value.\nb:\nA float or a vector value.\narr:\nAn array of a numerical values.</p>\n<p>The <code>avg(vector v)</code> overload returns the average value of all the components of the vector.\nThe overload that takes two values returns component-wise average of the two input values.\nThe array overload returns the component-wise average of all the input values.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2",
                "variadic": true
            },
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            },
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "binput": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/binput\">binput</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_color</span></span></span><p class=\"summary\">Returns bilinearly sampled input.</p><ul><li><code>float binput(int comp, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float binput(int input, int plane, int comp, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float binput(int input, int plane, int array_index, int comp, int u, int v, int time, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float binput(int input, int plane, int array_index, int comp, float u, float v, int time, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float binput(int input, int plane, int comp, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float binput(int comp, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector binput(int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector binput(int input, int plane, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector binput(int input, int plane, int array_index, int u, int v, int time, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector binput(int input, int plane, int array_index, float u, float v, int time, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector binput(int input, int plane, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector binput(float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 binput(int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 binput(int input, int plane, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 binput(int input, int plane, int array_index, int u, int v, int time, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 binput(int input, int plane, int array_index, float u, float v, int time, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 binput(int input, int plane, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 binput(float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p><code>binput</code> returns bilinear sampled input. It samples a 2\u00d72 pixel block\naround the sampling position, and bilinearly interpolates these pixels.</p>\n<p>Point sampled input functions should be used whenever discrete pixel\nvalues are being modified, since these functions are much faster.\nFiltered functions should be used whenever UV coordinates are being\nmanipulated. If multiple subsamples are being read and combined,\nbilinear lookups can produce a similar result to finput but much\nfaster.</p>\n<p>Each function may take either floating point or integer UV coordinates.\nIf floating point UVs are used, the values are interpreted as 0-1 UV\nvalues; that is, (0.5, 0.5) is the center of the image. If integer UVs\nare used, the values are considered to be in pixel units, ranging from\n(0,0) to (XRES-1, YRES-1).</p>\n<p>Each input function can return a float, vector or vector4 value. If the\nchannel does not exist, the value returned for it will be 0. Whenever\npossible, use the vector versions rather that multiple float versions.</p>\n<p>There are three different complexity levels for each input function.</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nThe first level specifies only UV parameters.\n</li>\n<li class=\"bullet \">\nThe second specifies the input #, plane # and UV parameters.\n</li>\n<li class=\"bullet \">\nThe last level specifies all the parameters: input #, plane #, array\nindex, UV and frame #. It also allows optional filter arguments, like\nthe wrap mode.\n</li>\n</ul>\n<p>If not specified in the function, the input number is always 0, the\nplane index is the current cooked plane, the array index is the\ncurrently cooked array index, and the frame is the current frame. So,\ncinput(u, v) is the same as cinput(0, PL, u,v) is the same as cinput(0,\nPL, AI, u,v, F).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/cinput\">cinput</a><div class=\"related-summary\">Returns point sampled input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/finput\">finput</a><div class=\"related-summary\">Returns fully filtered pixel input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ninput\">ninput</a><div class=\"related-summary\">Reads a pixel and its eight neighbors into a 3\u00d73 matrix.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "comp",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "comp",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "comp",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "array_index",
                    "comp",
                    "u",
                    "v",
                    "time"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "comp",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "array_index",
                    "comp",
                    "u",
                    "v",
                    "time"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "array_index",
                    "u",
                    "v",
                    "time"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "array_index",
                    "u",
                    "v",
                    "time"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "array_index",
                    "u",
                    "v",
                    "time"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input",
                    "plane",
                    "array_index",
                    "u",
                    "v",
                    "time"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "blackbody": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/blackbody\">blackbody</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">color</span></span></span><p class=\"summary\">Compute the color value of an incandescent black body.</p><ul><li><code>vector blackbody(float temperature, float luminance)</code></li></ul>\n\n\n\n<p>Given a temperature, in Kelvin, and a luminance value, computes the\ncolor of an incandescent black body as CIE XYZ tristimulus values.</p>\n<p>The computation uses a fast approximation, which is valid for\ntemperature values between 1666K and 25000K. Values outside of this\nrange are clamped to the nearest valid in-range value.</p>\n<p>The returned value can be converted to linear sRGB values using\nthe <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/xyztorgb\" title=\"Convert CIE XYZ tristimulus values to a linear sRGB triplet.\">xyztorgb()</a> function.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/xyztorgb\">xyztorgb()</a><div class=\"related-summary\">Convert CIE XYZ tristimulus values to a linear sRGB triplet.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/blackbody\">blackbody()</a><div class=\"related-summary\">Compute the color value of an incandescent black body.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "temperature",
                    "luminance"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "blinn": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/blinn\">blinn</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the illumination for specular highlights using the Blinn model.</p><ul><li><code>vector blinn(vector nml, vector V, float roughness, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>bsdf blinn(float exponent, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf blinn(vector nml, float exponent, ...)</code></li></ul>\n\n\n\n\n<p>\n<code>nml</code>\n\n<div class=\"content\">\n<p>The normal of the surface to use for evaluate.</p>\n</div>\n</p>\n<p>\n<code>V</code>\n\n<div class=\"content\">\n<p>The incidence vector.</p>\n</div>\n</p>\n<p>\n<code>exponent</code>\n\n<div class=\"content\">\n<p>The exponent value. The higher the value, the tighter the specular lobe.</p>\n</div>\n</p>\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/blinn.png\">[Image \ud83d\udd17]\n</a></p>\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/phong\" title=\"Returns the illumination for specular highlights using different lighting models.\">phong()</a> for information on the basic lighting models.\nSee <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../pbr\">writing a PBR shader</a> for information on BSDFs.\nEach of the functions can also take an optional light mask.</p>\n\n<h2 class=\"label heading\" id=\"lightmask\">\n            \n            Optional light mask parameter\n        </h2>\n<div class=\"content\" id=\"lightmask-body\">\n<p>When evaluating light and shadow shaders, objects have pre-defined light\nmasks. This mask is usually specified in the geometry object and\nspecifies a list of lights which are used to illuminate a surface or fog\nshader. It is possible to override the default light mask by specifying\na \"lightmask\" argument.</p>\n<p>For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">diff = diffuse(nml, \"lightmask\", \"light*,^light2\");\n</code>\n</div>\n<p>\u2026will cause all lights whose names begin with \"light\" except for a\nlight named \"light2\" to be considered for diffuse illumination.</p>\n<p>All Houdini scoping patterns, excepting group expansion, are supported:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>*</code> - wild-card match\n</li>\n<li class=\"bullet \">\n<code>?</code> - single character match\n</li>\n<li class=\"bullet \">\n<code>^</code> - exclusion operator\n</li>\n<li class=\"bullet \">\n<code>\\[list]</code> - character list match\n</li>\n</ul>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phong\">phong()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/wireblinn\">wireblinn()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/matchvex_blinn\">matchvex_blinn()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "exponent"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "exponent"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "V",
                    "roughness"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "blinnBRDF": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/blinnBRDF\">blinnBRDF</a></h1><p class=\"summary\"></p><ul><li><code>float blinnBRDF(vector L, vector N, vector V, float rough)</code></li></ul>\n\n\n\n<p><a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\" title=\"Returns the computed BRDFs for the different lighting models used in VEX shading.\">specularBRDF()</a>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/phongBRDF\">phongBRDF()</a>, <code>blinnBRDF</code>,\nand <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/diffuseBRDF\">diffuseBRDF()</a> return the computed BRDF for the\ndifferent lighting models used in VEX shading. You can use them in\ncustom <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> loops to replicate the lighting models of the\ncorresponding VEX lighting functions.</p>\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\" title=\"Returns the computed BRDFs for the different lighting models used in VEX shading.\">specularBRDF()</a> for some example code.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\">specularBRDF()</a><div class=\"related-summary\">Returns the computed BRDFs for the different lighting models used in VEX shading.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phongBRDF\">phongBRDF()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/diffuseBRDF\">diffuseBRDF()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/illuminance\">illuminance()</a><div class=\"related-summary\">Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "L",
                    "N",
                    "V",
                    "rough"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "bouncelabel": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/bouncelabel\">bouncelabel</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\"></p><ul><li><code>string bouncelabel(int mask)</code></li></ul>\n\n\n\n<p>Returns the label associated with the given bounce mask.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/bouncemask\">bouncemask()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "mask"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "bouncemask": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/bouncemask\">bouncemask</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\"></p><ul><li><code>int bouncemask(string labels)</code></li></ul>\n\n\n\n<p>Returns the bounce mask associated with the given labels.  Pre-defined labels\ninclude \"diffuse\", \"reflect\", \"refract\", \"volume\", \"direct\", \"indirect\",\n\"all\", \"alldiffuse\", \"allrefract\", and \"allvolume\". Multiple\nwhitespace-separated labels may be used (eg. \"reflect refract\").</p>\n<p>Additional bounce labels can be created with custom BSDF types.</p>\n<p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbounces\">getbounces()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nbouncetypes\">nbouncetypes()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "labels"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "bumpmap": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "bumpmapA": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "bumpmapB": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "bumpmapG": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "bumpmapL": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "bumpmapR": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "bumpname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/bumpname\">bumpname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the bump plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string bumpname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the bump plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"B\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "cbrt": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cbrt\">cbrt</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the cube root of the argument.</p><ul><li><code>float cbrt(float value)</code></li><li><code>vector2 cbrt(vector2 value)</code></li><li><code>vector cbrt(vector value)</code></li><li><code>vector4 cbrt(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the cube root of the argument</p>\n<p>For vectors, this is done component-wise.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "ceil": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ceil\">ceil</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the smallest integer greater than or equal to the argument.</p><ul><li><code>float ceil(float value)</code></li><li><code>vector2 ceil(vector2 value)</code></li><li><code>vector ceil(vector value)</code></li><li><code>vector4 ceil(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the smallest integer greater than or equal to the argument</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "ch": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ch\">ch</a></h1><span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a channel (or parameter) and return its value.</p><ul><li><code>string ch(string channel)</code></li><li><code>string ch(string channel, float time)</code></li><li><code>float ch(string channel)</code></li><li><code>float ch(string channel, float time)</code></li></ul>\n\n\n\n<p>Evaluates a channel (or parameter) and return its value.</p>\n<p>The time is specified in seconds, not in frames.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "ch3": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ch3\">ch3</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a channel (or parameter) and return its value.</p><ul><li><code>matrix3 ch3(string channel)</code></li><li><code>matrix3 ch3(string channel, float time)</code></li></ul>\n\n\n\n<p>Evaluates a channel (or parameter) and return its value.</p>\n<p>If the parameter is a matrix parameter, the base parameter name\ncan be used to return the all components as a matrix.</p>\n<p>The time is specified in seconds, not in frames.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            }
        ]
    },
    "ch4": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ch4\">ch4</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a channel (or parameter) and return its value.</p><ul><li><code>matrix ch4(string channel)</code></li><li><code>matrix ch4(string channel, float time)</code></li></ul>\n\n\n\n<p>Evaluates a channel (or parameter) and return its value.</p>\n<p>If the parameter is a matrix parameter, the base parameter name\ncan be used to return the all components as a matrix.</p>\n<p>The time is specified in seconds, not in frames.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "chadd": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chadd\">chadd</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Adds new channels to a CHOP node.</p><ul><li><code>int chadd(string channel_names)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chadd(string[] channel_names)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>This function adds new channels to a CHOP node. It works only when iterating over Clip, Channel or Samples, not when iterating over ChannelSample. You can\u2019t control the default channel values when adding channels using this function. You need to add another <code>Channel Wrangle</code> and compute the channel data inside it.</p>\n<p>Returns 1 on success, 0 otherwise.</p>\n<div class=\"arg_group item_group\">\n<li class=\"item arg \" data-title=\"channel_names\" id=\"channel_names_arg\">\n<div class=\"label\">\n<code>channel_names</code>\n</div>\n<div class=\"content\">\n<p>The names of the attributes to add. Can be an array or a space separated list of channel names.</p>\n</div>\n</li>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel_names"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel_names"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chattr": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chattr\">chattr</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Reads a CHOP attribute value on Channels, Clips, Sample or Channel/Sample from a connected CHOP input, with validity check.</p><ul><li><code>int chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chattr(int opinput, string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chattr(int opinput, string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chattr(int opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chattr(int opinput, string attrclass, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chattr(string attrname, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chattr(string attrname, int channel, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chattr(string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chattr(string opinput, string attrname, int channel, int sample, int &amp;success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns a CHOP attribute value from connected CHOP input node.</p>\n\n<p>\n<code>input</code>\n\n<div class=\"content\">\n<p>The index (starting from 0) of the node input to read from.</p>\n</div>\n</p>\n<p>\n<code>attrclass</code>\n\n<div class=\"content\">\n<p>Which type of channel attribute to read from, one of <code>\"\"</code>, <code>\"clip\"</code>, <code>\"channel\"</code>, <code>\"sample\"</code>, or <code>\"channelsample\"</code>.</p>\n<p>You can use an empty string to avoid the filtering based on attribute class.</p>\n</div>\n</p>\n<p>\n<code>attrname</code>\n\n<div class=\"content\">\n<p>The name of the attribute to read.</p>\n</div>\n</p>\n<p>\n<code>channel</code>\n\n<div class=\"content\">\n<p>The channel index to read the channel or channelsample attribute value from. For clip or sample attributes, use <code>-1</code> here.</p>\n</div>\n</p>\n<p>\n<code>sample</code>\n\n<div class=\"content\">\n<p>The sample index to read the sample or channelsample attribute value from. For clip or channel attributes, use <code>-1</code> here.</p>\n</div>\n</p>\n<p>\n<code>success</code>\n\n<div class=\"content\">\n<p>If the given attribute exists and can be read, the function sets this variable to <code>1</code>. Otherwise, it sets this variable to <code>0</code>.</p>\n</div>\n</p>\n\n\n<h2 class=\"label section\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int success = 0\n</code><code class=\"line\">\n</code><code class=\"line\">int input = 0;\n</code><code class=\"line\">string attrname = \"export\";\n</code><code class=\"line\">string attrclass = \"channel\";\n</code><code class=\"line\">int channel = 0; // Or use C global variable for channel index.\n</code><code class=\"line\">int sample = -1; // Or use I global variable for sample index.\n</code><code class=\"line\">string s = chattr(input, attrname, attrclass, channel, sample, success )\n</code><code class=\"line\">if (success) {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Do something with s\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0printf(\"s=%s\\n\", s);\n</code><code class=\"line\">} else {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Couldn't read attribute, usually because an attribute with that\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// name doesn't exist\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chsetattr\">chsetattr()</a><div class=\"related-summary\">Writes a CHOP attribute value on Channels, Clips, Sample or Channel/Sample.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chattrnames\">chattrnames()</a><div class=\"related-summary\">Reads CHOP attribute names of a given attribute class from a CHOP input.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "float"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "float"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "attrname",
                    "success"
                ],
                "args": [
                    "const string",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "chattrnames": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chattrnames\">chattrnames</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Reads CHOP attribute names of a given attribute class from a CHOP input.</p><ul><li><code>string[] chattrnames(int opinput, string attribclass)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string[] chattrnames(string attrclass)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns all the CHOP attribute names of a given attribute class from a CHOP input.</p>\n<div class=\"box \">\n<div class=\"content\">\n<p>CHOP attributes store metadata on clips, channels, samples, or channel/sample pairs.</p>\n</div>\n</div>\n<div class=\"arg_group item_group\">\n<li class=\"item arg \" data-title=\"attribclass\" id=\"attribclass_arg\">\n<div class=\"label\">\n            \n            attribclass\n        </div>\n<div class=\"content\">\n<p>The \"level\" of the attribute:</p>\n\n<p>\n<code>\"clip\"</code>\n\n<div class=\"content\">\n<p>An attribute on a whole clip.</p>\n</div>\n</p>\n<p>\n<code>\"channel\"</code>\n\n<div class=\"content\">\n<p>An attribute on a whole channel.</p>\n</div>\n</p>\n<p>\n<code>\"sample\"</code>\n\n<div class=\"content\">\n<p>An attribute on a sample (across all channels).</p>\n</div>\n</p>\n<p>\n<code>\"channelsample\"</code>\n\n<div class=\"content\">\n<p>An attribute on a specific channel/sample pair.</p>\n</div>\n</p>\n<p>\n<code>\"\"</code>\n\n<div class=\"content\">\n<p>Pass an empty string to have the function figure out the class based on the other arguments.</p>\n</div>\n</p>\n\n</div>\n</li>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chattr\">chattr()</a><div class=\"related-summary\">Reads a CHOP attribute value on Channels, Clips, Sample or Channel/Sample from a connected CHOP input, with validity check.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chsetattr\">chsetattr()</a><div class=\"related-summary\">Writes a CHOP attribute value on Channels, Clips, Sample or Channel/Sample.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribclass"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "attrclass"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "chend": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chend\">chend</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the end sample of the input specified.</p><ul><li><code>int chend()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chend(int input)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the end sample of the input specified.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "int"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chendf": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chendf\">chendf</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the frame corresponding to the last sample of the input specified.</p><ul><li><code>float chendf()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chendf(int input)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the frame corresponding to the last sample of the input specified.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "float"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "chendt": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chendt\">chendt</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the time corresponding to the last sample of the input\nspecified.</p><ul><li><code>float chendt()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chendt(int input)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the time corresponding to the last sample of the input\nspecified.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "float"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "chf": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chf\">chf</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a channel (or parameter) and return its value.</p><ul><li><code>float chf(string channel)</code></li><li><code>float chf(string channel, float time)</code></li></ul>\n\n\n\n<p>Evaluates a channel (or parameter) and return its value.</p>\n<p>The time is specified in seconds, not in frames.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "chi": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chi\">chi</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a channel (or parameter) and return its value.</p><ul><li><code>int chi(string channel)</code></li><li><code>int chi(string channel, float time)</code></li></ul>\n\n\n\n<p>Evaluates a channel (or parameter) and return its value.</p>\n<p>Returns an integer type.  This allows values greater than 24 million\nto be read accurately from integer parameters.  It also suppresses\nconversion warnings when used in if statements.</p>\n<p>The time is specified in seconds, not in frames.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chindex": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chindex\">chindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the channel index from a input given a channel name.</p><ul><li><code>int chindex(int input, string name)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chindex(string name)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int[] chindex(string[] names)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the channel index from a input given a channel name or -1 on failure.</p>\n\n<p>\n<code>input</code>\n\n<div class=\"content\">\n<p>CHOP Input index or -1 if ommitted.</p>\n</div>\n</p>\n<p>\n<code>name</code>\n\n<div class=\"content\">\n<p>Channel name to lookup.</p>\n</div>\n</p>\n<p>\n<code>names</code>\n\n<div class=\"content\">\n<p>Array of Channel names to lookup.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "names"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "chinput": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chinput\">chinput</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the value of a channel at the specified sample in an\ninput.</p><ul><li><code>float chinput(int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chinput(int input, int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chinput(int input, int channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chinput(int input, string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chinput(int input, string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chinput(int input, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chinput(string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chinput(string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chinput(int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chinput(int input, int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chinput(int input, int channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chinput(int input, string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chinput(int input, string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chinput(int input, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chinput(string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector2 chinput(string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chinput(int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chinput(int input, int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chinput(int input, int channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chinput(int input, string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chinput(int input, string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chinput(int input, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chinput(string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector chinput(string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chinput(int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chinput(int input, int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chinput(int input, int channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chinput(int input, string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chinput(int input, string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chinput(int input, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chinput(string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>vector4 chinput(string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chinput(int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chinput(int input, int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chinput(int input, int channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chinput(int input, string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chinput(int input, string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chinput(int input, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chinput(string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix2 chinput(string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chinput(int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chinput(int input, int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chinput(int input, int channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chinput(int input, string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chinput(int input, string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chinput(int input, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chinput(string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix3 chinput(string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chinput(int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chinput(int input, int channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chinput(int input, int channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chinput(int input, string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chinput(int input, string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chinput(int input, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chinput(string channel, int sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>matrix chinput(string channel, float sample)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the value of a channel at the specified sample in an input. If\nthe sample is fractional, the value is linearly interpolated from the\ntwo nearest points. The channel can be given as an index or as a name.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "channel",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "REARG",
                "return": "vector"
            },
            {
                "argnames": [
                    "channel",
                    "sample"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            }
        ]
    },
    "chinputlimits": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chinputlimits\">chinputlimits</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Computes the minimum and maximum value of samples in an input channel.</p><ul><li><code>int chinputlimits(int opinput, int channel, float &amp;channel_min, float &amp;channel_max)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns 1 on success or 0 on failure.</p>\n<div class=\"arg_group item_group\">\n<li class=\"item arg \" data-title=\"opinput\" id=\"opinput\">\n<div class=\"label\">\n<code>opinput</code>\n</div>\n<div class=\"content\">\n<p>CHOP Input index or -1 if ommitted.</p>\n</div>\n</li>\n<li class=\"item arg \" data-title=\"channel_min\" id=\"channel_min\">\n<div class=\"label\">\n<code>channel_min</code>\n</div>\n<div class=\"content\">\n<p>Computed minimum channel value;</p>\n</div>\n</li>\n<li class=\"item arg \" data-title=\"channel_max\" id=\"channel_max\">\n<div class=\"label\">\n<code>channel_max</code>\n</div>\n<div class=\"content\">\n<p>Computed maximum channel value;</p>\n</div>\n</li>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "channel",
                    "channel_min",
                    "channel_max"
                ],
                "args": [
                    "const int",
                    "const int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chname\">chname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the channel name of the indexed plane.</p><ul><li><code>string chname(int planeindex)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string chname(int planeindex, int chindex)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the channel name of the indexed plane. (e.g. \"r\", \"x\").</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "planeindex"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "planeindex",
                    "chindex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop",
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "chnames": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chnames\">chnames</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns all the CHOP channel names of a given CHOP input.</p><ul><li><code>string[] chnames()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>string[] chnames(int opinput)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns all the CHOP channel names of a given CHOP input.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chname\">chname()</a><div class=\"related-summary\">Returns the channel name of the indexed plane.</div></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "chnumchan": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chnumchan\">chnumchan</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the number of channels in the input specified.</p><ul><li><code>int chnumchan()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chnumchan(int input)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the number of channels in the input specified.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "int"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chp": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chp\">chp</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a channel (or parameter) and return its value.</p><ul><li><code>vector4 chp(string channel)</code></li><li><code>vector4 chp(string channel, float time)</code></li></ul>\n\n\n\n<p>Evaluates a channel (or parameter) and return its value.</p>\n<p>If the parameter is a vector parameter, the base parameter name\ncan be used to return the all components as a vector.</p>\n<p>The time is specified in seconds, not in frames.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "chr": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chr\">chr</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Converts an unicode codepoint to a UTF8 string.</p><ul><li><code>string chr(int value)</code></li></ul>\n\n\n\n<p>Returns a string encoding the giving unicode codepoint as a UTF8 value.  For\nvalues less than 128, this is a one-byte string of that value.  Higher values\nwill produce multiple byte strings.</p>\n<p>If the given code point isn\u2019t a valid codepoint, an empty string is returned.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ord\">ord()</a><div class=\"related-summary\">Converts an UTF8 string into a codepoint.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "chramp": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chramp\">chramp</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a ramp parameter and return its value.</p><ul><li><code>float chramp(string channel, float ramppos)</code></li><li><code>float chramp(string channel, float ramppos, float time)</code></li><li><code>vector chramp(string channel, float ramppos)</code></li><li><code>vector chramp(string channel, float ramppos, float time)</code></li></ul>\n\n\n\n<p>Evaluates a ramp parameter and return its value.</p>\n<p>The ramppos is where on the ramp to evaluate.</p>\n<p>The time parameter can be used if the ramp is animated to evaluate\nat other than the current time.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel",
                    "ramppos"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "channel",
                    "ramppos",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "channel",
                    "ramppos"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "channel",
                    "ramppos",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "chrate": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chrate\">chrate</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the sample rate of the input specified.</p><ul><li><code>float chrate()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chrate(int input)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the sample rate of the input specified.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "float"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "chreadbuf": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chreadbuf\">chreadbuf</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the value of CHOP context temporary buffer at the specified index.</p><ul><li><code>float chreadbuf(int index)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the value of a CHOP context temporary buffer at the specified index.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "index"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "chremove": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chremove\">chremove</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Removes channels from a CHOP node.</p><ul><li><code>int chremove(int channel_index)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chremove(string channel_name)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chremove(int[] channel_indices)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chremove(string[] channel_names)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>This function removes  channels from a CHOP node. It works only when iterating over Clip, Channel or Samples, not when iterating over ChannelSample.</p>\n<p>Returns 1 if all channels were removed or 0 otherwise. </p>\n<div class=\"arg_group item_group\">\n<li class=\"item arg \" data-title=\"channel_index\" id=\"channel_index_arg\">\n<div class=\"label\">\n<code>channel_index</code>\n</div>\n<div class=\"content\">\n<p>The channel index to remove.</p>\n</div>\n</li>\n<li class=\"item arg \" data-title=\"channel_indices\" id=\"channel_indices_arg\">\n<div class=\"label\">\n<code>channel_indices</code>\n</div>\n<div class=\"content\">\n<p>The array of channel indices to remove.</p>\n</div>\n</li>\n<li class=\"item arg \" data-title=\"channel_name\" id=\"channel_name_arg\">\n<div class=\"label\">\n<code>channel_name</code>\n</div>\n<div class=\"content\">\n<p>The channel name to remove.</p>\n</div>\n</li>\n<li class=\"item arg \" data-title=\"channel_names\" id=\"channel_names_arg\">\n<div class=\"label\">\n<code>channel_names</code>\n</div>\n<div class=\"content\">\n<p>The array of channel names to remove.</p>\n</div>\n</li>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel_index"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel_name"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel_indices"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel_names"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chremoveattr": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chremoveattr\">chremoveattr</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Removes a CHOP attribute.</p><ul><li><code>int chremoveattr(string attrname)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chremoveattr(string attrclass, string attrname)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chremoveattr(string attrclass, string[] attrnames)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chremoveattr(string[] attrnames)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>This function removes CHOP attribute.</p>\n<p>Returns <code>1</code> if the operation succeeded, or <code>0</code> otherwise.</p>\n<div class=\"arg_group item_group\">\n<li class=\"item arg \" data-title=\"attrname\" id=\"attrname\">\n<div class=\"label\">\n<code>attrname</code>\n</div>\n<div class=\"content\">\n<p>The name of the attribute to remove.</p>\n</div>\n</li>\n<li class=\"item arg \" data-title=\"attrnames\" id=\"attrnames\">\n<div class=\"label\">\n<code>attrnames</code>\n</div>\n<div class=\"content\">\n<p>The names of the attributes to remove.</p>\n</div>\n</li>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chattr\">chattr()</a><div class=\"related-summary\">Reads a CHOP attribute value on Channels, Clips, Sample or Channel/Sample from a connected CHOP input, with validity check.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "attrname"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrnames"
                ],
                "args": [
                    "const string",
                    "const string[]"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrnames"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chrename": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chrename\">chrename</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Renames a CHOP channel.</p><ul><li><code>int chrename(int channel_name, string new_name)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chrename(string channel_name, string new_name)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>This function renames a CHOP channel . It works only when iterating over Clip, Channel or Samples, not when iterating over ChannelSample.</p>\n<p>Returns 1 if channel was renamed or 0 otherwise.</p>\n<div class=\"arg_group item_group\">\n<li class=\"item arg \" data-title=\"channel_index\" id=\"channel_index_arg\">\n<div class=\"label\">\n<code>channel_index</code>\n</div>\n<div class=\"content\">\n<p>The channel index to rename.</p>\n</div>\n</li>\n<li class=\"item arg \" data-title=\"channel_name\" id=\"channel_name_arg\">\n<div class=\"label\">\n<code>channel_name</code>\n</div>\n<div class=\"content\">\n<p>The channel to rename.</p>\n</div>\n</li>\n<li class=\"item arg \" data-title=\"new_name\" id=\"new_name_arg\">\n<div class=\"label\">\n<code>new_name</code>\n</div>\n<div class=\"content\">\n<p>The new name.</p>\n</div>\n</li>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel_name",
                    "new_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel_name",
                    "new_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "chresizebuf": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chresizebuf\">chresizebuf</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Resize the CHOP context temporary buffer</p><ul><li><code>int chresizebuf(int size)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Resizes the CHOP context temporary buffer.\nReturn 1 if the resize succeeded, 0 otherwise.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "size"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chs": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chs\">chs</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a channel (or parameter) and return its value.</p><ul><li><code>string chs(string channel)</code></li><li><code>string chs(string channel, float time)</code></li></ul>\n\n\n\n<p>Evaluates a channel (or parameter) and return its value.</p>\n<p>The time is specified in seconds, not in frames.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "chsetattr": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chsetattr\">chsetattr</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Writes a CHOP attribute value on Channels, Clips, Sample or Channel/Sample.</p><ul><li><code>int chsetattr(string attrname, int channel, int sample, int success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrname, int channel, int sample, string success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrname, int channel, int sample, float success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrname, int channel, int sample, vector2 success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrname, int channel, int sample, vector success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrname, int channel, int sample, vector4 success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrname, int channel, int sample, matrix2 success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrname, int channel, int sample, matrix3 success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrname, int channel, int sample, matrix success)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, int value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, string value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, float value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, vector2 value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, vector value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, vector4 value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, matrix2 value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, matrix3 value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetattr(string attrclass, string attrname, int channel, int sample, matrix value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Writes a CHOP attribute value on Channels, Clips, Sample or Channel/Sample. Returns 1 if the write succeeded, 0 otherwise.</p>\n\n<p>\n<code>attrclass</code>\n\n<div class=\"content\">\n<p>Which type of channel attribute to read from, one of <code>\"\"</code>, <code>\"clip\"</code>, <code>\"channel\"</code>, <code>\"sample\"</code>, or <code>\"channelsample\"</code>.</p>\n<p>You can use an empty string to avoid the filtering based on attribute class and detect the type based on <code>channel</code> and <code>sample</code> argument values.</p>\n</div>\n</p>\n<p>\n<code>attrname</code>\n\n<div class=\"content\">\n<p>The name of the attribute to write.</p>\n</div>\n</p>\n<p>\n<code>channel</code>\n\n<div class=\"content\">\n<p>The channel index to write the channel or channelsample attribute value to. For clip or sample attributes, use <code>-1</code> here.</p>\n</div>\n</p>\n<p>\n<code>sample</code>\n\n<div class=\"content\">\n<p>The sample index to write the sample or channelsample attribute value to. For clip or channel attributes, use <code>-1</code> here.</p>\n</div>\n</p>\n<p>\n<code>value</code>\n\n<div class=\"content\">\n<p>The new attribute value. The type of the argment determines the type of the attribute.</p>\n</div>\n</p>\n\n<div class=\"returns_group item_group\">\n<li class=\"item returns \" data-title=\"\" id=\"id143717a858L\">\n<div class=\"label\">\n</div>\n<div class=\"content\">\n<p>Returns <code>1</code> if the write succeeded, or <code>0</code> otherwise.</p>\n</div>\n</li>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chattr\">chattr()</a><div class=\"related-summary\">Reads a CHOP attribute value on Channels, Clips, Sample or Channel/Sample from a connected CHOP input, with validity check.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chattrnames\">chattrnames()</a><div class=\"related-summary\">Reads CHOP attribute names of a given attribute class from a CHOP input.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const matrix"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const vector4"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const vector2"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrname",
                    "channel",
                    "sample",
                    "success"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrclass",
                    "attrname",
                    "channel",
                    "sample",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chsetlength": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chsetlength\">chsetlength</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Sets the length of the CHOP channel data.</p><ul><li><code>int chsetlength(int clip_length)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "clip_length"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chsetrate": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chsetrate\">chsetrate</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Sets the sampling rate of the CHOP channel data.</p><ul><li><code>int chsetrate(int clip_rate)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetrate(float clip_rate)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "clip_rate"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "clip_rate"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chsetstart": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chsetstart\">chsetstart</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Sets the CHOP start sample in the channel data.</p><ul><li><code>int chsetstart(int start)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chsetstart(float start)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "start"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "start"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chsraw": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chsraw\">chsraw</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Returns the raw string channel (or parameter).</p><ul><li><code>string chsraw(string channel)</code></li></ul>\n\n\n\n<p>Returns the raw expression value of the channel without actually evaluating the contents of the channel.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "chstart": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chstart\">chstart</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the start sample of the input specified.</p><ul><li><code>int chstart()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>int chstart(int input)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the start sample of the input specified.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "int"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "chstartf": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chstartf\">chstartf</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the frame corresponding to the first sample of the input\nspecified.</p><ul><li><code>float chstartf()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chstartf(int input)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the frame corresponding to the first sample of the input\nspecified.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "float"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "chstartt": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chstartt\">chstartt</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns the time corresponding to the first sample of the input\nspecified.</p><ul><li><code>float chstartt()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li><li><code>float chstartt(int input)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the time corresponding to the first sample of the input\nspecified.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "float"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "chv": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chv\">chv</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Evaluates a channel or parameter, and return its value.</p><ul><li><code>vector chv(string channel)</code></li><li><code>vector chv(string channel, float time)</code></li></ul>\n\n\n\n<p>Evaluates a channel or parameter, and return its value.</p>\n<p>If the parameter is a vector parameter, the base parameter name\ncan be used to return the all components as a vector.</p>\n<p>The time is specified in seconds, not in frames.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "channel",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "chwritebuf": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/chwritebuf\">chwritebuf</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Writes a value of CHOP context temporary buffer at the specified index.</p><ul><li><code>int chwritebuf(int index, float value)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Writes a value of a CHOP context temporary buffer at the specified index.</p>\n<p>Return 1 if the write succeeded, 0 otherwise.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "index",
                    "value"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "chop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "cinput": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cinput\">cinput</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_color</span></span></span><p class=\"summary\">Returns point sampled input.</p><ul><li><code>float cinput(int component, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float cinput(int input_number, int planeindex, int component, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float cinput(int input_number, int planeindex, int arrayindex, int component, int u, int v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float cinput(int input_number, int planeindex, int arrayindex, int component, float u, float v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float cinput(int input_number, int planeindex, int component, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float cinput(int component, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector cinput(int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector cinput(int input_number, int planeindex, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector cinput(int input_number, int planeindex, int arrayindex, int u, int v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector cinput(int input_number, int planeindex, int arrayindex, float u, float v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector cinput(int input_number, int planeindex, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector cinput(float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 cinput(int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 cinput(int input_number, int planeindex, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 cinput(int input_number, int planeindex, int arrayindex, int u, int v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 cinput(int input_number, int planeindex, int arrayindex, float u, float v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 cinput(int input_number, int planeindex, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 cinput(float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p><code>cinput</code> returns point sampled input.</p>\n<p>Point sampled input functions should be used whenever discrete pixel\nvalues are being modified, since these functions are much faster.\nFiltered functions should be used whenever UV coordinates are being\nmanipulated. If multiple subsamples are being read and combined,\nbilinear lookups can produce a similar result to finput but much\nfaster.</p>\n<p>Each function may take either floating point or integer UV coordinates.\nIf floating point UVs are used, the values are interpreted as 0-1 UV\nvalues; that is, (0.5, 0.5) is the center of the image. If integer UVs\nare used, the values are considered to be in pixel units, ranging from\n(0,0) to (XRES-1, YRES-1).</p>\n<p>Each input function can return a float, vector or vector4 value. If the\nchannel does not exist, the value returned for it will be 0. Whenever\npossible, use the vector versions rather that multiple float versions.</p>\n<p>There are three different complexity levels for each input function.</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nThe first level specifies only UV parameters.\n</li>\n<li class=\"bullet \">\nThe second specifies the input #, plane # and UV parameters.\n</li>\n<li class=\"bullet \">\nThe last level specifies all the parameters: input #, plane #, array\nindex, UV and frame #.\n</li>\n</ul>\n<p>If not specified in the function, the input number is always 0, the\nplane index is the current cooked plane, the array index is the\ncurrently cooked array index, and the frame is the current frame. So,\ncinput(u, v) is the same as cinput(0, PL, u,v) is the same as cinput(0,\nPL, AI, u,v, F).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/binput\">binput</a><div class=\"related-summary\">Returns bilinearly sampled input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/finput\">finput</a><div class=\"related-summary\">Returns fully filtered pixel input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ninput\">ninput</a><div class=\"related-summary\">Reads a pixel and its eight neighbors into a 3\u00d73 matrix.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "component",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "component",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "component",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "component",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "component",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "component",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "ckspline": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ckspline\">ckspline</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Computes a Catmull-Rom (Cardinal) spline between the key points\nspecified.</p><ul><li><code>float ckspline(float t, float v0, float k0, ...)</code></li><li><code>vector ckspline(float t, vector v0, float k0, ...)</code></li><li><code>vector4 ckspline(float t, vector4 v0, float k0, ...)</code></li></ul>\n\n\n\n<p>Computes a Catmull-Rom (Cardinal) spline between the key points\nspecified. The values are spaced according to the keys given. The domain\nof the interpolant (t) should be between the second and second last key\nvalue specified. The keys should be specified in ascending order or\nresults will be unpredictable.</p>\n<p>Because of the nature of the Cardinal spline, the value associated with\nthe first and last keys will never be returned. However, these keys are\nused to determine the shape of the curve on entry and exit. For\nexample:</p>\n<div class=\"code-container\">\n<code class=\"line\">Cf = ckspline(s, {1,1,1},    -0.25,    // First key\n</code><code class=\"line\">{.5,.5,.5},  0.0,    // Second key\n</code><code class=\"line\">{.5, 0,.5},  0.25,    // Third key\n</code><code class=\"line\">{0,0,.8},    1.0,    // Fourth key\n</code><code class=\"line\">{0,0,0},     1.25);    // Fifth key\n</code>\n</div>\n<p>The Catmull-Rom spline defined by the above keys would be valid for\ninterpolants in the range 0 to 1. The first and last keys are used\nsolely to determine the slope of the curve at the second and second last\nkeys.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "t",
                    "v0",
                    "k0"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "t",
                    "v0",
                    "k0"
                ],
                "args": [
                    "const float",
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "t",
                    "v0",
                    "k0"
                ],
                "args": [
                    "const float",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            }
        ]
    },
    "clamp": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/clamp\">clamp</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Returns value clamped between min and max.</p><ul><li><code>int clamp(int value, int min, int max)</code></li><li><code>float clamp(float value, float min, float max)</code></li><li><code>vector2 clamp(vector2 value, vector2 min, vector2 max)</code></li><li><code>vector clamp(vector value, vector min, vector max)</code></li><li><code>vector4 clamp(vector4 value, vector4 min, vector4 max)</code></li></ul>\n\n\n\n<p>Returns <code>value</code> clamped between <code>min</code> and <code>max</code>. For vectors Each\ncomponent is clamped.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value",
                    "min",
                    "max"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value",
                    "min",
                    "max"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "value",
                    "min",
                    "max"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value",
                    "min",
                    "max"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value",
                    "min",
                    "max"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "clip": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/clip\">clip</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Clip the line segment between p0 and p1.</p><ul><li><code>void clip(int &amp;result, vector &amp;p0, vector &amp;p1, vector min, vector max)</code></li><li><code>void clip(int &amp;result, vector &amp;p0, vector &amp;p1, vector4 plane)</code></li></ul>\n\n\n\n<p>clip the line segment against an arbitrary 3D plane specified by the\nplane equation (plane.x*x + plane.y*y + plane.z*z + plane.w).</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">void clip(int result&amp;, vector p0&amp;, vector p1&amp;, vector min, vector max)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>clip the line segment to the bounding box specified by the min and max\ncorner points.</p>\n<p>clip the line segment between p0 and p1.</p>\n<p>If the line is entirely clipped out of the result will be set to 0.\notherwise, the values p0 and p1 will be clipped to the constraints\nspecified and the result will be 1.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "result",
                    "p0",
                    "p1",
                    "plane"
                ],
                "args": [
                    "int",
                    "export vector",
                    "export vector",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "result",
                    "p0",
                    "p1",
                    "min",
                    "max"
                ],
                "args": [
                    "int",
                    "export vector",
                    "export vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "colormap": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/colormap\">colormap</a></h1><span><span class=\"padder\"><span class=\"pillow\">color</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span></span><p class=\"summary\">Looks up a color from a disk image.</p><ul><li><code>vector colormap(string filename, float u, float v, ...)</code></li><li><code>vector colormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples, ...)</code></li><li><code>vector colormap(string filename, vector uvw, ...)</code></li><li><code>vector colormap(string filename, vector uv, vector du, vector dv, int samples, ...)</code></li><li><code>vector colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, ...)</code></li><li><code>vector colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, int samples, ...)</code></li><li><code>vector4 colormap(string filename, float u, float v, ...)</code></li><li><code>vector4 colormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples, ...)</code></li><li><code>vector4 colormap(string filename, vector uvw, ...)</code></li><li><code>vector4 colormap(string filename, vector uv, vector du, vector dv, int samples, ...)</code></li><li><code>vector4 colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, ...)</code></li><li><code>vector4 colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, int samples, ...)</code></li></ul>\n\n\n\n<p>This function will lookup a single sample of from the filename given.\nThe first two components of the vector are used to reference the image\n(in 0 to 1 space). No area sampling is done, but bilinear\ninterpolation is done on raw pixel values.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 colormap(string filename, vector uvw)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector colormap(string filename, float u, float v)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>This function will lookup a single sample of from the filename given.\nThe first two components of the vector are used to reference the image\n(in 0 to 1 space). No area sampling is done, but bilinear\ninterpolation is done on raw pixel values.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 colormap(string filename, float u, float v)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector colormap(string filename, vector uv, vector du, vector dv, int samples)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>This function will filter the area of the image enclosed by the\nquadrilateral formed by (uv)-(uv+du)-(uv+du+dv)-(uv+dv). The\nquadrilateral will be sampled stochastically using the number of\nsamples specified (unless the image is a .rat file). Each sample will\nuse bilinear interpolation on raw pixel values.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 colormap(string filename, vector uv, vector du, vector dv, int samples)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>This function will filter the area of the image enclosed by the\nquadrilateral formed by (uv0)-(uv1)-(uv2)-(uv3). The quadrilateral\nwill be sampled stochastically using the number of samples specified\n(unless the image is a .rat file). Each sample will use bilinear\ninterpolation on raw pixel values.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 colormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector colormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>This function will sample the area enclosed by the quadrilateral\n(uv0),(uv1),(uv2),(uv3). The quadrilateral will be sampled\nstochastically using the number of samples passed in (unless the image\nis a .rat file). Each sample will use bilinear interpolation on raw\npixel values.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 colormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>There are various forms for looking up a color from a disk image. There\nare typically two forms of each function, one which returns a vector\n(RGB values only) and the other which returns a vector4 (RGB and\nAlpha).</p>\n<p>There are corresponding versions of each of the above functions which\nreturn vector4 data types (which include alpha information in the fourth\ncomponent of the vector4). If an image doesn\u2019t have an alpha channel\nassociated with it (e.g. a JPEG image), the alpha will be set to 1.</p>\n<p>The <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/rawcolormap\">rawcolormap()</a> function is the same as <code>colormap</code> but\ndoes not do bilinear interpolation of the raw pixel values.</p>\n\n<h2 class=\"label heading\" id=\"optional-arguments\">\n            \n            Optional arguments\n        </h2>\n<div class=\"content\" id=\"optional-arguments-body\">\n<p>You can specify additional keyword,value argument pairs to set filtering\noptions for the texture. These arguments must be defined at load time\n(literals or parameters).</p>\n<p>To specify one of the additional arguments, pass the keyword as a\nstring, with the next argument being the value for the keyword. For\nexample <code>..., \"wrap\", \"clamp\", \"border\", {.1,1,1})</code>. See\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#imagefilter\">optional image filter arguments</a>.</p>\n<p>Examples of specifying filter parameters:</p>\n<div class=\"code-container\">\n<code class=\"line\">colormap(map, u, v, \"smode\", \"decal\", \"tmode\", \"repeat\", \"border\", {.1,1,1});\n</code><code class=\"line\">colormap(map, u, v, \"mode\", \"clamp\", \"width\", 1.3);\n</code><code class=\"line\">colormap(map, u, v, \"filter\", \"gauss\", \"width\", 1.3, \"mode\", \"repeat\");\n</code>\n</div>\n<p>If the texture is a deep <code>.rat</code> file, you can use the <code>\"channel\"</code> keyword argument\nto specify a channel in the file:</p>\n<div class=\"code-container\">\nstring channelname = \"N\";\ncf = colormap(map, u, v, \"channel\", channelname);\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/texture\">texture()</a><div class=\"related-summary\">Computes a filtered sample of the texture map specified.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "u0",
                    "v0",
                    "u1",
                    "v1",
                    "u2",
                    "v2",
                    "u3",
                    "v3",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv",
                    "du",
                    "dv",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "uv2",
                    "uv3"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "uv2",
                    "uv3",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "u0",
                    "v0",
                    "u1",
                    "v1",
                    "u2",
                    "v2",
                    "u3",
                    "v3",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv",
                    "du",
                    "dv",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "uv2",
                    "uv3"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "uv2",
                    "uv3",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "colorname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/colorname\">colorname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the color plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string colorname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the color plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"C\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "computenormal": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/computenormal\">computenormal</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">In the POP and SOP contexts, sets how/whether to recompute normals.\nIn the shading contexts, computes normals.</p><ul><li><code>void computenormal(int state)</code><span class=\"padder\"><span class=\"pillow\">pop</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></li><li><code>vector computenormal(vector P, ...)</code></li><li><code>vector computenormal(vector P, vector N, vector Ng, ...)</code></li></ul>\n\n\n\n<p>WARNING:\nThis signature is deprecated. The normal generation is now controlled\non the <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/attribvop\" title=\"Runs a VOP network to modify geometry attributes.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/SOP/attribvop.svg\">[Image \ud83d\udd17]</a>Attribute VOP</a> or\n<a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/attribwrangle\" title=\"Runs a VEX snippet to modify attribute values.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/SOP/attribwrangle.svg\">[Image \ud83d\udd17]</a>Attribute Wrangle</a> SOP nodes instead.\n(<strong>SOP context only</strong>) The VEX context attempts to be intelligent\nabout normals on the geometry. If A normal attribute exists on the\ngeometry before cooking, the position (P) is modified by the VEX code,\nand the normal (N) is not modified by the VEX code, then the VEX\ncooker will assume that the normal is out-of-date and re-compute it.</p>\n<p>In most cases, this is the desired behavior. However, in some cases,\nthis is not desired. The <code>computenormal</code> function allows some control\nover this behavior.</p>\n<p>The following values for the <code>state</code> parameter can be used:\n0: Normals will not be modified after\ncooking, 1 = Normals will be recomputed if they are required for\ncooking, 2 = Normals are always recomputed.</p>\n<p>This function is performed at the conclusion of the cook, so it has no\neffect on the state of the N variable during execution of VEX code.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector computenormal(vector P)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>(<strong>All contexts</strong>) Computes the normal for the described by P by\nperforming the cross product of the derivatives of P. You can\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#derive\">specify optional parameters</a>  to\ncontrol the computation.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector computenormal(vector P, vector N, vector Ng)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>(<strong>All contexts</strong>) Computes the normal for the described by P by\nperforming the cross product of the derivatives of P. Takes the\noriginal surface normal and geometric normal. The computed normal will\nbe \"adjusted\" so interpolated normals will be relatively correct. You\ncan  <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#derive\">specify optional parameters</a>\nto control the computation.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "P"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "P",
                    "N",
                    "Ng"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "state"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "concat": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/concat\">concat</a></h1><span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Concatenate all the strings specified to form a single string.</p><ul><li><code>string concat(string s1, string s2, ...)</code></li></ul>\n\n\n\n<p>Concatenate all the strings specified to form a single string. This is\nequivalent (but slightly more efficient when there are more than 2\nstrings) to adding all the strings together.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "s1",
                    "s2"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string",
                "variadic": true
            }
        ]
    },
    "cone": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cone\">cone</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\"></p><ul><li><code>bsdf cone(vector dir, float angle, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf cone(vector foo, vector bar, float baz, ...)</code></li></ul>\n\n\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/cone.png\">[Image \ud83d\udd17]\n</a></p>\n<p>A cone reflection along a given direction vector. This BSDF is constant within the given <code>angle</code>, producing a similar result to the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/gather\" title=\"Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.\">gather()</a> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/irradiance\" title=\"Computes irradiance (global illumination) at the point P with the\nnormal N.\">irradiance()</a> loops.</p>\n\n<p>\n<code>dir</code>\n\n<div class=\"content\">\n<p>The direction of specularity.</p>\n</div>\n</p>\n<p>\n<code>angle</code>\n\n<div class=\"content\">\n<p>Cone angle <strong>in radians</strong>.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "dir",
                    "angle"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "foo",
                    "bar",
                    "baz"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "cos": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cos\">cos</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the cosine of the argument.</p><ul><li><code>float cos(float value)</code></li><li><code>vector2 cos(vector2 value)</code></li><li><code>vector cos(vector value)</code></li><li><code>vector4 cos(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the cosine of the argument.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "cosh": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cosh\">cosh</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the hyperbolic cosine of the argument.</p><ul><li><code>float cosh(float value)</code></li><li><code>vector2 cosh(vector2 value)</code></li><li><code>vector cosh(vector value)</code></li><li><code>vector4 cosh(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the hyperbolic cosine of the argument.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "cracktransform": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cracktransform\">cracktransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Depending on the value of c, returns the translate (c=0), rotate\n(c=1), or scale (c=2) component of the transform (xform).</p><ul><li><code>vector cracktransform(int trs, int xyz, int c, vector p, matrix xform)</code></li></ul>\n\n\n\n<p>Depending on the value of <code>c</code>, returns the translate (<code>c=0</code>), rotate\n(<code>c=1</code>), or scale (<code>c=2</code>) component of the transform (<code>xform</code>). The\nfunction uses the given transform and rotation orders (<code>trs</code> and\n<code>xyz</code>) and the given pivot point (<code>pivot</code>) to calculate the return\nvalue. The specifications for the <code>trs</code> and <code>xyz</code> parameters can be\nfound in <code>$HFS/houdini/vex/include/math.h</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "trs",
                    "xyz",
                    "c",
                    "p",
                    "xform"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const vector",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "create_cdf": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/create_cdf\">create_cdf</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\">Creates a CDF from an array of input PDF values.</p><ul><li><code>float[] create_cdf(float[] pdf)</code></li></ul>\n\n\n\n<p>Create a CDF for the input <code>values</code> PDF and return it as an array.</p>\n\n<p>\n<code>pdf</code>\n\n<div class=\"content\">\n<p>Array of PDF values to create the CDF for.</p>\n</div>\n</p>\n\n<p>CDFs are useful when sampling from distributions. For example, a CDF of\nlight source power could be created. This would allow sampling\nof lights with a probability based on power. This is an example of a\ndiscrete CDF, where sampling selects among a fixed set of probabilities.\nSuch a CDF could be created as follows:</p>\n<div class=\"code-container\">\n<code class=\"line\">// Iterate over all lights, sampling their power\n</code><code class=\"line\">int li[] = getlights();\n</code><code class=\"line\">float values[];\n</code><code class=\"line\">resize(values, len(li));\n</code><code class=\"line\">int nsamples = 256;\n</code><code class=\"line\">int sid = israytrace ? SID : newsampler();\n</code><code class=\"line\">vector s, pos, clr;\n</code><code class=\"line\">float scale;\n</code><code class=\"line\">for (int i = 0; i &lt; len(li); i++)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0for (int j = 0; j &lt; nsamples; j++)\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nextsample(sid, s.x, s.y, \"mode\", \"nextpixel\");\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sample_light(li[i], P, s, Time, pos, clr, scale);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values[i] += luminance(clr);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0values[i] /= nsamples;\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">// Create a CDF of the power distribution\n</code><code class=\"line\">float cdf[] = create_cdf(values);\n</code><code class=\"line\">\n</code><code class=\"line\">// Randomly select a light based on power distribution\n</code><code class=\"line\">nextsample(sid, s.x, s.y, \"mode\", \"nextpixel\");\n</code><code class=\"line\">int index = 0;\n</code><code class=\"line\">sample_cdf(cdf, s.x, index);\n</code><code class=\"line\">\n</code><code class=\"line\">// Do something with the selected light\n</code><code class=\"line\">// li[index] ...\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/create_pdf\">create_pdf()</a><div class=\"related-summary\">Creates a PDF from an array of input values.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cdf\">sample_cdf()</a><div class=\"related-summary\">Samples a CDF based on a random variable.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "pdf"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            }
        ]
    },
    "create_pdf": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/create_pdf\">create_pdf</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\">Creates a PDF from an array of input values.</p><ul><li><code>float[] create_pdf(float[] values)</code></li></ul>\n\n\n\n<p>Create a POF for the input <code>values</code> array and return it as a float array.</p>\n\n<p>\n<code>values</code>\n\n<div class=\"content\">\n<p>Array of values to create the PDF for.</p>\n</div>\n</p>\n\n<p>CDFs are useful when sampling from distributions. For example, a CDF of\nlight source power could be created. This would allow sampling\nof lights with a probability based on power. This is an example of a\ndiscrete CDF, where sampling selects among a fixed set of probabilities.\nSuch a CDF could be created as follows:</p>\n<div class=\"code-container\">\n<code class=\"line\">// Iterate over all lights, sampling their power\n</code><code class=\"line\">int li[] = getlights();\n</code><code class=\"line\">float values[];\n</code><code class=\"line\">resize(values, len(li));\n</code><code class=\"line\">int nsamples = 256;\n</code><code class=\"line\">int sid = israytrace ? SID : newsampler();\n</code><code class=\"line\">vector s, pos, clr;\n</code><code class=\"line\">float scale;\n</code><code class=\"line\">for (int i = 0; i &lt; len(li); i++)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0for (int j = 0; j &lt; nsamples; j++)\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nextsample(sid, s.x, s.y, \"mode\", \"nextpixel\");\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sample_light(li[i], P, s, Time, pos, clr, scale);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values[i] += luminance(clr);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0values[i] /= nsamples;\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">// Create a CDF of the power distribution\n</code><code class=\"line\">float cdf[] = create_cdf(values);\n</code><code class=\"line\">\n</code><code class=\"line\">// Randomly select a light based on power distribution\n</code><code class=\"line\">nextsample(sid, s.x, s.y, \"mode\", \"nextpixel\");\n</code><code class=\"line\">int index = 0;\n</code><code class=\"line\">sample_cdf(cdf, s.x, index);\n</code><code class=\"line\">\n</code><code class=\"line\">// Do something with the selected light\n</code><code class=\"line\">// li[index] ...\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/create_cdf\">create_cdf()</a><div class=\"related-summary\">Creates a CDF from an array of input PDF values.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cdf\">sample_cdf()</a><div class=\"related-summary\">Samples a CDF based on a random variable.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "values"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            }
        ]
    },
    "cross": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cross\">cross</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the cross product between the two vectors.</p><ul><li><code>vector cross(vector v1, vector v2)</code></li></ul>\n\n\n\n<p>Returns the cross product between the two vectors</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "cspline": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cspline\">cspline</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Computes a Catmull-Rom (Cardinal) spline between the key points\nspecified.</p><ul><li><code>float cspline(float t, float val1, ...)</code></li><li><code>vector cspline(float t, vector val1, ...)</code></li><li><code>vector4 cspline(float t, vector4 val1, ...)</code></li></ul>\n\n\n\n<p>Computes a Catmull-Rom (Cardinal) spline between the key points\nspecified. The keys are uniformly spaced over the range 0 to 1.</p>\n<p>Because of the nature of the Cardinal spline, the value associated with\nthe first and last keys will never be returned. However, these keys are\nused to determine the shape of the curve on entry and exit.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "t",
                    "val1"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "t",
                    "val1"
                ],
                "args": [
                    "const float",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "t",
                    "val1"
                ],
                "args": [
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            }
        ]
    },
    "ctransform": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ctransform\">ctransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">color</span></span></span><p class=\"summary\">Transforms between color spaces.</p><ul><li><code>vector ctransform(string fromspace, string tospace, vector clr)</code></li><li><code>vector ctransform(string tospace, vector clr)</code></li></ul>\n\n\n\n<p>If you don\u2019t give a <code>fromspace</code>, assumes <code>\"cspace:rgb\"</code>.</p>\n<p>Transforms color tuple <code>clr</code> from one color space to\nanother.</p>\n<p>NOTE:\nThe hue-based systems are normalized with the hue going from <code>0</code> to <code>1</code>. LAB and TMI are not normalized.</p>\n<p>The possible arguments for <code>fromspace</code> and <code>tospace</code> are\n<code>\"cspace:rgb\"</code>, <code>\"cspace:hsl\"</code>, <code>\"cspace:hsv\"</code>, <code>\"cspace:XYZ\"</code>,\n<code>\"cspace:Lab\"</code>, and <code>\"cspace::tmi\"</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "fromspace",
                    "tospace",
                    "clr"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "tospace",
                    "clr"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "curlnoise": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/curlnoise\">curlnoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Computes divergence free noise based on Perlin noise.</p><ul><li><code>vector curlnoise(vector xyz)</code></li><li><code>vector curlnoise(vector4 xyzt)</code></li></ul>\n\n\n\n<p>Computes a divergence free vector field based on the cross product of the derivatives of two Perlin noise functions.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/curlxnoise\">pnoise</a><div class=\"related-summary\">Computes divergence free noise based on Simplex noise.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "xyzt"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyz"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "curlnoise2d": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/curlnoise2d\">curlnoise2d</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Computes 2d divergence free noise based on Perlin noise.</p><ul><li><code>vector curlnoise2d(float x, float y)</code></li><li><code>vector curlnoise2d(vector xyt)</code></li></ul>\n\n\n\n<p>Computes a divergence free vector field based on the cross product of the derivatives of two Perlin noise functions.</p>\n<p>The resulting vectors all lie along the X-Y plane.</p>\n<p>NOTE:\nThis is not the same as projecting a <code>curlnoise</code> to a plane.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/curlnoise\">pnoise</a><div class=\"related-summary\">Computes divergence free noise based on Perlin noise.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x",
                    "y"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyt"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "curlxnoise": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/curlxnoise\">curlxnoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Computes divergence free noise based on Simplex noise.</p><ul><li><code>vector curlxnoise(vector xyz)</code></li><li><code>vector curlxnoise(vector4 xyzt)</code></li></ul>\n\n\n\n<p>Computes a divergence free vector field based on the cross product of the derivatives of two simplex noise functions.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/curlnoise\">pnoise</a><div class=\"related-summary\">Computes divergence free noise based on Perlin noise.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "xyzt"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyz"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "curlxnoise2d": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/curlxnoise2d\">curlxnoise2d</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Computes 2d divergence free noise based on simplex noise.</p><ul><li><code>vector curlxnoise2d(float x, float y)</code></li><li><code>vector curlxnoise2d(vector xyt)</code></li></ul>\n\n\n\n<p>Computes a divergence free vector field based on the cross product of the derivatives of two simplex noise functions.</p>\n<p>The resulting vectors all lie along the X-Y plane.</p>\n<p>NOTE:\nThis is not the same as projecting a <code>curlnoise</code> to a plane!</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/curlxnoise\">pnoise</a><div class=\"related-summary\">Computes divergence free noise based on Simplex noise.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x",
                    "y"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyt"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "cvex_bsdf": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/cvex_bsdf\">cvex_bsdf</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\"></p><ul><li><code>bsdf cvex_bsdf(string eval_cvex_shader, string sampler_cvex_shader, ...)</code></li></ul>\n\n\n\n<p>This function provides a custom interface for defining BSDF reflectance\nfunctions through a pair of <code>cvex</code> shaders: one to evaluate the\nreflectance function and another to sample it.  These shaders are\nspecified in the first 2 arguments, while subsequent variadic keyword\narguments provide arbitrary data to the shaders when they are invoked.</p>\n<p>This interface is subject to change in future versions of Houdini,\nthough any potential changes will likely not require fundamental\nchanges to the structure of your shaders.</p>\n\n<h2 class=\"label heading\" id=\"evaluation-function\">\n            \n            Evaluation Function\n        </h2>\n<div class=\"content\" id=\"evaluation-function-body\">\n<p>The evaluation function must have the following parameters and exports:\n<code>vector u</code>:\nOutgoing light direction, from the surface to the viewer.\n<code>vector v</code>:\nIncoming light direction, from the surface to the light.\n<code>int bounces</code>:\nA mask specifying the type of reflections that should be evaluated.\n<code>int reverse</code>:\nWhether evaluating from the camera or the light source.\n<code>export vector refl</code>:\nThe reflectivity (albedo) of the BSDF.\n<code>export vector eval</code>:\nThe evaluated reflectance for the given directions.\n<code>export float pdf</code>:\nThe sampling pdf for the given directions.  The integral of this value over the sphere should be equal to <code>luminance(refl)*2*PI</code>.  For perfect importance sampling, <code>pdf == luminance(eval)</code>.</p>\n<p>The <code>refl</code> export should not be dependent on the <code>v</code> vector, since it\nis used as an average reflectivity over all lighting directions.  This\nis the value that the <code>albedo()</code> function will return.</p>\n<p>The <code>reverse</code> parameter is used to indicate whether the BSDF is being evaluated for an eye/camera ray (reverse == 0), or whether it\u2019s being evaluated from a light source (reverse == 1).</p>\n<p>The evaluation function also implicitly indicates to mantra whether the\nBSDF is a delta function by setting the <code>eval</code> export to a constant 0\nvalue.  Delta functions reflect light in specific directions or lines,\nand are handled as a special case in the lighting algorithm to produce\nless noisy results.  The behavior of a delta BSDF is determined\nby the sampling function.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"sampling-function\">\n            \n            Sampling Function\n        </h2>\n<div class=\"content\" id=\"sampling-function-body\">\n<p>The sampling function must have the following parameters and exports:\n<code>vector u</code>:\nOutgoing light direction, from the surface to the viewer.\n<code>float sx</code>:\nUniform random value between 0 and 1, correlated with sy in a 2D sampling pattern.\n<code>float sy</code>:\nUniform random value between 0 and 1, correlated with sx in a 2D sampling pattern.\n<code>int bounces</code>:\nA mask specifying the type of reflections that should be evaluated.\n<code>export vector refl</code>:\nThe reflectivity (albedo) of the bsdf, tinted by the color of the light in the sampled direction.  The luminance of this value should match <code>refl</code> from the evaluation function. If the sampling distribution does not match the evaluation function exactly, this value should be scaled by the ratio of the evaluation distribution to the sampling distribution.\n<code>export vector v</code>:\nSampled light direction, from the surface to the light.\n<code>export int bouncetype</code>:\nThe specific component type selected by sampling.\n<code>export float pdf</code>:\nThe sampling pdf.  The integral of this value over the sphere should be a constant <code>2*PI</code>. Note that this differs from the <code>pdf</code> produced by the evaluation function by a factor of <code>luminance(refl)</code>.</p>\n<p>The sampling function is responsible for selecting a random reflection\ndirection that is importance sampled from the distribution defined by\nthe evaluation function.  If the evaluation function is a delta\nfunction (<code>eval</code> is 0 in the evaluation shader), you are free to choose\nthe sampling directions in any way you wish.  Otherwise, you should\nchoose directions from a distribution that either matches the\nevaluation function or that is close to it.  The <code>sx</code> and <code>sy</code> inputs\nare available to help produce high quality sample distributions.\nThese values are initialized directly from mantra\u2019s pixel sampling patterns.</p>\n<p>In Houdini 13 and later, it is not necessary for the sampling function\nto directly sample from the evaluation function\u2019s distribution.  To use\na different sampling function, adjust the <code>pdf</code> outputs from both the\nevaluation and sampling shaders so that they reflect the distribution\nbeing sampled.</p>\n<p>The <code>v</code> output is the sampled reflection direction.  The <code>refl</code> output\nindicates the color of the reflected light in the reflection direction\nand should have a luminance equal to the albedo (as defined by the\nevaluation shader) regardless of <code>v</code>.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"intrinsic-arguments\">\n            \n            Intrinsic Arguments\n        </h2>\n<div class=\"content\" id=\"intrinsic-arguments-body\">\n<p>The intrinsic <code>mybounces</code> integer argument can be used to retrieve the\ncomponent mask for the BSDF.  This allows custom BSDF objects to\nrespect the \"label\" passed to the <code>cvex_bsdf()</code> creation function, so\nthat the same BSDF can be used for different component types.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"custom-arguments\">\n            \n            Custom Arguments\n        </h2>\n<div class=\"content\" id=\"custom-arguments-body\">\n<p>Custom arguments can be provided to the <code>cvex_bsdf()</code> function after the\n<code>eval_cvex_shader</code> and <code>sampler_cvex_shader</code> arguments.  In particular, you\nshould provide a \"label\" keyword argument to specify the type of\ncomponent for the new BSDF.</p>\n<p>If multiple \"label\" arguments are provided, only the last one will be used.\nIf you want to specify multiple component types, provide single \"label\" \nargument with component keywords separated by a space.\n(e.g. <code>f = cvex_bsdf(myEval, mySample, \"label\", \"reflect refract\");</code>)</p>\n<p>Additional arguments will be passed as parameters to the <code>eval</code> and\n<code>sample</code> functions.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"validation\">\n            \n            Validation\n        </h2>\n<div class=\"content\" id=\"validation-body\">\n<p>There are 2 main approaches available to verify whether you have\nimplemented the <code>cvex_bsdf</code> evaluation and sampling functions correctly.</p>\n<p>First, you can use mantra\u2019s multiple importance sampling algorithm to\nensure that renders match in brightness apart from noise for different\nsampling techniques. To do this, create an environment light (with a\nmap assigned) and render with different values of the <strong class=\"ui\">MIS Bias</strong>\nparameter.  You will need to add the <strong class=\"ui\">MIS Bias</strong> parameter from the\nrendering properties dialog, since it is not available on the light by\ndefault. A value of -1 means to sample only from the BSDF while a value\nof 1 means to sample only from light source.  To verify the <code>refl</code> value\nin the sampling function, set the environment light rendering mode to\n<strong class=\"ui\">Ray Tracing Background</strong>.  If the rendered results are the same\n(apart from noise) with values of -1, 0, 1, and for ray tracing\nbackground, your shader is bias-free.</p>\n<p>Second, the <a class=\"link missing Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/obj/verifybsdf\">Verify BSDF</a> object can be used to\nverify that the albedo, pdf, and sampling function all align correctly\nand that they integrate to the correct values. This approach uses\npoint-based random sampling in SOPs and additionally will show the\nshape of the BSDF visually as a polar point cloud.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"example-diffuse\">\n            \n            Example: Diffuse\n        </h2>\n<div class=\"content\" id=\"example-diffuse-body\">\n<p>Creation:</p>\n<div class=\"code-container\">\n<code class=\"line\">F = cvex_bsdf(\"diffuse_eval\", \"diffuse_sample\",\n</code><code class=\"line\">\"label\", \"diffuse\",\n</code><code class=\"line\">\"N\", N);\n</code>\n</div>\n<p>Evaluation shader:</p>\n<div class=\"code-container\">\n<code class=\"line\">#include \"pbr.h\"\n</code><code class=\"line\">\n</code><code class=\"line\">cvex diffuse_eval(\n</code><code class=\"line\">vector u = 0;\n</code><code class=\"line\">vector v = 0;\n</code><code class=\"line\">int bounces = 0;\n</code><code class=\"line\">int reverse = 0;\n</code><code class=\"line\">export vector refl = 0;\n</code><code class=\"line\">export vector eval = 0;\n</code><code class=\"line\">export float pdf = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">int mybounces = 0;\n</code><code class=\"line\">vector N = 0)\n</code><code class=\"line\">{\n</code><code class=\"line\">if (bounces &amp; mybounces)\n</code><code class=\"line\">{\n</code><code class=\"line\">// If evaluating reversed, the incoming light direction is needed for\n</code><code class=\"line\">// evaluation rather than the outgoing direction.  The select statement\n</code><code class=\"line\">// swaps based on the value of the \"reverse\" toggle.\n</code><code class=\"line\">vector vvec = select(reverse, u, v);\n</code><code class=\"line\">pdf = max(dot(vvec, normalize(N)), 0);\n</code><code class=\"line\">eval = pdf;\n</code><code class=\"line\">refl = 0.5;\n</code><code class=\"line\">}\n</code>\n</div>\n<p>Sample shader:</p>\n<div class=\"code-container\">\n<code class=\"line\">#include \"math.h\"\n</code><code class=\"line\">#include \"pbr.h\"\n</code><code class=\"line\">\n</code><code class=\"line\">cvex diffuse_sample(\n</code><code class=\"line\">vector u = 0;\n</code><code class=\"line\">float sx = 0;\n</code><code class=\"line\">float sy = 0;\n</code><code class=\"line\">int bounces = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">export vector refl = 0;\n</code><code class=\"line\">export vector v = 0;\n</code><code class=\"line\">export int bouncetype = 0;\n</code><code class=\"line\">export float pdf = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">int mybounces = 0;\n</code><code class=\"line\">vector N = 0)\n</code><code class=\"line\">{\n</code><code class=\"line\">if (bounces &amp; mybounces)\n</code><code class=\"line\">{\n</code><code class=\"line\">vector nml = normalize(N);\n</code><code class=\"line\">\n</code><code class=\"line\">v = set(cos(sx*PI*2), sin(sx*PI*2), 0);\n</code><code class=\"line\">v *= sqrt(sy);\n</code><code class=\"line\">v.z = sqrt(1-sy);\n</code><code class=\"line\">\n</code><code class=\"line\">pdf = 2*v.z;\n</code><code class=\"line\">\n</code><code class=\"line\">// Transform v into the reference frame for nml\n</code><code class=\"line\">vector framex = normalize(cross(nml, u));\n</code><code class=\"line\">vector framey = cross(nml, framex);\n</code><code class=\"line\">\n</code><code class=\"line\">v = framex * v.x + framey * v.y + nml*v.z;\n</code><code class=\"line\">\n</code><code class=\"line\">bouncetype = mybounces;\n</code><code class=\"line\">refl = 0.5; // Luminance needs to match albedo\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2 class=\"label heading\" id=\"example-specular\">\n            \n            Example: Specular\n        </h2>\n<div class=\"content\" id=\"example-specular-body\">\n<p>Creation:</p>\n<div class=\"code-container\">\n<code class=\"line\">F = cvex_bsdf(\"specular_eval\", \"specular_sample\",\n</code><code class=\"line\">\"label\", \"reflect\",\n</code><code class=\"line\">\"dir\", reflect(I, N));\n</code>\n</div>\n<p>Evaluation shader:</p>\n<div class=\"code-container\">\n<code class=\"line\">#include \"pbr.h\"\n</code><code class=\"line\">\n</code><code class=\"line\">cvex specular_eval(\n</code><code class=\"line\">vector u = 0;\n</code><code class=\"line\">vector v = 0;\n</code><code class=\"line\">int bounces = 0;\n</code><code class=\"line\">int reverse = 1;\n</code><code class=\"line\">export vector refl = 0;\n</code><code class=\"line\">export vector eval = 0; // Delta bsdf\n</code><code class=\"line\">\n</code><code class=\"line\">int mybounces = 0;\n</code><code class=\"line\">vector dir = 0)\n</code><code class=\"line\">{\n</code><code class=\"line\">if (bounces &amp; mybounces)\n</code><code class=\"line\">refl = 1;\n</code><code class=\"line\">}\n</code>\n</div>\n<p>Sample shader:</p>\n<div class=\"code-container\">\n<code class=\"line\">#include \"math.h\"\n</code><code class=\"line\">#include \"pbr.h\"\n</code><code class=\"line\">\n</code><code class=\"line\">cvex specular_sample(\n</code><code class=\"line\">vector u = 0;\n</code><code class=\"line\">float sx = 0;\n</code><code class=\"line\">float sy = 0;\n</code><code class=\"line\">int bounces = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">export vector refl = 0;\n</code><code class=\"line\">export vector v = 0;\n</code><code class=\"line\">export int bouncetype = 0;\n</code><code class=\"line\">export float pdf = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">int mybounces = 0;\n</code><code class=\"line\">vector dir = 0)\n</code><code class=\"line\">{\n</code><code class=\"line\">if (bounces &amp; mybounces)\n</code><code class=\"line\">{\n</code><code class=\"line\">pdf = 1e6F;\n</code><code class=\"line\">v = dir;\n</code><code class=\"line\">bouncetype = mybounces;\n</code><code class=\"line\">refl = 1; // Needs to match albedo\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/diffuse\">diffuse()</a><div class=\"related-summary\">Returns the diffuse (Lambertian) illumination given the normalized\nsurface normal.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/specular\">specular()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "eval_cvex_shader",
                    "sampler_cvex_shader"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "degrees": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/degrees\">degrees</a></h1><span><span class=\"padder\"><span class=\"pillow\">conversion</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the argument from radians into degrees.</p><ul><li><code>float degrees(float angle)</code></li><li><code>vector2 degrees(vector2 angle)</code></li><li><code>vector degrees(vector angle)</code></li><li><code>vector4 degrees(vector4 angle)</code></li></ul>\n\n\n\n<p>Returns the argument from radians into degrees</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "angle"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "angle"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "angle"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "angle"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "depthmap": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/depthmap\">depthmap</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span></span><p class=\"summary\">The depthmap functions work on an image which was rendered as a\nz-depth image from mantra.</p><ul><li><code>float depthmap(string filename, float u, float v)</code></li><li><code>float depthmap(string filename, vector uvw)</code></li></ul>\n\n\n\n<p>The depthmap functions work on an image which was rendered as a z-depth\nimage from mantra. They return the floating point distance from the\ncamera to the pixel in question. There is no area sampling done when\nsampling depth values. As well, if the u/v values are not in the range 0\nto 1, a value of 1E6 will be returned (indicating a \"far\" value).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/shadowmap\">shadowmap</a><div class=\"related-summary\">The shadowmap function will treat the shadow map as if the image were\nrendered from a light source.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "filename",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "depthname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/depthname\">depthname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the depth plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string depthname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the depth plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"Z\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "detail": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/detail\">detail</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a detail attribute value from a geometry.</p><ul><li><code>int detail(int opinput, string attribute_name)</code></li><li><code>int detail(int opinput, string attribute_name, int ignored)</code></li><li><code>int detail(string geometry, string attribute_name)</code></li><li><code>int detail(string geometry, string attribute_name, int ignored)</code></li><li><code>string detail(int opinput, string attribute_name)</code></li><li><code>string detail(int opinput, string attribute_name, int ignored)</code></li><li><code>string detail(string geometry, string attribute_name)</code></li><li><code>string detail(string geometry, string attribute_name, int ignored)</code></li><li><code>float detail(int opinput, string attribute_name)</code></li><li><code>float detail(int opinput, string attribute_name, int ignored)</code></li><li><code>float detail(string geometry, string attribute_name)</code></li><li><code>float detail(string geometry, string attribute_name, int ignored)</code></li><li><code>vector2 detail(int opinput, string attribute_name)</code></li><li><code>vector2 detail(int opinput, string attribute_name, int ignored)</code></li><li><code>vector2 detail(string geometry, string attribute_name)</code></li><li><code>vector2 detail(string geometry, string attribute_name, int ignored)</code></li><li><code>vector detail(int opinput, string attribute_name)</code></li><li><code>vector detail(int opinput, string attribute_name, int ignored)</code></li><li><code>vector detail(string geometry, string attribute_name)</code></li><li><code>vector detail(string geometry, string attribute_name, int ignored)</code></li><li><code>vector4 detail(int opinput, string attribute_name)</code></li><li><code>vector4 detail(int opinput, string attribute_name, int ignored)</code></li><li><code>vector4 detail(string geometry, string attribute_name)</code></li><li><code>vector4 detail(string geometry, string attribute_name, int ignored)</code></li><li><code>matrix2 detail(int opinput, string attribute_name)</code></li><li><code>matrix2 detail(int opinput, string attribute_name, int ignored)</code></li><li><code>matrix2 detail(string geometry, string attribute_name)</code></li><li><code>matrix2 detail(string geometry, string attribute_name, int ignored)</code></li><li><code>matrix3 detail(int opinput, string attribute_name)</code></li><li><code>matrix3 detail(int opinput, string attribute_name, int ignored)</code></li><li><code>matrix3 detail(string geometry, string attribute_name)</code></li><li><code>matrix3 detail(string geometry, string attribute_name, int ignored)</code></li><li><code>matrix detail(int opinput, string attribute_name)</code></li><li><code>matrix detail(int opinput, string attribute_name, int ignored)</code></li><li><code>matrix detail(string geometry, string attribute_name)</code></li><li><code>matrix detail(string geometry, string attribute_name, int ignored)</code></li><li><code>int[] detail(int opinput, string attribute_name)</code></li><li><code>int[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>int[] detail(string geometry, string attribute_name)</code></li><li><code>int[] detail(string geometry, string attribute_name, int ignored)</code></li><li><code>string[] detail(int opinput, string attribute_name)</code></li><li><code>string[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>string[] detail(string geometry, string attribute_name)</code></li><li><code>string[] detail(string geometry, string attribute_name, int ignored)</code></li><li><code>float[] detail(int opinput, string attribute_name)</code></li><li><code>float[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>float[] detail(string geometry, string attribute_name)</code></li><li><code>float[] detail(string geometry, string attribute_name, int ignored)</code></li><li><code>vector2[] detail(int opinput, string attribute_name)</code></li><li><code>vector2[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>vector2[] detail(string geometry, string attribute_name)</code></li><li><code>vector2[] detail(string geometry, string attribute_name, int ignored)</code></li><li><code>vector[] detail(int opinput, string attribute_name)</code></li><li><code>vector[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>vector[] detail(string geometry, string attribute_name)</code></li><li><code>vector[] detail(string geometry, string attribute_name, int ignored)</code></li><li><code>vector4[] detail(int opinput, string attribute_name)</code></li><li><code>vector4[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>vector4[] detail(string geometry, string attribute_name)</code></li><li><code>vector4[] detail(string geometry, string attribute_name, int ignored)</code></li><li><code>matrix2[] detail(int opinput, string attribute_name)</code></li><li><code>matrix2[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>matrix2[] detail(string geometry, string attribute_name)</code></li><li><code>matrix2[] detail(string geometry, string attribute_name, int ignored)</code></li><li><code>matrix3[] detail(int opinput, string attribute_name)</code></li><li><code>matrix3[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>matrix3[] detail(string geometry, string attribute_name)</code></li><li><code>matrix3[] detail(string geometry, string attribute_name, int ignored)</code></li><li><code>matrix[] detail(int opinput, string attribute_name)</code></li><li><code>matrix[] detail(int opinput, string attribute_name, int ignored)</code></li><li><code>matrix[] detail(string geometry, string attribute_name)</code></li><li><code>matrix[] detail(string geometry, string attribute_name, int ignored)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if importing the attribute failed, the value of the\nattribute on success.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be \"op:full_path_to_sop\" to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. \"Cd\" or \"P\")</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">vector        uv;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the value of the \"uv\" attribute for the detail.\n</code><code class=\"line\">uv = detail(\"defgeo.bgeo\", \"uv\");\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detailattrib\">detailattrib</a><div class=\"related-summary\">Imports a detail attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setdetailattrib\">setdetailattrib</a><div class=\"related-summary\">Sets a detail attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hasdetailattrib\">hasdetailattrib</a><div class=\"related-summary\">Returns if a geometry detail attribute exists.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detailattribsize\">detailattribsize</a><div class=\"related-summary\">Returns the size of a geometry detail attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detailattribtype\">detailattribtype</a><div class=\"related-summary\">Returns the type of a geometry detail attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detailattribtypeinfo\">detailattribtypeinfo</a><div class=\"related-summary\">Returns the type info of a geometry attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/adddetailattrib\">adddetailattrib</a><div class=\"related-summary\">Adds an attribute to a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/attrib\">attrib</a><div class=\"related-summary\">Reads an attribute value from geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getattrib\">getattrib</a><div class=\"related-summary\">Reads an attribute value from geometry, with validity check.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/point\">point</a><div class=\"related-summary\">Imports a point attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertex\">vertex</a><div class=\"related-summary\">Imports a vertex attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/prim\">prim</a><div class=\"related-summary\">Imports a primitive attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "detailattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/detailattrib\">detailattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a detail attribute value from a geometry.</p><ul><li><code>int detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>int detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>string detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>string detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>float detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>float detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector2 detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector2 detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector4 detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector4 detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix2 detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix2 detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix3 detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix3 detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>int[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>int[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>string[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>string[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>float[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>float[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector2[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector2[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector4[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>vector4[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix2[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix2[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix3[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix3[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix[] detailattrib(int opinput, string attribute_name, int ignored, int &amp;success)</code></li><li><code>matrix[] detailattrib(string geometry, string attribute_name, int ignored, int &amp;success)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if importing the attribute failed, the value of the\nattribute on success.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n<p><code>ignored</code>:\nSince details are unique, this should be set to 0.</p>\n<p><code>success</code>:\nSet to 1 if the import was successful, 0 if it failed due to no matching attribute or invalid number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detail\">detail</a><div class=\"related-summary\">Imports a detail attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "ignored",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "detailattribsize": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/detailattribsize\">detailattribsize</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the size of a geometry detail attribute.</p><ul><li><code>int detailattribsize(int opinput, string attribute_name)</code></li><li><code>int detailattribsize(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Otherwise, it is the tuple size of the attribute.  A vector, for example, has size 3.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        size;\n</code><code class=\"line\">// Get the size of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">size = detailattribsize(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "detailattribtype": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/detailattribtype\">detailattribtype</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type of a geometry detail attribute.</p><ul><li><code>int detailattribtype(int opinput, string attribute_name)</code></li><li><code>int detailattribtype(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the attribute can\u2019t be found.</p>\n<p>Otherwise:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>-1</code>: Unknown or not found type.\n</li>\n<li class=\"bullet \">\n<code>0</code>: Integer type\n</li>\n<li class=\"bullet \">\n<code>1</code>: Float type\n</li>\n<li class=\"bullet \">\n<code>2</code>: String type\n</li>\n<li class=\"bullet \">\n<code>3</code>: Integer Array type\n</li>\n<li class=\"bullet \">\n<code>4</code>: Float Array type\n</li>\n<li class=\"bullet \">\n<code>5</code>: String Array type\n</li>\n</ul>\n<p>NOTE:\nVectors are considered float type.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        type;\n</code><code class=\"line\">// Get the type of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">type = detailattribtype(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "detailattribtypeinfo": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/detailattribtypeinfo\">detailattribtypeinfo</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type info of a geometry attribute.</p><ul><li><code>string detailattribtypeinfo(int opinput, string attribute_name)</code></li><li><code>string detailattribtypeinfo(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>\"\"</code> if the attribute can\u2019t be found.</p>\n<p>Otherwise:\n<code>none</code>:\nNo transformations should be applied.\n<code>point</code>:\nScales, rotations, and translations should be applied.\n<code>hpoint</code>:\nA four-vector with scales, rotations, and translations applied.\n<code>vector</code>:\nScales and rotations should be applied.\n<code>normal</code>:\nScales and rotations should be applied.  Scales are applied with inverse-transpose.\n<code>color</code>:\nNo transformations.\n<code>matrix</code>:\nA 4\u00d74 matrix with scale, rotations, and translations applied.\n<code>quaternion</code>:\nA four-vector with rotations applied.\n<code>indexpair</code>:\nNo transformations.\n<code>integer</code>:\nInteger values that do not blend when points are averaged.\n<code>integer-blend</code>:\nInteger values that blend when points are averaged.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "detailintrinsic": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/detailintrinsic\">detailintrinsic</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a detail intrinsic from a geometry.</p><ul><li><code>int detailintrinsic(int opinput, string intrinsic)</code></li><li><code>int detailintrinsic(string geometry, string intrinsic)</code></li><li><code>string detailintrinsic(int opinput, string intrinsic)</code></li><li><code>string detailintrinsic(string geometry, string intrinsic)</code></li><li><code>float detailintrinsic(int opinput, string intrinsic)</code></li><li><code>float detailintrinsic(string geometry, string intrinsic)</code></li><li><code>vector2 detailintrinsic(int opinput, string intrinsic)</code></li><li><code>vector2 detailintrinsic(string geometry, string intrinsic)</code></li><li><code>vector detailintrinsic(int opinput, string intrinsic)</code></li><li><code>vector detailintrinsic(string geometry, string intrinsic)</code></li><li><code>vector4 detailintrinsic(int opinput, string intrinsic)</code></li><li><code>vector4 detailintrinsic(string geometry, string intrinsic)</code></li><li><code>matrix2 detailintrinsic(int opinput, string intrinsic)</code></li><li><code>matrix2 detailintrinsic(string geometry, string intrinsic)</code></li><li><code>matrix3 detailintrinsic(int opinput, string intrinsic)</code></li><li><code>matrix3 detailintrinsic(string geometry, string intrinsic)</code></li><li><code>matrix detailintrinsic(int opinput, string intrinsic)</code></li><li><code>matrix detailintrinsic(string geometry, string intrinsic)</code></li><li><code>int[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>int[] detailintrinsic(string geometry, string intrinsic)</code></li><li><code>string[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>string[] detailintrinsic(string geometry, string intrinsic)</code></li><li><code>float[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>float[] detailintrinsic(string geometry, string intrinsic)</code></li><li><code>vector2[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>vector2[] detailintrinsic(string geometry, string intrinsic)</code></li><li><code>vector[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>vector[] detailintrinsic(string geometry, string intrinsic)</code></li><li><code>vector4[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>vector4[] detailintrinsic(string geometry, string intrinsic)</code></li><li><code>matrix2[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>matrix2[] detailintrinsic(string geometry, string intrinsic)</code></li><li><code>matrix3[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>matrix3[] detailintrinsic(string geometry, string intrinsic)</code></li><li><code>matrix[] detailintrinsic(int opinput, string intrinsic)</code></li><li><code>matrix[] detailintrinsic(string geometry, string intrinsic)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if reading the intrinsic failed, or the value of the intrinsic if reading it succeeded.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>intrinsic</code>:\nThe name of the intrinsic (e.g. <code>pointattributes</code>, <code>pointcount</code>, or <code>bounds</code>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "determinant": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/determinant\">determinant</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Computes the determinant of the matrix.</p><ul><li><code>float determinant(matrix2 mat)</code></li><li><code>float determinant(matrix3 mat)</code></li><li><code>float determinant(matrix mat)</code></li></ul>\n\n\n\n<p>computes the determinant of the matrix</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "diffuse": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/diffuse\">diffuse</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the diffuse (Lambertian) illumination given the normalized\nsurface normal.</p><ul><li><code>vector diffuse(vector nml, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>vector diffuse(vector nml, vector V, float roughness, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>bsdf diffuse(...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf diffuse(float roughness, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf diffuse(vector nml, ...)</code></li><li><code>bsdf diffuse(vector nml, float roughness, ...)</code></li><li><code>bsdf diffuse(vector nml, vector ng, ...)</code></li><li><code>bsdf diffuse(vector nml, vector V, float roughness, ...)</code></li></ul>\n\n\n\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../pbr\">writing a PBR shader</a> for information on BSDFs.</p>\n<p>You can optionally specify a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#lightmask\">light mask</a>.</p>\n\n<h2 class=\"label heading\" id=\"bsdf-version\">\n            \n            BSDF version\n        </h2>\n<div class=\"content\" id=\"bsdf-version-body\">\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">bsdf diffuse()\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">bsdf diffuse(vector nml)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">bsdf diffuse(vector nml, vector ng)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/diffuse.png\">[Image \ud83d\udd17]\n</a></p>\n<p>Diffuse reflections. This BSDF has an albedo of 0.5. If your shader or\ngeometry has smooth normals (N and Ng differ) you should avoid the\nsecond signature <code>diffuse(vector nml)</code> since it assumes that the\nshading normal matches the geometric normal.</p>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/wirediffuse\">wirediffuse()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/translucent\">translucent()</a><div class=\"related-summary\">Returns the lambertian translucence given the surface normal.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "roughness"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "roughness"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "V",
                    "roughness"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "ng"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "V",
                    "roughness"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "diffuseBRDF": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/diffuseBRDF\">diffuseBRDF</a></h1><p class=\"summary\"></p><ul><li><code>float diffuseBRDF(vector L, vector N)</code></li><li><code>float diffuseBRDF(vector L, vector N, vector V, float rough)</code></li></ul>\n\n\n\n<p>Equivalent to clamp(dot(L, N), 0, 1).</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float diffuseBRDF(vector L, vector N, vector V, float rough)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p><a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\" title=\"Returns the computed BRDFs for the different lighting models used in VEX shading.\">specularBRDF()</a>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/phongBRDF\">phongBRDF()</a>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/blinnBRDF\">blinnBRDF()</a>,\nand <code>diffuseBRDF</code> return the computed BRDF for the\ndifferent lighting models used in VEX shading. You can use them in\ncustom <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> loops to replicate the lighting models of the\ncorresponding VEX lighting functions.</p>\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\" title=\"Returns the computed BRDFs for the different lighting models used in VEX shading.\">specularBRDF()</a> for some example code.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\">specularBRDF()</a><div class=\"related-summary\">Returns the computed BRDFs for the different lighting models used in VEX shading.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "L",
                    "N"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "L",
                    "N",
                    "V",
                    "rough"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "dihedral": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/dihedral\">dihedral</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span><span class=\"padder\"><span class=\"pillow\">quaternion</span></span></span><p class=\"summary\">Computes the rotation matrix or quaternion which rotates the vector a onto the vector b.</p><ul><li><code>vector4 dihedral(vector a, vector b)</code></li><li><code>matrix3 dihedral(vector a, vector b)</code></li></ul>\n\n\n\n<p>Computes the rotation matrix which rotates the vector <code>a</code> onto the vector <code>b</code>.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 dihedral(vector a, vector b)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Computes the quaternion which rotates the vector <code>a</code> onto the vector <code>b</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "dimport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/dimport\">dimport</a></h1><span><span class=\"padder\"><span class=\"pillow\">fog</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadedata</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Imports a variable from the displacement shader for the surface.</p><ul><li><code>int dimport(string name, int &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int dimport(string name, string &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int dimport(string name, float &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int dimport(string name, vector2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int dimport(string name, vector &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int dimport(string name, vector4 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int dimport(string name, matrix2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int dimport(string name, matrix3 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int dimport(string name, matrix &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Imports a variable from the displacement shader for the surface.</p>\n<p>Mantra runs the shaders for a surface in a fixed order:</p>\n<ol>\n<li>\n<p>Displacement</p>\n</li>\n<li>\n<p>Surface (possibly calling light shaders in <code>illuminance</code> loops)</p>\n</li>\n<li>\n<p>Fog (possibly calling light shaders in <code>illuminance</code> loops)</p>\n</li>\n</ol>\n<p>Once the displacement shader has run, you can use <code>dimport</code>\nto retrieve exported variables from it. Once the surface shader\nhas run, you can use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/simport\" title=\"Imports a variable sent by a surface shader in an illuminance loop.\">simport()</a> to retrieve exported variables\nfrom it.</p>\n<p>If the shader variable named by the first argument is defined and\nexported, the function returns 1 and puts the value in the second\nargument. Otherwise, it returns 0.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/simport\">simport()</a><div class=\"related-summary\">Imports a variable sent by a surface shader in an illuminance loop.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix2"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix3"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export float"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export int"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector4"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export string"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector2"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "distance": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/distance\">distance</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the distance between the two 3 or 4 dimensional point\narguments.</p><ul><li><code>float distance(vector2 pos1, vector2 pos2)</code></li><li><code>float distance(vector pos1, vector pos2)</code></li><li><code>float distance(vector4 pos1, vector4 pos2)</code></li></ul>\n\n\n\n<p>Returns the distance between the two 3 or 4 dimensional point\narguments.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/distance2\">distance2</a><div class=\"related-summary\">Returns the squared distance between the two 3 or 4 dimensional point\narguments.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "pos1",
                    "pos2"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos1",
                    "pos2"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos1",
                    "pos2"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "distance2": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/distance2\">distance2</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the squared distance between the two 3 or 4 dimensional point\narguments.</p><ul><li><code>float distance2(vector2 pos1, vector2 pos2)</code></li><li><code>float distance2(vector pos1, vector pos2)</code></li><li><code>float distance2(vector4 pos1, vector4 pos2)</code></li></ul>\n\n\n\n<p>Returns the squared distance between the two 3 or 4 dimensional point\narguments.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/distance\">distance</a><div class=\"related-summary\">Returns the distance between the two 3 or 4 dimensional point\narguments.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "pos1",
                    "pos2"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos1",
                    "pos2"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos1",
                    "pos2"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "dot": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/dot\">dot</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the dot product between the arguments.</p><ul><li><code>float dot(vector2 a, vector2 b)</code></li><li><code>float dot(vector a, vector b)</code></li><li><code>float dot(vector a, vector4 b)</code></li><li><code>float dot(vector4 a, vector b)</code></li><li><code>float dot(vector4 a, vector4 b)</code></li></ul>\n\n\n\n<p>Returns the dot product between the arguments. When 4 component vectors\nare specified, only the first three components are taken into\nconsideration.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector4",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "dsmpixel": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/dsmpixel\">dsmpixel</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span></span><p class=\"summary\">Reads the z-records stored in a pixel of a deep shadow map\nor deep camera map.</p><ul><li><code>int dsmpixel(string map, string channel, int x, int y, float[] &amp;values)</code></li><li><code>int dsmpixel(string map, string channel, int x, int y, vector[] &amp;values)</code></li><li><code>int dsmpixel(string map, string channel, int x, int y, vector4[] &amp;values)</code></li></ul>\n\n\n\n<p>Each pixel of a deep shadow map channel has multiple values.\nThis function will extract the list of the values associated with\nthe channel for the given pixel.</p>\n<p>Returns 1 on success and 0 on failure.\nIf the function fails, the <code>values</code> variable will <strong>not</strong> be modified,\nand so may be left uninitialized.</p>\n<p>A DSM will always have <code>Pz</code> and <code>Of</code> channels. The <code>Pz</code> channel stores the\nz-depth associated with each record. The <code>Of</code> channel stores the opacity.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/teximport\">teximport()</a><div class=\"related-summary\">Imports attributes from texture files.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "map",
                    "channel",
                    "x",
                    "y",
                    "values"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "channel",
                    "x",
                    "y",
                    "values"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "channel",
                    "x",
                    "y",
                    "values"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "efit": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/efit\">efit</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Takes the value in the range (omin, omax) and shifts it to the corresponding value in the new range (nmin, nmax).</p><ul><li><code>float efit(float value, float omin, float omax, float nmin, float nmax)</code></li><li><code>vector2 efit(vector2 value, vector2 omin, vector2 omax, float nmin, float nmax)</code></li><li><code>vector2 efit(vector2 value, vector2 omin, vector2 omax, vector2 nmin, vector2 nmax)</code></li><li><code>vector efit(vector value, vector omin, vector omax, float nmin, float nmax)</code></li><li><code>vector efit(vector value, vector omin, vector omax, vector nmin, vector nmax)</code></li><li><code>vector4 efit(vector4 value, vector4 omin, vector4 omax, float nmin, float nmax)</code></li><li><code>vector4 efit(vector4 value, vector4 omin, vector4 omax, vector4 nmin, vector4 nmax)</code></li></ul>\n\n\n\n<p>Takes the value in the range (<code>omin</code>, <code>omax</code>) and shifts it to the corresponding value in the new range (<code>nmin</code>, <code>nmax</code>). For example, <code>fit(.3, 0, 1, 10, 20)</code> would return 13.  This function does not clamp values to the given range (see <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../fit\">/vex/fit</a>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "eigenvalues": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/eigenvalues\">eigenvalues</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Computes the eigenvalues of a matrix.</p><ul><li><code>void eigenvalues(int &amp;nroot, matrix3 mat, vector &amp;real, vector &amp;imaginary)</code></li></ul>\n\n\n\n<p>Computes the eigenvalues of a 3\u00d73 matrix.  The <code>nroot</code> is filled with the number of real roots.  All roots are provided as a set of real/imaginary pairs in the two returned vectors.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "nroot",
                    "mat",
                    "real",
                    "imaginary"
                ],
                "args": [
                    "int",
                    "const matrix3",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "endswith": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/endswith\">endswith</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Indicates the string ends with the specified string.</p><ul><li><code>int endswith(string haystack, string needle)</code></li></ul>\n\n\n\n<p>Returns 1 if the string ends with the given string. 0 otherwise.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/startswith\">startswith()</a><div class=\"related-summary\">Returns 1 if the string starts with the specified string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "haystack",
                    "needle"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "environment": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/environment\">environment</a></h1><span><span class=\"padder\"><span class=\"pillow\">color</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the color of the environment texture.</p><ul><li><code>vector environment(string texture_filename, vector relect_dir, ...)</code></li><li><code>vector environment(string texture_filename, vector relect_dir, float filter_angle, ...)</code></li><li><code>vector environment(string texture_filename, vector relect_dir0, vector relect_dir1, vector relect_dir2, vector relect_dir3, ...)</code></li><li><code>vector4 environment(string texture_filename, vector relect_dir, ...)</code></li><li><code>vector4 environment(string texture_filename, vector relect_dir, float filter_angle, ...)</code></li><li><code>vector4 environment(string texture_filename, vector relect_dir0, vector relect_dir1, vector relect_dir2, vector relect_dir3, ...)</code></li></ul>\n\n\n\n<p>Returns the color of the environment texture in the direction given by the <code>reflect_dir</code> argument. The signatures that specify four vectors filter the map pixels found within the cone defined by the vectors.  Rather than specifying a filtering cone by providing four vectors, it is also possible to indicate an angle to filter over using the filter_angle argument with a single reflection direction.</p>\n<p>The environment function can also be used to look up intensity values in an IES photometric light map, with the correct angular mapping applied.</p>\n<p>NOTE:\nTo perform environment map lookups in object space, you\u2019ll need to first transform the direction vector using the vtransform() function.</p>\n<div class=\"code-container\">\n<code class=\"line\">vector dir = vtransform(\"space:current\", \"space:object\", {0, 1, 0});\n</code><code class=\"line\">vector clr = environment(\"sky.rat\", dir);\n</code>\n</div>\n<p>You can optionally specify <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#imagefilter\">filtering options</a> .</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "texture_filename",
                    "relect_dir"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "texture_filename",
                    "relect_dir",
                    "filter_angle"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "texture_filename",
                    "relect_dir0",
                    "relect_dir1",
                    "relect_dir2",
                    "relect_dir3"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "texture_filename",
                    "relect_dir"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "texture_filename",
                    "relect_dir",
                    "filter_angle"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "texture_filename",
                    "relect_dir0",
                    "relect_dir1",
                    "relect_dir2",
                    "relect_dir3"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "erf": {
        "added": "12.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/erf\">erf</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.0</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Gauss error function.</p><ul><li><code>float erf(float v)</code></li><li><code>vector2 erf(vector2 v)</code></li></ul>\n\n\n\n<p>The <a class=\"wp\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/http://en.wikipedia.org/wiki/Error_function\">Gauss error function<i class=\"fa fa-wikipedia-w\"></i></a>. Houdini uses the Boost\nlibrary\u2019s implementation internally.</p>\n<p>The erf(vector2) version computes the complex error function and returns\nthe complex result. This function is much slower than the erf(float)\nfunction for real values.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/erf_inv\">erf_inv()</a><div class=\"related-summary\">Inverse Gauss error function.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/erfc\">erfc()</a><div class=\"related-summary\">Gauss error function\u2019s complement.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            }
        ]
    },
    "erf_inv": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/erf_inv\">erf_inv</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Inverse Gauss error function.</p><ul><li><code>float erf_inv(float v)</code></li></ul>\n\n\n\n<p>The inverse of the <a class=\"wp\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/http://en.wikipedia.org/wiki/Error_function\">Gauss error function<i class=\"fa fa-wikipedia-w\"></i></a>.</p>\n<p><code>erf_inv(erf(v)) = v = erf(erf_inv(v))</code></p>\n<p>To generate a normally-distributed random number, <code>n</code>, with mean <code>mu</code> and standard deviation <code>sigma</code>,\nfrom a uniformly-distributed random number, <code>u</code>, between 0 and 1,</p>\n<p><code>n = mu + sqrt(2)*sigma*erf_inv(2*u - 1)</code></p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/erf\">erf()</a><div class=\"related-summary\">Gauss error function.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/erfc\">erfc()</a><div class=\"related-summary\">Gauss error function\u2019s complement.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "erfc": {
        "added": "12.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/erfc\">erfc</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.0</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Gauss error function\u2019s complement.</p><ul><li><code>float erfc(float v)</code></li></ul>\n\n\n\n<p>Equal to <code>1 - erf(v)</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/erf\">erf()</a><div class=\"related-summary\">Gauss error function.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/erf_inv\">erf_inv()</a><div class=\"related-summary\">Inverse Gauss error function.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "error": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/error\">error</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Reports a custom runtime VEX error.</p><ul><li><code>void error(string format, ...)</code></li></ul>\n\n\n\n<p>Reports a custom runtime VEX error.  This uses the same format string syntax as <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/printf\" title=\"Prints values to the console which started the VEX program.\">printf()</a>.</p>\n<p>If something can still be done as an acceptable fallback, instead of outright failing,\nit may be worth reporting a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/warning\" title=\"Reports a custom runtime VEX warning.\">warning()</a>, instead of an error.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>It\u2019s quite easy to accidentally report thousands of different errors.</p>\n</div>\n</div>\n</div>\n<p>Examples:</p>\n<div class=\"code-container\">\n<code class=\"line\">if (!pointattribtype(0,chs(\"nameattrib\")) != 2) {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0error(\"Name attribute %s must be a string attribute!\", chs(\"nameattrib\"));\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return;\n</code><code class=\"line\">}\n</code><code class=\"line\">if (chf(\"distance\") &lt; 0) {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0error(\"\")\n</code><code class=\"line\">}\n</code><code class=\"line\">float minimumValue = chf(\"min\");\n</code><code class=\"line\">float maximumValue = chf(\"max\");\n</code><code class=\"line\">if (minimumValue &gt;= maximumValue) {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0error(\"Minimum (%f) must be strictly less than maximum (%f)!  It's unclear what should be done.\", minimumValue, maximumValue);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return;\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/warning\">warning()</a><div class=\"related-summary\">Reports a custom runtime VEX warning.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/printf\">printf()</a><div class=\"related-summary\">Prints values to the console which started the VEX program.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "format"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true
            }
        ]
    },
    "eulertoquaternion": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/eulertoquaternion\">eulertoquaternion</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">quaternion</span></span></span><p class=\"summary\">Creates a vector4 representing a quaternion from euler angles.</p><ul><li><code>vector4 eulertoquaternion(vector rotations, int order)</code></li></ul>\n\n\n\n<p>Creates a vector4 representing a quaternion from a vector representing Euler rotations in X, Y, and Z.</p>\n<p>The angles are in radians.  Use the <code>radians()</code> function to convert degrees into radians.</p>\n<p>Specify the rotation order with the <code>order</code> integer. Use the constants defined in <code>$HH/vex/include/math.h</code> (for example, <code>XFORM_XYZ</code>).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/dihedral\">dihedral</a><div class=\"related-summary\">Computes the rotation matrix or quaternion which rotates the vector a onto the vector b.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/qconvert\">qconvert</a><div class=\"related-summary\">Converts a quaternion represented by a vector4 to a matrix3 representation.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/quaternion\">quaternion</a><div class=\"related-summary\">Creates a vector4 representing a quaternion.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "rotations",
                    "order"
                ],
                "args": [
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "eval_bsdf": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/eval_bsdf\">eval_bsdf</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Evaluates a bsdf given two vectors.</p><ul><li><code>vector eval_bsdf(bsdf b, vector viewer, vector light, ...)</code></li><li><code>vector eval_bsdf(bsdf b, vector viewer, vector light, int mask, ...)</code></li><li><code>vector eval_bsdf(bsdf b, vector viewer, vector light, float &amp;pdf, int mask, ...)</code></li><li><code>vector eval_bsdf(bsdf b, vector viewer, vector light, vector mask, ...)</code></li><li><code>vector eval_bsdf(bsdf b, vector viewer, vector light, vector pdf, int mask, ...)</code></li><li><code>vector eval_bsdf(bsdf b, vector viewer, vector light, vector normal, float &amp;pdf, int mask, ...)</code></li></ul>\n\n\n\n<p><code>viewer</code>:\nVector toward viewer.\n<code>light</code>:\nVector toward light.\n<code>normal</code>:\nSurface normal.\n<code>mask</code>:\nA bitmask indicating which types of bounces to evaluate.\n<code>pdf</code>:\nThe sampling pdf for the given directions, scaled by the albedo.</p>\n<p>The <code>eval_bsdf</code> function passes keyword arguments to the BSDF being\nevaluated.  For custom BSDFs these keyword arguments are bound to shader\narguments (e.g. indicating whether the BSDF is being evaluated for direct or\nindirect illumination).  It\u2019s also possible for a BSDF to pass information back\nto <code>eval_bsdf</code>.  To indicate that a keyword argument value should be imported\nfrom the BSDF prefix the keyword with \"import:\".  For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">v = eval_bsdf(F, inI, dir,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\"direct\", 0,                        // Specify indirect illumination\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\"import:sssmfp\", sssmfp,        // Read the exported sssmfp parameter\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0...\n</code><code class=\"line\">);\n</code>\n</div>\n<p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/albedo\">albedo()</a><div class=\"related-summary\">Returns the albedo (percentage of reflected light) for a bsdf given the outgoing light direction.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_bsdf\">sample_bsdf()</a><div class=\"related-summary\">Samples a bsdf.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/emission_bsdf\">emission_bsdf()</a><div class=\"related-summary\">Returns the emissive component of a bsdf.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "b",
                    "viewer",
                    "light",
                    "pdf",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "const vector",
                    "float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "light",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "light",
                    "normal",
                    "pdf",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "const vector",
                    "const vector",
                    "float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "light",
                    "pdf",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "light",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "light"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "exp": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/exp\">exp</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the exponential function of the argument.</p><ul><li><code>float exp(float value)</code></li><li><code>vector2 exp(vector2 value)</code></li><li><code>vector exp(vector value)</code></li><li><code>vector4 exp(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the exponential function of the argument.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "expand_udim": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/expand_udim\">expand_udim</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Perform UDIM or UVTILE texture filename expansion.</p><ul><li><code>string expand_udim(float u, float v, string path, ...)</code></li></ul>\n\n\n\n<p>Scans the input path for special conversion characters to perform either UDIM\nor UVTILE style filename expansion.</p>\n<p>This is similar to <code>texprintf()</code>, with two significant differences:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nThere are no variadic print arguments. Only UDIM/UVTILE expansion is performed.\n</li>\n<li class=\"bullet \">\nIf UDIM/UVTILE expansion was performed, the function checks to see if the texture exists and is accessible.  If the texture doesn\u2019t exist, the string returned will be an empty string.  If the path had no UDIM/UVTILE control sequences, the string will be returned unmodified.\n</li>\n</ul>\n<p>The special conversion sequences are:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>%(UDIM)d</code>:\nThe UDIM coordinate, as computed by <code>1000 + int(u)+1 + int(v)*10</code>\n</li>\n<li class=\"bullet \">\n<code>%(U)d</code>:\nThe UVTILE style u-coordinate (<code>int(u)+1</code>)\n</li>\n<li class=\"bullet \">\n<code>%(V)d</code>:\nThe UVTILE style v-coordinate (<code>int(v)+1</code>)\n</li>\n<li class=\"bullet \">\n<code>%(UVTILE)d</code>:\nExpands to both u and v coordinates in the form <code>u%d_v%d</code>.\n</li>\n</ul>\n<p>The \"d\" conversion specifier for texture identification can be modified with\nfield modifiers.  For example <code>%(U)02d</code> or <code>%(V)04d</code>.</p>\n<p>You can specify keyword argument pairs to control the behavior of this function.</p>\n<p>\"checkfile\":\n1 = on, 0 = off (default is 1).  If the <code>checkfile</code> option is enabled, the\n<code>expand_udim()</code> function will check whether the expanded file is actually a\ntexture map.  If the map doesn\u2019t exist, or isn\u2019t readable as a texture, the\nfunction will silently return an empty string (\"\").</p>\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>expand_udim(3.1, 4.15, \"map_%(UDIM)d.rat\")</code> - Returns \"map_1044.rat\"\n</li>\n<li class=\"bullet \">\n<code>expand_udim(3.1, 4.15, \"map_%(U)02d_%(V)02d.rat\")</code> - Returns \"map_04_05.rat\"\n</li>\n<li class=\"bullet \">\n<code>expand_udim(3.14, 11.5, \"map_u%(U)d_v%(V)d.rat\")</code> - Returns \"map_u4_v12.rat\"\n</li>\n<li class=\"bullet \">\n<code>expand_udim(3.14, 11.5, \"missing_file%(UDIM)d.rat\")</code> - Returns \"\" for missing files.\n</li>\n<li class=\"bullet \">\n<code>expand_udim(3.14, 11.5, \"missing_file%(UDIM)d.rat\", \"checkfile\", 0)</code> - Returns \"missing_file1044.rat\" since \"checkfile\" is disabled.\n</li>\n<li class=\"bullet \">\n<code>expand_udim(3.14, 11.5, \"/path/file.rat\")</code> - Returns \"/path/file.rat\" whether the file exists or not since there are no UDIM/UVTILE expansions.\n</li>\n</ul>\n<div class=\"code-container\">\n<code class=\"line\">// sprintf() will leave the %(UDIM)d format sequence unmodified.\n</code><code class=\"line\">string map = sprintf(\"%s/%s_%(UDIM)d.rat\", texture_path, texture_base);\n</code><code class=\"line\">// Expand the %(UDIM)d, returning an empty string if the map doesn't exist.\n</code><code class=\"line\">map = expand_udim(u, v, map);\n</code><code class=\"line\">if (map != \"\")\n</code><code class=\"line\">Cf = texture(map, u, v);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/texprintf\">texprintf()</a><div class=\"related-summary\">Similar to sprintf, but does expansion of UDIM or UVTILE texture filename expansion.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/texture\">texture()</a><div class=\"related-summary\">Computes a filtered sample of the texture map specified.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u",
                    "v",
                    "path"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "expandedgegroup": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/expandedgegroup\">expandedgegroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int[] expandedgegroup(int input, string groupname)</code></li><li><code>int[] expandedgegroup(string filename, string groupname)</code></li></ul>\n\n\n\n<p>Returns a list of point pairs of the edges in the specified group of a geometry file.</p>\n<p>This can use ad-hoc groups, like <code>0</code> or <code>p0-1</code>.  It matches the SOP group naming convention, in particular that an empty string means all edges.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/inedgegroup\">inedgegroup()</a><div class=\"related-summary\">Returns 1 if the edge specified by the point pair is in the group specified by the string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nedgesgroup\">nedgesgroup()</a><div class=\"related-summary\">Returns the number of edges in the group.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "groupname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "expandpointgroup": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/expandpointgroup\">expandpointgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int[] expandpointgroup(int input, string groupname)</code></li><li><code>int[] expandpointgroup(string filename, string groupname)</code></li></ul>\n\n\n\n<p>Returns a list of points in the specified group of a geometry file.</p>\n<p>This can use ad-hoc groups, like <code>0-3</code> or <code>@Cd.x&gt;0.5</code>.  It matches the SOP\ngroup naming convention, in particular that an empty string means all points.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/inpointgroup\">inpointgroup()</a><div class=\"related-summary\">Returns 1 if the point specified by the point number is in the group specified by the string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/npointsgroup\">npointsgroup()</a><div class=\"related-summary\">Returns the number of points in the group.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hasattrib\">hasattrib()</a><div class=\"related-summary\">Checks whether a geometry attribute exists.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "groupname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "expandprimgroup": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/expandprimgroup\">expandprimgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int[] expandprimgroup(int input, string groupname)</code></li><li><code>int[] expandprimgroup(string filename, string groupname)</code></li></ul>\n\n\n\n<p>Returns a list of primitives in the specified group of a geometry file.</p>\n<p>This can use ad-hoc groups, like <code>0-3</code> or <code>@Cd.x&gt;0.5</code>.  It matches the SOP\ngroup naming convention, in particular that an empty string means all\nprimitives.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/inprimgroup\">inprimgroup()</a><div class=\"related-summary\">Returns 1 if the primitive specified by the primitive number is in the group specified by the string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nprimitivesgroup\">nprimitivesgroup()</a><div class=\"related-summary\">Returns the number of primitives in the group.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hasattrib\">hasattrib()</a><div class=\"related-summary\">Checks whether a geometry attribute exists.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "groupname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "fastshadow": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fastshadow\">fastshadow</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Sends a ray from the position P along the direction specified by the\ndirection D.</p><ul><li><code>float fastshadow(vector P, vector D, float bias, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Sends a ray from the position <code>P</code> along the direction specified by the\ndirection <code>D</code>. The length of the <code>D</code> vector represents the farthest\ndistance considered when check for occlusion.</p>\n<p>Returns 1 if there are no occluding objects found, or 0 if the ray hit\nan object in between.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#rayopts\">optional parameters</a> .</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "P",
                    "D",
                    "bias"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "filamentsample": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/filamentsample\">filamentsample</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Samples the velocity field defined by a set of <a by=\"\" class=\"link \" filaments\"=\"\" href=\"../../dopparticles/filaments\" polylines.\"=\"\" represented=\"\" title=\"Swirls particles based on the simulated drift of \">vortex filaments</a>.</p><ul><li><code>vector filamentsample(int inputnum, vector position)</code></li><li><code>vector filamentsample(string filename, vector position)</code></li></ul>\n\n\n\n<p>Samples the velocity field defined by a set of vortex filaments at the\nspecified <code>position</code>. The <code>inputnum</code> or <code>filename</code> parameter specifies the\ngeometry to fetch the filament curves from. The <code>strength</code> and <code>thickness</code>\nprimitive attributes can be used on the geometry to customize the strength and\nthickness of each filament. Returns the zero vector if <code>inputnum</code> is out of\nrange or the <code>filename</code> is invalid.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "position"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "position"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "file_stat": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/file_stat\">file_stat</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns file system status for a given file.</p><ul><li><code>int file_stat(string filename, int[] &amp;stat_data, ...)</code></li></ul>\n\n\n\n<p>This function returns an array of integer data representing the file system\ninformation for the given file.</p>\n<p>The file.h include file has defines describing the components of the array, but also a more convenient version of the file_stat() function which returns a much more easy to use struct.</p>\n<p>The function takes keyword arguments to control the behavior:</p>\n\n<p>\n\"usecache\"\n        \n<div class=\"content\">\n<p>1 = on, 0 = off (default is 0).  If this option is on, the function will use a persistent cache to store results of the function.  The cache is persistent over the entire run of the application.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">#include &lt;file.h&gt;\n</code><code class=\"line\">\n</code><code class=\"line\">int file_size(string name)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0stat        info(name);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return file_stat(name)-&gt;st_size;\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">int file_exists(string name)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Use cached file_stat() results\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return cached_file_stat(name)-&gt;isValid();\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">int file_isdir(string name)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return file_stat(name)-&gt;isDir();\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "stat_data"
                ],
                "args": [
                    "const string",
                    "int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "filtershadow": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/filtershadow\">filtershadow</a></h1><span><span class=\"padder\"><span class=\"pillow\">shadow</span></span></span><p class=\"summary\">Sends a ray from the position P along direction D.</p><ul><li><code>vector filtershadow(vector P, vector D, float bias, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Sends a ray from the position <code>P</code> along direction <code>D</code>. The length of\nthe <code>D</code> vector represents the farthest distance considered when check\nfor occlusion.</p>\n<p>Each occluding surface will be evaluated and its opacity will be added\nto the total occlusion. The return code of this function is the total\nocclusion of shaded surfaces between the point <code>P</code> and the point\nspecified by <code>P</code> + <code>D</code>.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#rayopts\">optional parameters</a> .</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "P",
                    "D",
                    "bias"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "filterstep": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/filterstep\">filterstep</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the anti-aliased weight of the step function.</p><ul><li><code>float filterstep(float edge, float x, ...)</code></li><li><code>float filterstep(float edge, float x0, float x1, ...)</code></li></ul>\n\n\n\n<p>Returns the anti-aliased weight of the step function. The\nstep function returns 0 if x is less than edge and 1 if x is greater\nthan edge. <code>filterstep</code> returns a fraction representing the\nfiltered area under the step function.  Filtering is computed using\nderivatives <code>Du()</code> and <code>Dv()</code> which are only non-zero in shading and COP\ncontexts, so <code>filterstep</code> will not perform filtering in other contexts.</p>\n<p>You can optionally specify a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#imagefilter\">filter kernal and\nwidth</a>  using the \"filter\" and \"width\"\nadditional arguments in the same fashion as for <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/texture\" title=\"Computes a filtered sample of the texture map specified.\">texture</a>\nfunctions.</p>\n<div class=\"code-container\">\n<code class=\"line\">f = filterstep(0.5, s+t, \"filter\", \"gauss\", \"width\", 2);\n</code>\n</div>\n<p>The <code>filterstep(float edge, x, ...)</code> form is roughly equivalent to:</p>\n<div class=\"code-container\">\n<code class=\"line\">f = filterstep(edge, x, x + abs(Du(x) + Dv(x)));\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "edge",
                    "x"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "edge",
                    "x0",
                    "x1"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "find": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/find\">find</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Finds an item in an array or string.</p><ul><li><code>int find(string array, string search)</code></li><li><code>int find(string array, string search, int start)</code></li><li><code>int find(string array, string search, int start, int end)</code></li><li><code>int find(int[] array, int search)</code></li><li><code>int find(int[] array, int search, int start)</code></li><li><code>int find(int[] array, int search, int start, int end)</code></li><li><code>int find(string[] array, string search)</code></li><li><code>int find(string[] array, string search, int start)</code></li><li><code>int find(string[] array, string search, int start, int end)</code></li><li><code>int find(float[] array, float search)</code></li><li><code>int find(float[] array, float search, int start)</code></li><li><code>int find(float[] array, float search, int start, int end)</code></li><li><code>int find(vector2[] array, vector2 search)</code></li><li><code>int find(vector2[] array, vector2 search, int start)</code></li><li><code>int find(vector2[] array, vector2 search, int start, int end)</code></li><li><code>int find(vector[] array, vector search)</code></li><li><code>int find(vector[] array, vector search, int start)</code></li><li><code>int find(vector[] array, vector search, int start, int end)</code></li><li><code>int find(vector4[] array, vector4 search)</code></li><li><code>int find(vector4[] array, vector4 search, int start)</code></li><li><code>int find(vector4[] array, vector4 search, int start, int end)</code></li><li><code>int find(matrix2[] array, matrix2 search)</code></li><li><code>int find(matrix2[] array, matrix2 search, int start)</code></li><li><code>int find(matrix2[] array, matrix2 search, int start, int end)</code></li><li><code>int find(matrix3[] array, matrix3 search)</code></li><li><code>int find(matrix3[] array, matrix3 search, int start)</code></li><li><code>int find(matrix3[] array, matrix3 search, int start, int end)</code></li><li><code>int find(matrix[] array, matrix search)</code></li><li><code>int find(matrix[] array, matrix search, int start)</code></li><li><code>int find(matrix[] array, matrix search, int start, int end)</code></li><li><code>int[] find(string array, string search)</code></li><li><code>int[] find(string array, string search, int start)</code></li><li><code>int[] find(string array, string search, int start, int end)</code></li><li><code>int[] find(int[] array, int search)</code></li><li><code>int[] find(int[] array, int search, int start)</code></li><li><code>int[] find(int[] array, int search, int start, int end)</code></li><li><code>int[] find(string[] array, string search)</code></li><li><code>int[] find(string[] array, string search, int start)</code></li><li><code>int[] find(string[] array, string search, int start, int end)</code></li><li><code>int[] find(float[] array, float search)</code></li><li><code>int[] find(float[] array, float search, int start)</code></li><li><code>int[] find(float[] array, float search, int start, int end)</code></li><li><code>int[] find(vector2[] array, vector2 search)</code></li><li><code>int[] find(vector2[] array, vector2 search, int start)</code></li><li><code>int[] find(vector2[] array, vector2 search, int start, int end)</code></li><li><code>int[] find(vector[] array, vector search)</code></li><li><code>int[] find(vector[] array, vector search, int start)</code></li><li><code>int[] find(vector[] array, vector search, int start, int end)</code></li><li><code>int[] find(vector4[] array, vector4 search)</code></li><li><code>int[] find(vector4[] array, vector4 search, int start)</code></li><li><code>int[] find(vector4[] array, vector4 search, int start, int end)</code></li><li><code>int[] find(matrix2[] array, matrix2 search)</code></li><li><code>int[] find(matrix2[] array, matrix2 search, int start)</code></li><li><code>int[] find(matrix2[] array, matrix2 search, int start, int end)</code></li><li><code>int[] find(matrix3[] array, matrix3 search)</code></li><li><code>int[] find(matrix3[] array, matrix3 search, int start)</code></li><li><code>int[] find(matrix3[] array, matrix3 search, int start, int end)</code></li><li><code>int[] find(matrix[] array, matrix search)</code></li><li><code>int[] find(matrix[] array, matrix search, int start)</code></li><li><code>int[] find(matrix[] array, matrix search, int start, int end)</code></li></ul>\n\n\n\n<p>Returns the location of the search term in the string or array.</p>\n<p>If it cannot be found, it returns <code>-len(array)-1</code>.  You should test for failure by\ntesting to see if negative.  This result is chosen to ensure indexing with\na failed find can be detected as an error.  (-1 would refer to the last\nelement).</p>\n<p>An empty string is never found in a string.  This differs from Python\nwhere empty strings are found at the start of the string.</p>\n<p>The methods that take stop and end values constrain the search to those\nranges.  The end index is not included in the search, so should be\n<code>len(array)</code> to search the entire array.  The start index is included.</p>\n<p>Negative indices are not supported for the find range.</p>\n<p>The versions that return an integer array return all found indices.\nIt will return an empty array if none are found.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/len\">len()</a><div class=\"related-summary\">Returns the length of an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/push\">push()</a><div class=\"related-summary\">Adds an item to an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/append\">append()</a><div class=\"related-summary\">Adds an item to an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize()</a><div class=\"related-summary\">Sets the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const matrix2[]",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const matrix2[]",
                    "const matrix2",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix2[]",
                    "const matrix2",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const matrix3[]",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const matrix3[]",
                    "const matrix3",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix3[]",
                    "const matrix3",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const matrix[]",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const matrix[]",
                    "const matrix",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix[]",
                    "const matrix",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const float[]",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const float[]",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const float[]",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const int[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const int[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const vector4[]",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const vector4[]",
                    "const vector4",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector4[]",
                    "const vector4",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const string[]",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const string[]",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const vector2[]",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const vector2[]",
                    "const vector2",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector2[]",
                    "const vector2",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const vector[]",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const vector[]",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector[]",
                    "const vector",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const matrix2[]",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const matrix2[]",
                    "const matrix2",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix2[]",
                    "const matrix2",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const matrix3[]",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const matrix3[]",
                    "const matrix3",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix3[]",
                    "const matrix3",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const matrix[]",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const matrix[]",
                    "const matrix",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix[]",
                    "const matrix",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const float[]",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const float[]",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const float[]",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const int[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const int[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const vector4[]",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const vector4[]",
                    "const vector4",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector4[]",
                    "const vector4",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const string[]",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const string[]",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const vector2[]",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const vector2[]",
                    "const vector2",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector2[]",
                    "const vector2",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search"
                ],
                "args": [
                    "const vector[]",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start"
                ],
                "args": [
                    "const vector[]",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "array",
                    "search",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector[]",
                    "const vector",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            }
        ]
    },
    "findattribval": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/findattribval\">findattribval</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns element index where an integer or string attribute has a certain value.</p><ul><li><code>int findattribval(int opinput, string class, string attribute_name, int value)</code></li><li><code>int findattribval(int opinput, string class, string attribute_name, int value, int which=0)</code></li><li><code>int findattribval(int opinput, string class, string attribute_name, string value)</code></li><li><code>int findattribval(int opinput, string class, string attribute_name, string value, int which=0)</code></li><li><code>int findattribval(string geometry, string class, string attribute_name, int value)</code></li><li><code>int findattribval(string file, string class, string attribute_name, int value, int which=0)</code></li><li><code>int findattribval(string geometry, string class, string attribute_name, string value)</code></li><li><code>int findattribval(string file, string class, string attribute_name, string value, int which=0)</code></li></ul>\n\n\n\n<p>Returns element index where an integer or string attribute has a certain value.</p>\n<p>The element index is a point number, primitive number, etc, that can be used in\nGet Attribute to fetch other properties of the element.  -1 is returned if no\nelements have the search value.</p>\n<p>If more than one element matches, the <code>which</code> parameter can be used to\nselect one of them.  0 refers to the first match.</p>\n<p><code>opinput</code>:\nWhich input to the current node.\n<code>file</code>:\nA geometry file on disk or an op: operator reference.\n<code>class</code>:\nWhat type of attribute: <code>detail</code>, <code>primitive</code>, <code>point</code>, or <code>vertex</code>.\n<code>attribute_name</code>:\nThe name of the attribute, ie <code>P</code> or <code>Cd</code>.\n<code>value</code>:\nThe value to search for.  Must be of the same type as the attribute.\n<code>which</code>:\nIf more than one element matches, which one to return.  Use\n<code>findattribvalcount</code> to determine how many matched.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name",
                    "value",
                    "which=0"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name",
                    "value",
                    "which=0"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "class",
                    "attribute_name",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "class",
                    "attribute_name",
                    "value",
                    "which=0"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "class",
                    "attribute_name",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "class",
                    "attribute_name",
                    "value",
                    "which=0"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "findattribvalcount": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/findattribvalcount\">findattribvalcount</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns number of elements where an integer or string attribute has a certain value.</p><ul><li><code>int findattribvalcount(int opinput, string class, string attribute_name, int value)</code></li><li><code>int findattribvalcount(int opinput, string class, string attribute_name, string value)</code></li><li><code>int findattribvalcount(string file, string class, string attribute_name, int value)</code></li><li><code>int findattribvalcount(string file, string class, string attribute_name, string value)</code></li></ul>\n\n\n\n<p>Returns the number of elements that has that integer or string value set on the given attribute name.</p>\n<p><code>opinput</code>:\nWhich input to the current node.\n<code>file</code>:\nA geometry file on disk or an op: operator reference.\n<code>class</code>:\nWhat type of attribute: <code>detail</code>, <code>primitive</code>, <code>point</code>, or <code>vertex</code>.\n<code>attribute_name</code>:\nThe name of the attribute, ie <code>P</code> or <code>Cd</code>.\n<code>value</code>:\nThe value to match.  Must be of the same type as the attribute.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "class",
                    "attribute_name",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "class",
                    "attribute_name",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "finput": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/finput\">finput</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_color</span></span></span><p class=\"summary\">Returns fully filtered pixel input.</p><ul><li><code>float finput(int component, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float finput(int input_number, int planeindex, int component, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float finput(int input_number, int planeindex, int arrayindex, int component, int u, int v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float finput(int input_number, int planeindex, int arrayindex, int component, float u, float v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float finput(int input_number, int planeindex, int component, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float finput(int component, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector finput(int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector finput(int input_number, int planeindex, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector finput(int input_number, int planeindex, int arrayindex, int u, int v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector finput(int input_number, int planeindex, int arrayindex, float u, float v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector finput(int input_number, int planeindex, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector finput(float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 finput(int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 finput(int input_number, int planeindex, int u, int v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 finput(int input_number, int planeindex, int arrayindex, int u, int v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 finput(int input_number, int planeindex, int arrayindex, float u, float v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 finput(int input_number, int planeindex, float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 finput(float u, float v, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p><code>finput</code> returns fully filtered pixel input.</p>\n<p>Point sampled input functions should be used whenever discrete pixel\nvalues are being modified, since these functions are much faster.\nFiltered functions should be used whenever UV coordinates are being\ntransformed or deformed. If multiple subsamples are being read and\ncombined, bilinear lookups can produce a similar result to finput but\nmuch faster.</p>\n<p>finput() assumes realtively continous sampling over the image. It uses\nthe derivatives of its coordinates to determine the size of the area to\nsample. If it is used to erratically sample from pixel to pixel, it will\nreturn odd results and perform poorly. It is best to use this function\nwith well-behaved, continous sampling (such as transforms and smooth\ndeformations).</p>\n<p>Each function may take either floating point or integer UV coordinates.\nIf floating point UVs are used, the values are interpreted as 0-1 UV\nvalues; that is, (0.5, 0.5) is the center of the image. If integer UVs\nare used, the values are considered to be in pixel units, ranging from\n(0,0) to (XRES-1, YRES-1).</p>\n<p>Each input function can return a float, vector or vector4 value. If the\nchannel does not exist, the value returned for it will be 0. Whenever\npossible, use the vector versions rather that multiple float versions.</p>\n<p>There are three different complexity levels for each input function.</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nThe first level specifies only UV parameters.\n</li>\n<li class=\"bullet \">\nThe second specifies the input #, plane # and UV parameters.\n</li>\n<li class=\"bullet \">\nThe last level specifies all the parameters: input #, plane #, array\nindex, UV and frame #.\n</li>\n</ul>\n<p>If not specified in the function, the input number is always 0, the\nplane index is the current cooked plane, the array index is the\ncurrently cooked array index, and the frame is the current frame. So,\ncinput(u, v) is the same as cinput(0, PL, u,v) is the same as cinput(0,\nPL, AI, u,v, F).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/cinput\">cinput</a><div class=\"related-summary\">Returns point sampled input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/binput\">binput</a><div class=\"related-summary\">Returns bilinearly sampled input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ninput\">ninput</a><div class=\"related-summary\">Reads a pixel and its eight neighbors into a 3\u00d73 matrix.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "component",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "component",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "component",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "component",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "component",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "component",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "fit": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fit\">fit</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Takes the value in the range (omin, omax) and shifts it to the corresponding value in the new range (nmin, nmax).</p><ul><li><code>float fit(float value, float omin, float omax, float nmin, float nmax)</code></li><li><code>vector2 fit(vector2 value, vector2 omin, vector2 omax, vector2 nmin, vector2 nmax)</code></li><li><code>vector fit(vector value, vector omin, vector omax, vector nmin, vector nmax)</code></li><li><code>vector4 fit(vector4 value, vector4 omin, vector4 omax, vector4 nmin, vector4 nmax)</code></li></ul>\n\n\n\n<p>Takes the value in the range (<code>omin</code>, <code>omax</code>) and shifts it to the corresponding value in the new range (<code>nmin</code>, <code>nmax</code>). For example, <code>fit(.3, 0, 1, 10, 20)</code> would return 13.  If a given value is clamped to the range (<code>omin</code>, <code>omax</code>) before fitting is performed, the resulting value will be guaranteed to be in the range (<code>nmin</code>, <code>nmax</code>).  For unclamped values please see <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../efit\">/vex/efit</a>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value",
                    "omin",
                    "omax",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "fit01": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fit01\">fit01</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">interp</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Takes the value in the range (0, 1) and shifts it to the corresponding value in the new range (<code>nmin</code>, <code>nmax</code>).</p><ul><li><code>float fit01(float value, float nmin, float nmax)</code></li><li><code>vector2 fit01(vector2 value, vector2 nmin, vector2 nmax)</code></li><li><code>vector fit01(vector value, vector nmin, vector nmax)</code></li><li><code>vector4 fit01(vector4 value, vector4 nmin, vector4 nmax)</code></li></ul>\n\n\n\n<p>Takes the value in the range (0, 1) and shifts it to the corresponding value in the new range (<code>nmin</code>, <code>nmax</code>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "fit10": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fit10\">fit10</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">interp</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Takes the value in the range (1, 0) and shifts it to the corresponding value in the new range (<code>nmin</code>, <code>nmax</code>).</p><ul><li><code>float fit10(float value, float nmin, float nmax)</code></li><li><code>vector2 fit10(vector2 value, vector2 nmin, vector2 nmax)</code></li><li><code>vector fit10(vector value, vector nmin, vector nmax)</code></li><li><code>vector4 fit10(vector4 value, vector4 nmin, vector4 nmax)</code></li></ul>\n\n\n\n<p>Takes the value in the range (1, 0) and shifts it to the corresponding value in the new range (<code>nmin</code>, <code>nmax</code>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "fit11": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fit11\">fit11</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">interp</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Takes the value in the range (-1, 1) and shifts it to the corresponding value in the new range (<code>nmin</code>, <code>nmax</code>).</p><ul><li><code>float fit11(float value, float nmin, float nmax)</code></li><li><code>vector2 fit11(vector2 value, vector2 nmin, vector2 nmax)</code></li><li><code>vector fit11(vector value, vector nmin, vector nmax)</code></li><li><code>vector4 fit11(vector4 value, vector4 nmin, vector4 nmax)</code></li></ul>\n\n\n\n<p>Takes the value in the range (-1, 1) and shifts it to the corresponding value in the new range (<code>nmin</code>, <code>nmax</code>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value",
                    "nmin",
                    "nmax"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "floor": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/floor\">floor</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the largest integer less than or equal to the argument.</p><ul><li><code>int floor(float value)</code></li><li><code>float floor(float value)</code></li><li><code>vector2 floor(vector2 value)</code></li><li><code>vector floor(vector value)</code></li><li><code>vector4 floor(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the largest integer less than or equal to the argument</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "flownoise": {
        "added": "12.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/flownoise\">flownoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Generates 1D and 3D Perlin Flow Noise from 3D and 4D data.</p><ul><li><code>float flownoise(float x, float y, float flow)</code></li><li><code>float flownoise(vector xyz, float flow)</code></li><li><code>float flownoise(vector4 xyzt, float flow)</code></li><li><code>vector flownoise(float x, float y, float flow)</code></li><li><code>vector flownoise(vector xyz, float flow)</code></li><li><code>vector flownoise(vector4 xyzt, float flow)</code></li></ul>\n\n\n\n<p>This operator generates 1D and 3D Perlin Flow noise from 3D and 4D data.\nThere are two forms of Perlin flow noise: a non-periodic noise which changes\nrandomly throughout the N-dimensional space, and a periodic form which\nrepeats itself over a given range of the space. The periodic form can be\nused to generate patterns which tile over N-dimensional space, such as a\nnoise-based texture map which repeats seamlessly.</p>\n<p>The noise has a range of (0, 1) with a median value of 0.5. The\ndistribution of the noise depends on the dimension, with higher\ndimensions approaching a Gaussian distribution of noise values.</p>\n<p>Flow noise is very similar to Perlin noise, as in\n<a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/vop/periodicnoise\" title=\"Generates 1D and 3D Perlin noise from 1D, 3D and 4D data.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/VOP/periodicnoise.svg\">[Image \ud83d\udd17]</a>Periodic Noise</a>, but with an extra flow parameter.  The flow\nparameter can be thought of as an extra dimension, but a dimension\nwhose period is always 1.  Moving through the flow dimension rotates\nthe noise vectors rather than adjusting slices through a noise space, which generates a more flowing appearance to the animation.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/noise\">noise</a><div class=\"related-summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x",
                    "y",
                    "flow"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyzt",
                    "flow"
                ],
                "args": [
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyz",
                    "flow"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x",
                    "y",
                    "flow"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyzt",
                    "flow"
                ],
                "args": [
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyz",
                    "flow"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "flowpnoise": {
        "added": "12.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/flowpnoise\">flowpnoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</p><ul><li><code>float flowpnoise(float x, float y, int px, int py, float flow)</code></li><li><code>float flowpnoise(vector xyz, int px, int py, int pz, float flow)</code></li><li><code>float flowpnoise(vector xyz, vector p, float flow)</code></li><li><code>float flowpnoise(vector4 xyzt, int px, int py, int pz, int pt, float flow)</code></li><li><code>float flowpnoise(vector4 xyzt, vector4 p, float flow)</code></li><li><code>vector flowpnoise(float x, float y, int px, int py, float flow)</code></li><li><code>vector flowpnoise(vector xyz, int px, int py, int pz, float flow)</code></li><li><code>vector flowpnoise(vector xyz, vector p, float flow)</code></li><li><code>vector flowpnoise(vector4 xyzt, int px, int py, int pz, int pt, float flow)</code></li><li><code>vector flowpnoise(vector4 xyzt, vector4 p, float flow)</code></li></ul>\n\n\n\n<p>This operator generates 1D and 3D Perlin Flow noise from 3D and 4D data.\nThere are two forms of Perlin flow noise: a non-periodic noise which changes\nrandomly throughout the N-dimensional space, and a periodic form which\nrepeats itself over a given range of the space. The periodic form can be\nused to generate patterns which tile over N-dimensional space, such as a\nnoise-based texture map which repeats seamlessly.</p>\n<p>The noise has a range of (0, 1) with a median value of 0.5. The\ndistribution of the noise depends on the dimension, with higher\ndimensions approaching a Gaussian distribution of noise values.</p>\n<p>Flow noise is very similar to Perlin noise, as in\n<a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/vop/periodicnoise\" title=\"Generates 1D and 3D Perlin noise from 1D, 3D and 4D data.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/VOP/periodicnoise.svg\">[Image \ud83d\udd17]</a>Periodic Noise</a>, but with an extra flow parameter.  The flow\nparameter can be thought of as an extra dimension, but a dimension\nwhose period is always 1.  Moving through the flow dimension rotates\nthe noise vectors rather than adjusting slices through a noise space, which generates a more flowing appearance to the animation.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pnoise\">noise</a><div class=\"related-summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x",
                    "y",
                    "px",
                    "py",
                    "flow"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyzt",
                    "px",
                    "py",
                    "pz",
                    "pt",
                    "flow"
                ],
                "args": [
                    "const vector4",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyzt",
                    "p",
                    "flow"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyz",
                    "px",
                    "py",
                    "pz",
                    "flow"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyz",
                    "p",
                    "flow"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x",
                    "y",
                    "px",
                    "py",
                    "flow"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyzt",
                    "px",
                    "py",
                    "pz",
                    "pt",
                    "flow"
                ],
                "args": [
                    "const vector4",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyzt",
                    "p",
                    "flow"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyz",
                    "px",
                    "py",
                    "pz",
                    "flow"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyz",
                    "p",
                    "flow"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "frac": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/frac\">frac</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the fractional component of the floating point number.</p><ul><li><code>float frac(float value)</code></li><li><code>vector2 frac(vector2 value)</code></li><li><code>vector frac(vector value)</code></li><li><code>vector4 frac(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the fractional component of the floating point number. This is\nequivalent to (x - <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/floor\" title=\"Returns the largest integer less than or equal to the argument.\">floor</a>(x)).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "fresnel": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fresnel\">fresnel</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Computes the fresnel reflection/refraction contributions given an\nincoming vector, surface normal (both normalized), and an index of\nrefraction (eta).</p><ul><li><code>void fresnel(vector i, vector n, float eta, float &amp;kr, float &amp;kt)</code></li><li><code>void fresnel(vector i, vector n, float eta, float &amp;kr, float &amp;kt, vector &amp;R, vector &amp;T)</code></li></ul>\n\n\n\n<p>Computes the fresnel reflection/refraction contributions given an\nincoming vector, surface normal (both normalized), and an index of\nrefraction (eta). The amount of reflected light will be returned in\n<code>kr</code>, and the amount of transmitted light will be returned in <code>kt</code>.\nOptionally, the reflection and transmission vectors can be returned in\nthe <code>R</code> and <code>T</code> variables. The R and T variables will be normalized\nvectors on exit.</p>\n<p><code>eta</code> is a relative index of refraction, the ratio between\nthe interior and exterior index of refraction, where the exterior\nis defined by the direction of the normals (normals point away from\nthe interior).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/refract\">refract()</a><div class=\"related-summary\">Returns the refraction ray given an incoming direction, the\nnormalized normal and an index of refraction.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "i",
                    "n",
                    "eta",
                    "kr",
                    "kt"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "i",
                    "n",
                    "eta",
                    "kr",
                    "kt",
                    "R",
                    "T"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float",
                    "float",
                    "float",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "fromNDC": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fromNDC\">fromNDC</a></h1><p class=\"summary\">Transforms a position from normal device coordinates to the\ncoordinates in the appropriate space.</p><ul><li><code>vector fromNDC(string camera_name, vector point)</code></li><li><code>vector fromNDC(vector point)</code></li></ul>\n\n\n\n<p>Transforms a position from normal device coordinates to the coordinates\nin the appropriate space. NDC space is only well-defined for the\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts\">Displacement, Surface, and Light contexts</a>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "camera_name",
                    "point"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "point"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "frontface": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/frontface\">frontface</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">If dot(I, Nref) is less than zero, N will be negated.</p><ul><li><code>vector frontface(vector N, vector I)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector frontface(vector N, vector I, vector Nref)</code></li></ul>\n\n\n\n<p>This form (which doesn\u2019t take a reference vector) is only available in\nthe shading contexts, where the <code>Ng</code> variable is used.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector frontface(vector N, vector I, vector Nref)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>If <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/dot\" title=\"Returns the dot product between the arguments.\">dot</a>(I, Nref) is less than zero, N will be negated.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "N",
                    "I"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "N",
                    "I",
                    "Nref"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "fuzzify": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzify\">fuzzify</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\"></p><ul><li><code>float fuzzify(string[] ramp_basis, float[] ramp_values, float[] ramp_positions, float crisp_value, float min_value, float max_value)</code></li></ul>\n\n\n\n<p>Converts a crisp value to a fuzzy value based on an input membership function.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "ramp_basis",
                    "ramp_values",
                    "ramp_positions",
                    "crisp_value",
                    "min_value",
                    "max_value"
                ],
                "args": [
                    "const string[]",
                    "const float[]",
                    "const float[]",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "fuzzy_and": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_and\">fuzzy_and</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span></span><p class=\"summary\"></p><ul><li><code>int fuzzy_and(int v1, int v2, ...)</code></li><li><code>float fuzzy_and(float v1, float v2, ...)</code></li></ul>\n\n\n\n<p>Returns the fuzzy \"AND\" (Zadeh AND) of the input fuzzy values.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nand\">fuzzy_nand()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_not\">fuzzy_not()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_or\">fuzzy_or()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nor\">fuzzy_nor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_xor\">fuzzy_xor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nxor\">fuzzy_nxor()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            }
        ]
    },
    "fuzzy_defuzz_centroid": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_defuzz_centroid\">fuzzy_defuzz_centroid</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span></span><p class=\"summary\"></p><ul><li><code>float fuzzy_defuzz_centroid(float[] aggregated_membership, float min_value, float max_value)</code></li></ul>\n\n\n\n<p>Returns a crisp value given a range for the crisp value, and an aggregated membership function for the output variable.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "aggregated_membership",
                    "min_value",
                    "max_value"
                ],
                "args": [
                    "const float[]",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "fuzzy_nand": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nand\">fuzzy_nand</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span></span><p class=\"summary\"></p><ul><li><code>int fuzzy_nand(int v1, int v2, ...)</code></li><li><code>float fuzzy_nand(float v1, float v2, ...)</code></li></ul>\n\n\n\n<p>Returns the fuzzy \"NAND\" (Zadeh NAND) of the input fuzzy values.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_and\">fuzzy_and()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_not\">fuzzy_not()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_or\">fuzzy_or()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nor\">fuzzy_nor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_xor\">fuzzy_xor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nxor\">fuzzy_nxor()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            }
        ]
    },
    "fuzzy_nor": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nor\">fuzzy_nor</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span></span><p class=\"summary\"></p><ul><li><code>int fuzzy_nor(int v1, int v2, ...)</code></li><li><code>float fuzzy_nor(float v1, float v2, ...)</code></li></ul>\n\n\n\n<p>Returns the fuzzy \"NOR\" (Zadeh NOR) of the input fuzzy values.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_and\">fuzzy_and()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nand\">fuzzy_nand()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_not\">fuzzy_not()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_or\">fuzzy_or()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_xor\">fuzzy_xor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nxor\">fuzzy_nxor()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            }
        ]
    },
    "fuzzy_not": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_not\">fuzzy_not</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span></span><p class=\"summary\"></p><ul><li><code>int fuzzy_not(int v)</code></li><li><code>float fuzzy_not(float v)</code></li></ul>\n\n\n\n<p>Returns the fuzzy \"NOT\" (Zadeh NOT) of the input fuzzy value.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_and\">fuzzy_and()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nand\">fuzzy_nand()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_or\">fuzzy_or()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nor\">fuzzy_nor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_xor\">fuzzy_xor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nxor\">fuzzy_nxor()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "fuzzy_nxor": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nxor\">fuzzy_nxor</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span></span><p class=\"summary\"></p><ul><li><code>int fuzzy_nxor(int v1, int v2, ...)</code></li><li><code>float fuzzy_nxor(float v1, float v2, ...)</code></li></ul>\n\n\n\n<p>Returns the fuzzy \"NXOR\" (Zadeh NXOR) of the input fuzzy values.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_and\">fuzzy_and()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nand\">fuzzy_nand()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_not\">fuzzy_not()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_or\">fuzzy_or()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nor\">fuzzy_nor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_xor\">fuzzy_xor()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            }
        ]
    },
    "fuzzy_or": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_or\">fuzzy_or</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span></span><p class=\"summary\"></p><ul><li><code>int fuzzy_or(int v1, int v2, ...)</code></li><li><code>float fuzzy_or(float v1, float v2, ...)</code></li></ul>\n\n\n\n<p>Returns the fuzzy \"OR\" (Zadeh OR) of the input fuzzy values.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_and\">fuzzy_and()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nand\">fuzzy_nand()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_not\">fuzzy_not()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nor\">fuzzy_nor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_xor\">fuzzy_xor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nxor\">fuzzy_nxor()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            }
        ]
    },
    "fuzzy_xor": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_xor\">fuzzy_xor</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">fuzzy</span></span></span><p class=\"summary\"></p><ul><li><code>int fuzzy_xor(int v1, int v2, ...)</code></li><li><code>float fuzzy_xor(float v1, float v2, ...)</code></li></ul>\n\n\n\n<p>Returns the fuzzy \"XOR\" (Zadeh XOR) of the input fuzzy values.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_and\">fuzzy_and()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nand\">fuzzy_nand()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_not\">fuzzy_not()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_or\">fuzzy_or()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nor\">fuzzy_nor()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fuzzy_nxor\">fuzzy_nxor()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "v1",
                    "v2"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            }
        ]
    },
    "geoself": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/geoself\">geoself</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns a handle to the current geometry.</p><ul><li><code>int geoself()</code></li></ul>\n\n\n\n<p>Returns a handle to the currently being processed geometry, suitable for the geometry creation operations.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "geounwrap": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/geounwrap\">geounwrap</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns an oppath string to unwrap the geometry inplace.</p><ul><li><code>string geounwrap(int input, string unwrap_attribute)</code></li><li><code>string geounwrap(string path, string unwrap_attribute)</code></li></ul>\n\n\n\n<p>Returns an oppath string that will cause the file or geometry to be unwrapped inplace based on a vector attribute.\nThis function adds an \"unwrap:attrname\" prefix followed by the <code>unwrap_attribute</code> to the <code>path</code>.\n<code>path</code> can be a filename, an oppath with the \"op:\" prefix or an opinput.\nAn <code>input</code> index can be supplied instead of a string.</p>\n<p>Adding an \"unwrap:attrname\" prefix to an oppath will create a copy of the geometry and overwrite the point positions based on the unwrap attribute. The topology can change, if the attribute is a vertex attribute.</p>\n<p>This then enables all the vex functions working on the point positions to work in a custom space such as UV space or Color space.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/intersect\">intersect()</a><div class=\"related-summary\">This function computes the intersection of the specified ray with the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/uvdist\">uvdist()</a><div class=\"related-summary\">Finds the distance of a uv coordinate to a geometry in uv space.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/uvintersect\">uvintersect()</a><div class=\"related-summary\">This function computes the intersection of the specified ray with the geometry in uv space.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/uvsample\">uvsample()</a><div class=\"related-summary\">Evaluates an attribute on a geometry using a uv attribute name and value.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/xyzdist\">xyzdist()</a><div class=\"related-summary\">Finds the distance of a point to a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "unwrap_attribute"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "path",
                    "unwrap_attribute"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "getattrib": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getattrib\">getattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Reads an attribute value from geometry, with validity check.</p><ul><li><code>int getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>int getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>string getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>string getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>float getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>float getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector2 getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector2 getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector4 getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector4 getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix2 getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix2 getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix3 getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix3 getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>int[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>int[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>string[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>string[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>float[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>float[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector2[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector2[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector4[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>vector4[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix2[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix2[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix3[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix3[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix[] getattrib(int input, string attribclass, string name, int elemnum, int &amp;success)</code></li><li><code>matrix[] getattrib(string geometry, string attribclass, string name, int elemnum, int &amp;success)</code></li></ul>\n\n\n\n<p>Reads an attribute value on the given geometry.  If the attribute or element does not exist, success is set to 0, else 1.  To avoid this validity checking, use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/attrib\" title=\"Reads an attribute value from geometry.\">attrib()</a>.</p>\n<p><code>input</code> is the number of the input whose geometry should be read.</p>\n<p><code>geometry</code> is the name of the geometry file to read.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribclass</code> is one of:</p>\n<p>\"detail\", \"global\":\nDetail attributes.\n\"point\":\nPoint attributes.\n\"pointgroup\":\nPoint groups.\n\"prim\", \"primitive\":\nPrimitive attributes.\n\"primgroup\":\nPrimitive groups.\n\"vertex\":\nVertex attributes.\n\"vertexgroup\":\nVertex groups.</p>\n<p><code>name</code> is the name of the attribute, group, or intrinsic to read from.</p>\n<p><code>elemnum</code> specifies which element number to read from.  It is ignored for detail attributes.  See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexindex\" title=\"Converts a primitive/vertex pair into a linear vertex.\">vertexindex()</a> to convert a primitive/vertex pair into a vertex number.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "input",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribclass",
                    "name",
                    "elemnum",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "getattribute": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getattribute\">getattribute</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Copies the value of a geometry attribute into a variable.</p><ul><li><code>int getattribute(string geometry, int &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)</code></li><li><code>int getattribute(string geometry, string &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)</code></li><li><code>int getattribute(string geometry, float &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)</code></li><li><code>int getattribute(string geometry, vector &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)</code></li><li><code>int getattribute(string geometry, vector4 &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)</code></li><li><code>int getattribute(string geometry, matrix3 &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)</code></li><li><code>int getattribute(string geometry, matrix &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)</code></li><li><code>int getattribute(string geometry, float[] &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)</code></li></ul>\n\n\n<p>NOTE: Often the <code>point</code>, <code>vertex</code>, <code>detail</code>, and <code>prim</code> functions provide a\nsimpler access to attributes.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int getattribute(string geometry, type &amp;value, string attribute_class, string attribute_name, int number, int vertex_number)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int getattribute(string geometry, float value[], string attribute_class, string attribute_name, int number, int vertex_number)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns <code>0</code> if importing the attribute failed, <code>1</code> on success.</p>\n<p>If it fails, the importing attribute will be set to <code>0</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>value</code>:\nThe attribute value (may be uninitialized on function failure)</p>\n<p><code>attribute_class</code>:\nOne of the following.</p>\n<p><code>detail</code>, <code>global</code>:\nDetail or global attribute\n<code>prim</code>, <code>primitive</code>:\nPrimitive attribute\n<code>point</code>:\nPoint attribute\n<code>vertex</code>:\nVertex attribute</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n<p><code>number</code>:\nThe point or primitive number.  For detail attributes, this\ncan be left as <code>0</code>.</p>\n<p><code>vertex_number</code>:\nFor vertex attributes, the primitive should be specified as\nthe number parameter and the <code>vertex_number</code> specifies which\nvertex of the primitive should be referenced.  For point,\nprimitive and detail attributes, the <code>vertex_number</code> is ignored.</p>\n<p>To specify a linear vertex number, use -1 for the <code>number</code> and pass\nthe linear vertex number into this.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">vector        pos, uv, clr;\n</code><code class=\"line\">// Get the position of point 3 in \"defgeo.bgeo\"\n</code><code class=\"line\">getattribute(\"defgeo.bgeo\", pos, \"point\", \"P\", 3, 0);\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the value of the \"uv\" attribute for vertex 2 of primitive\n</code><code class=\"line\">// number 3 in the file defgeo.bgeo\n</code><code class=\"line\">getattribute(\"defgeo.bgeo\", uv, \"vertex\", \"uv\", 3, 2);\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the value of the \"Cd\" attribute for primitive 7\n</code><code class=\"line\">// in the SOP specified by the path \"/obj/geo1/color1\" (Houdini\n</code><code class=\"line\">// only)\n</code><code class=\"line\">getattribute(\"op:/obj/geo1/color1\", clr, \"primitive\", \"Cd\", 7);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geometry",
                    "value",
                    "attribute_class",
                    "attribute_name",
                    "number",
                    "vertex_number"
                ],
                "args": [
                    "const string",
                    "matrix3",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "value",
                    "attribute_class",
                    "attribute_name",
                    "number",
                    "vertex_number"
                ],
                "args": [
                    "const string",
                    "matrix",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "value",
                    "attribute_class",
                    "attribute_name",
                    "number",
                    "vertex_number"
                ],
                "args": [
                    "const string",
                    "float",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "value",
                    "attribute_class",
                    "attribute_name",
                    "number",
                    "vertex_number"
                ],
                "args": [
                    "const string",
                    "int",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "value",
                    "attribute_class",
                    "attribute_name",
                    "number",
                    "vertex_number"
                ],
                "args": [
                    "const string",
                    "vector4",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "value",
                    "attribute_class",
                    "attribute_name",
                    "number",
                    "vertex_number"
                ],
                "args": [
                    "const string",
                    "string",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "value",
                    "attribute_class",
                    "attribute_name",
                    "number",
                    "vertex_number"
                ],
                "args": [
                    "const string",
                    "vector",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "value",
                    "attribute_class",
                    "attribute_name",
                    "number",
                    "vertex_number"
                ],
                "args": [
                    "const string",
                    "float[]",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "getbbox": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</p><ul><li><code>void getbbox(int input, string primgroup, vector &amp;min, vector &amp;max)</code></li><li><code>void getbbox(int input, vector &amp;min, vector &amp;max)</code></li><li><code>void getbbox(string filename, string primgroup, vector &amp;min, vector &amp;max)</code></li><li><code>void getbbox(string geometry, vector &amp;min, vector &amp;max)</code></li><li><code>void getbbox(vector &amp;min, vector &amp;max)</code></li></ul>\n\n\n\n<p>Sets two vectors to the minimum and maximum corners of the bounding box\nfor the geometry.  This returns the primitive bounding box, so will\nbe expanded to include the extents of spheres and volumes.</p>\n<p>The version with no filename/input will use the first input (input number 0).</p>\n<p>If a group is specified, only primitives in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">void getbbox(vector min&amp;, vector max&amp;)\n</code>\nWARNING\n        \n<div class=\"content\">\n<p>This form of <code>getbbox</code> is deprecated and may be removed in the future. \n    Use the other forms as needed.</p>\n</div>\n</li>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "primgroup",
                    "min",
                    "max"
                ],
                "args": [
                    "const int",
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "input",
                    "min",
                    "max"
                ],
                "args": [
                    "const int",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "primgroup",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "geometry",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "min",
                    "max"
                ],
                "args": [
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "getbbox_center": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getbbox_center\">getbbox_center</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the center of the bounding box for the geometry.</p><ul><li><code>vector getbbox_center(int input)</code></li><li><code>vector getbbox_center(int input, string primgroup)</code></li><li><code>vector getbbox_center(string input)</code></li><li><code>vector getbbox_center(string filename, string primgroup)</code></li></ul>\n\n\n\n<p>Computes the center of the bounding box for the geometry.  This returns the\nprimitive bounding box, so will\nbe expanded to include the extents of spheres and volumes.</p>\n<p>If a group is specified, only primitives in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_center\">getbbox_center</a><div class=\"related-summary\">Returns the center of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_size\">getbbox_size</a><div class=\"related-summary\">Returns the size of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_min\">getbbox_min</a><div class=\"related-summary\">Returns the minimum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_max\">getbbox_max</a><div class=\"related-summary\">Returns the maximum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "primgroup"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primgroup"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getbbox_max": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getbbox_max\">getbbox_max</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the maximum of the bounding box for the geometry.</p><ul><li><code>vector getbbox_max(int input)</code></li><li><code>vector getbbox_max(int input, string primgroup)</code></li><li><code>vector getbbox_max(string input)</code></li><li><code>vector getbbox_max(string filename, string primgroup)</code></li></ul>\n\n\n\n<p>Computes the maximum of the bounding box for the geometry.  This returns the\nprimitive bounding box, so will\nbe expanded to include the extents of spheres and volumes.</p>\n<p>If a group is specified, only primitives in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_center\">getbbox_center</a><div class=\"related-summary\">Returns the center of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_size\">getbbox_size</a><div class=\"related-summary\">Returns the size of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_min\">getbbox_min</a><div class=\"related-summary\">Returns the minimum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_max\">getbbox_max</a><div class=\"related-summary\">Returns the maximum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "primgroup"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primgroup"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getbbox_min": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getbbox_min\">getbbox_min</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the minimum of the bounding box for the geometry.</p><ul><li><code>vector getbbox_min(int input)</code></li><li><code>vector getbbox_min(int input, string primgroup)</code></li><li><code>vector getbbox_min(string input)</code></li><li><code>vector getbbox_min(string filename, string primgroup)</code></li></ul>\n\n\n\n<p>Computes the minimum of the bounding box for the geometry.  This returns the\nprimitive bounding box, so will\nbe expanded to include the extents of spheres and volumes.</p>\n<p>If a group is specified, only primitives in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_center\">getbbox_center</a><div class=\"related-summary\">Returns the center of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_size\">getbbox_size</a><div class=\"related-summary\">Returns the size of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_min\">getbbox_min</a><div class=\"related-summary\">Returns the minimum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_max\">getbbox_max</a><div class=\"related-summary\">Returns the maximum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "primgroup"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primgroup"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getbbox_size": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getbbox_size\">getbbox_size</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the size of the bounding box for the geometry.</p><ul><li><code>vector getbbox_size(int input)</code></li><li><code>vector getbbox_size(int input, string primgroup)</code></li><li><code>vector getbbox_size(string input)</code></li><li><code>vector getbbox_size(string filename, string primgroup)</code></li></ul>\n\n\n\n<p>Computes the size of the bounding box for the geometry.  This returns the\nprimitive bounding box, so will\nbe expanded to include the extents of spheres and volumes.</p>\n<p>If a group is specified, only primitives in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_center\">getbbox_center</a><div class=\"related-summary\">Returns the center of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_size\">getbbox_size</a><div class=\"related-summary\">Returns the size of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_min\">getbbox_min</a><div class=\"related-summary\">Returns the minimum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox_max\">getbbox_max</a><div class=\"related-summary\">Returns the maximum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "primgroup"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primgroup"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getblurP": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getblurP\">getblurP</a></h1><p class=\"summary\">Returns the blurred point position (<code>P)</code> vector at a fractional time within the motion blur exposure.</p><ul><li><code>vector getblurP(float delta)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the position (<code>P</code>) of the current shading point at fractional time <code>delta</code> within the motion blur exposure. When motion blur is disabled, <code>getblurP() </code>will always return the shading position <code>P</code>.  When motion blur is enabled, <code>getblurP(0)</code> and <code>getblurP(1)</code> will return the positions at the extent of the shading position\u2019s motion path, with fractional values between 0 and 1 generating other intermediate shading positions.  For example, <code>getblurP(0.5)</code> returns the point\u2019s blurred position half-way through the current exposure.</p>\n<p>When shading micropolygons, <code>P</code> will always store the initial position of the point (at time = 0). For raytracing, <code>P</code> will store the final position after motion transformation for the sample being shaded - at the time given by the <code>Time</code> global variable in the VEX shading context.  If you want to determine the shading position at other times it is necessary to use <code>getblurP</code>.</p>\n<p>When using point clouds that were generated at time = 0, you should use <code>getblurP(0)</code> to find the position at the start of the frame\u2019s exposure and then use this position to look up in the point cloud.</p>\n<p>For example:</p>\n<div class=\"code-container\">\nvector p0 = getblurP(0);\nint handle = pcopen(\"pcloud.pc\", p0, ...);\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "delta"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getbounces": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getbounces\">getbounces</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\"></p><ul><li><code>int getbounces(bsdf b)</code></li></ul>\n\n\n\n<p>Returns the bounce mask for the specified <code>bsdf</code>.</p>\n<p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nbouncetypes\">nbouncetypes()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "b"
                ],
                "args": [
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "getbounds": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getbounds\">getbounds</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the bounding box of the geometry specified by the filename.</p><ul><li><code>int getbounds(string filename, string group, vector &amp;min, vector &amp;max)</code></li><li><code>int getbounds(string filename, vector &amp;min, vector &amp;max)</code></li></ul>\n\n\n\n<p>Returns the bounding box of the geometry specified by the filename. The\npoint corresponding to the minimum corner of the bounding box will be\nreturned in <code>min</code>, while the maximum will be in <code>max</code>.\nAlways returns 1.</p>\n<p>If a group is specified, only primitives in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n<p>The <code>getbbox()</code> function should likely be used instead.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "group",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "getcomp": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getcomp\">getcomp</a></h1><span><span class=\"padder\"><span class=\"pillow\">data</span></span></span><p class=\"summary\">Extracts a single component of a vector type, matrix type, or array.</p><ul><li><code>int getcomp(int[] array, int index)</code></li><li><code>string getcomp(string array, int index)</code></li><li><code>string getcomp(string[] array, int index)</code></li><li><code>float getcomp(vector2 array, int index)</code></li><li><code>float getcomp(vector vec, int index)</code></li><li><code>float getcomp(vector4 v, int index)</code></li><li><code>float getcomp(matrix2 m, int row, int column)</code></li><li><code>float getcomp(matrix3 m, int row, int column)</code></li><li><code>float getcomp(matrix m, int row, int column)</code></li><li><code>float getcomp(float[] array, int index)</code></li><li><code>vector2 getcomp(vector2[] array, int index)</code></li><li><code>vector getcomp(vector[] array, int index)</code></li><li><code>vector4 getcomp(vector4[] array, int index)</code></li><li><code>matrix2 getcomp(matrix2[] array, int index)</code></li><li><code>matrix3 getcomp(matrix3[] array, int index)</code></li><li><code>matrix getcomp(matrix[] array, int index)</code></li><li><code>light getcomp(light[] array, int index)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>material getcomp(material[] array, int index)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf getcomp(bsdf[] array, int index)</code></li></ul>\n\n\n\n<p>NOTE:\nYou can also use <code><code>name</code>[<code>index</code>]</code> notation to get the value at\n<code>index</code> for vectors and arrays. See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../arrays\">arrays</a>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setcomp\">setcomp()</a><div class=\"related-summary\">Sets a single component of a vector type, matrix type, or array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const matrix2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const matrix3[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const matrix[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const bsdf[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const light[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "light"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const material[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "material"
            },
            {
                "argnames": [
                    "m",
                    "row",
                    "column"
                ],
                "args": [
                    "const matrix2",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "m",
                    "row",
                    "column"
                ],
                "args": [
                    "const matrix3",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "m",
                    "row",
                    "column"
                ],
                "args": [
                    "const matrix",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v",
                    "index"
                ],
                "args": [
                    "const vector4",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const vector2",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "vec",
                    "index"
                ],
                "args": [
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const float[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const vector4[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const string[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const vector2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "const vector[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getcomponents": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getcomponents\">getcomponents</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\"></p><ul><li><code>string[] getcomponents()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns an array of strings containing the components specified by the\n<a class=\"link missing Hprop\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vm_exportcomponents\">/vex/functions/vm_exportcomponents</a> rendering property.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "string[]"
            }
        ]
    },
    "getderiv": {
        "added": "15.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getderiv\">getderiv</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.5</span></span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Evaluates surface derivatives of an attribute.</p><ul><li><code>void getderiv(float attr, string attrName, int isVertexAttr, float s, float t, float &amp;du, float &amp;dv, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void getderiv(vector attr, string attrName, int isVertexAttr, float s, float t, vector &amp;du, vector &amp;dv, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void getderiv(vector4 attr, string attrName, int isVertexAttr, float s, float t, vector4 &amp;du, vector4 &amp;dv, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>If derivatives are queried for a polygonal mesh it is interally sampled as a Subdivision Surface.</p>\n</div>\n</div>\n</div>\n\n<p>\n<code>attr</code>\n\n<div class=\"content\">\n<p>Attribute to evaluate.</p>\n</div>\n</p>\n<p>\n<code>attrName</code>\n\n<div class=\"content\">\n<p>Name of attribute to evaluate.</p>\n</div>\n</p>\n<p>\n<code>isVertexAttr</code>\n\n<div class=\"content\">\n<p>Set to <code>1</code> to indicate the attribute is a vertex type.</p>\n</div>\n</p>\n<p>\n<code>s</code>\n\n<div class=\"content\">\n<p>Parametric S shading value. This should be passed from the <code>s</code> global variable.</p>\n</div>\n</p>\n<p>\n<code>t</code>\n\n<div class=\"content\">\n<p>Parametric T shading value. This should be passed from the <code>t</code> global variable.</p>\n</div>\n</p>\n<p>\n<code>du</code>\n\n<div class=\"content\">\n<p>Derivative of attribute in U direction.</p>\n</div>\n</p>\n<p>\n<code>dv</code>\n\n<div class=\"content\">\n<p>Derivative of attribute in V direction.</p>\n</div>\n</p>\n\n<p>You can <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#derive\">specify optional parameters</a>\nto control the computation.</p>\n<div class=\"code-container\">\n<code class=\"line\">// Get derivatives of point attribute 'N'\n</code><code class=\"line\">vector dNdu, dNdv;\n</code><code class=\"line\">getderiv(N, \"N\", 0, s, t, dNdu, dNdv);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Du\">Du()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to U.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Dv\">Dv()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to V.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "attr",
                    "attrName",
                    "isVertexAttr",
                    "s",
                    "t",
                    "du",
                    "dv"
                ],
                "args": [
                    "const float",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "attr",
                    "attrName",
                    "isVertexAttr",
                    "s",
                    "t",
                    "du",
                    "dv"
                ],
                "args": [
                    "const vector4",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector4",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "attr",
                    "attrName",
                    "isVertexAttr",
                    "s",
                    "t",
                    "du",
                    "dv"
                ],
                "args": [
                    "const vector",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "getfogname": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getfogname\">getfogname</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the name of the current object whose shader is being run.</p><ul><li><code>string getfogname()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the name of the current fog object whose shader is being run, or the empty string if there is no current fog object.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "getglobalraylevel": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getglobalraylevel\">getglobalraylevel</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the depth of the ray tree for computing global\nillumination.</p><ul><li><code>int getglobalraylevel()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the depth of the ray tree for computing global illumination. If\nthis function returns a non-zero value, the shader is being called for\nthe purpose of evaluating global illumination.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "getgroupid": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getgroupid\">getgroupid</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns group id containing current primitive.</p><ul><li><code>int getgroupid()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the id of a primitive group containing the current face being shaded.\nThe id is the index of the group in the detail. If the primitive belongs\nto several groups, their indices are added up to calculate the returned id.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "getlight": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlight\">getlight</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns a light struct for the specified light identifier.</p><ul><li><code>light getlight(int lid)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Given a integer light identifier (lid), you can get a reference to a light\nobject representing the light (see details on the <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../lang#mantratypes\">mantra specific type</a>)</p>\n<div class=\"code-container\">\n<code class=\"line\">int lights[] = getlights();\n</code><code class=\"line\">int nlights = len(lights);\n</code><code class=\"line\">for (int i = 0; i &lt; nlights; i++)\n</code><code class=\"line\">{\n</code><code class=\"line\">light lp = getlight(i);\n</code><code class=\"line\">lp-&gt;illuminate(...);\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlightname\">getlightname()</a><div class=\"related-summary\">Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/lightid\">lightid()</a><div class=\"related-summary\">Returns the light id for a light struct.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/lightbounces\">lightbounces()</a><div class=\"related-summary\">Returns the bounce mask for a light struct.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lid"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "light"
            }
        ]
    },
    "getlightid": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlightid\">getlightid</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span></span><p class=\"summary\">Returns the light id for a named light (or -1 for an invalid name).</p><ul><li><code>int getlightid(string lightname)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Returns the integer light identifier of the light referred to by the given name.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlightname\">getlightname()</a><div class=\"related-summary\">Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lightname"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "getlightname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlightname\">getlightname</a></h1><span><span class=\"padder\"><span class=\"pillow\">light</span></span></span><p class=\"summary\">Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.</p><ul><li><code>string getlightname()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>string getlightname(int lightid)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Returns the name of the current light when called from within an\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> loop or when a current light has been set using\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setcurrentlight\" title=\"Sets the current light\">setcurrentlight()</a>.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">string getlightname(int lightid)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the name of the light referred to by the given integer\nlight ID. Integer light IDs are used by some low-level VEX functions\ninstead of strings for efficiency.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/illuminance\">illuminance()</a><div class=\"related-summary\">Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getphotonlight\">getphotonlight()</a><div class=\"related-summary\">Returns the integer ID of the light being used for photon shading.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/intersect_lights\">intersect_lights()</a><div class=\"related-summary\">Finds the nearest intersection of a ray with any of a list of (area) lights and runs the light shader at the intersection point.</div></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "string"
            },
            {
                "argnames": [
                    "lightid"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "getlights": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights</a></h1><span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns an array of light identifiers for the currently shaded surface.</p><ul><li><code>int[] getlights(...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int[] getlights(vector pos, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int[] getlights(material mat, vector P, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>You can limit the lights added to the array using the\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#lightmask\"><code>lightmask</code> keyword argument</a> or the\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../render/lights#categories\"><code>categories</code> keyword argument</a>.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int[] getlights(material mat; vector P; ...)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>With this signature, the light mask is determined solely by the material (the\n<code>lightmask</code> and <code>categories</code> keyword parameters are ignored).  This version\nalso accepts PBR keyword arguments to limit lights based on their Light\nContribution parameter.</p>\n<p>The PBR sampling keywords include:</p>\n<p><code>label</code>:\nA string specifying a specific label.  This keyword argument may be specified multiple times.\n<code>direct</code>:\nExpects an 0 or 1 integer value which will limit lights based on indirect or direct contribution categories.</p>\n<div class=\"code-container\">\n<code class=\"line\">getlights(\"lightmask\", \"light*,^light2\");\n</code><code class=\"line\">getlights(\"categories\", \"shadow|occlusion\");\n</code><code class=\"line\">getlights(material(), P, \"direct\", 0);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getphotonlight\">getphotonlight()</a><div class=\"related-summary\">Returns the integer ID of the light being used for photon shading.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/importance_light\">importance_light()</a><div class=\"related-summary\">Returns an estimate of a light\u2019s contribution to the overall scene lighting.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_light\">sample_light()</a><div class=\"related-summary\">Samples a 3D position on a light source and runs the light shader at that point.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/intersect_lights\">intersect_lights()</a><div class=\"related-summary\">Finds the nearest intersection of a ray with any of a list of (area) lights and runs the light shader at the intersection point.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlightname\">getlightname()</a><div class=\"related-summary\">Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/haslight\">haslight()</a><div class=\"related-summary\">Returns whether a light illuminates the given material.</div></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int[]",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "mat",
                    "P"
                ],
                "args": [
                    "const material",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int[]",
                "variadic": true
            },
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int[]",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "getlightscope": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlightscope\">getlightscope</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns a selection of lights that illuminate a given material.</p><ul><li><code>void getlightscope(material mat, string &amp;scope, string &amp;categories)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Given a material handle, determine the lights illuminating the surface.  The light selection is given by the scope/categories returned.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getmaterial\">getmaterial()</a><div class=\"related-summary\">Returns a material struct for the current surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getscope\">getscope()</a><div class=\"related-summary\">Returns a selection of objects visible to rays for a given material.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "mat",
                    "scope",
                    "categories"
                ],
                "args": [
                    "const material",
                    "string",
                    "string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "getlocalcurvature": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlocalcurvature\">getlocalcurvature</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Evaluates local curvature of primitive grid, using the same curvature evaluation method as Measure SOPs.</p><ul><li><code>vector getlocalcurvature(float s, float t)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns 0 vector if the object does not have subdivision enabled, or has no displacement shader assigned.\nOtherwise, the measured convexity and concavity will be returned in <code>x</code> and <code>y</code> components respectively.</p>\n\n<p>\n<code>s</code>\n\n<div class=\"content\">\n<p>Parametric S shading value. This should be passed from the <code>s</code> global variable.</p>\n</div>\n</p>\n<p>\n<code>t</code>\n\n<div class=\"content\">\n<p>Parametric T shading value. This should be passed from the <code>t</code> global variable.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "s",
                    "t"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getmaterial": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getmaterial\">getmaterial</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns a material struct for the current surface.</p><ul><li><code>material getmaterial()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>The material handle returned is opaque, but can be used by other functions to query information about the material (see details on the <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../lang#mantratypes\">mantra specific type</a>).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlightscope\">getlightscope()</a><div class=\"related-summary\">Returns a selection of lights that illuminate a given material.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getscope\">getscope()</a><div class=\"related-summary\">Returns a selection of objects visible to rays for a given material.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/haslight\">haslight()</a><div class=\"related-summary\">Returns whether a light illuminates the given material.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/renderstate\">renderstate()</a><div class=\"related-summary\">Queries the renderer for a named property.</div></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "material"
            }
        ]
    },
    "getmaterialid": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getmaterialid\">getmaterialid</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns material id of shaded primitive.</p><ul><li><code>int getmaterialid()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the material id of the primitive being shaded. The id corresponds to\nthe material being evaluated and accounts for overrides from style sheets and \ndetail assignments.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "getobjectid": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getobjectid\">getobjectid</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the object id for the current shading context.</p><ul><li><code>int getobjectid()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the object id.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "getobjectname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getobjectname\">getobjectname</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the name of the current object whose shader is being run.</p><ul><li><code>string getobjectname()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the name of the current object whose shader is being run, or the\nempty string if there is no current object.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "getphotonlight": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getphotonlight\">getphotonlight</a></h1><span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns the integer ID of the light being used for photon shading.</p><ul><li><code>int getphotonlight()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the shader is not generating photons from a light.</p>\n<p>The return value is an integer identifying a light. You can get convert this\ninteger ID to the light name with <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlightname\" title=\"Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.\">getlightname()</a></p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlightname\">getlightname()</a><div class=\"related-summary\">Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.</div></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "getpointbbox": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</p><ul><li><code>void getpointbbox(int filename, string pointgroup, vector &amp;min, vector &amp;max)</code></li><li><code>void getpointbbox(int geometry, vector &amp;min, vector &amp;max)</code></li><li><code>void getpointbbox(string filename, string pointgroup, vector &amp;min, vector &amp;max)</code></li><li><code>void getpointbbox(string geometry, vector &amp;min, vector &amp;max)</code></li></ul>\n\n\n\n<p>Sets two vectors to the minimum and maximum corners of the bounding box\nfor the geometry.</p>\n<p>If a group is specified, only points in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all points.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "pointgroup",
                    "min",
                    "max"
                ],
                "args": [
                    "const int",
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "geometry",
                    "min",
                    "max"
                ],
                "args": [
                    "const int",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "pointgroup",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "geometry",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "getpointbbox_center": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_center\">getpointbbox_center</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the center of the bounding box for the geometry.</p><ul><li><code>vector getpointbbox_center(int opinput)</code></li><li><code>vector getpointbbox_center(int opinput, string pointgroup)</code></li><li><code>vector getpointbbox_center(string opinput)</code></li><li><code>vector getpointbbox_center(string filename, string pointgroup)</code></li></ul>\n\n\n\n<p>Computes the center of the bounding box for the geometry.  This only\nincludes points, so will not\nbe expanded to include the extents of spheres and volumes.</p>\n<p>If a group is specified, only points in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_center\">getpointbbox_center</a><div class=\"related-summary\">Returns the center of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_size\">getpointbbox_size</a><div class=\"related-summary\">Returns the size of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_min\">getpointbbox_min</a><div class=\"related-summary\">Returns the minimum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_max\">getpointbbox_max</a><div class=\"related-summary\">Returns the maximum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "pointgroup"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "pointgroup"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getpointbbox_max": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_max\">getpointbbox_max</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the maximum of the bounding box for the geometry.</p><ul><li><code>vector getpointbbox_max(int opinput)</code></li><li><code>vector getpointbbox_max(int opinput, string pointgroup)</code></li><li><code>vector getpointbbox_max(string opinput)</code></li><li><code>vector getpointbbox_max(string filename, string pointgroup)</code></li></ul>\n\n\n\n<p>Computes the maximum of the bounding box for the geometry.  This only\nincludes points, so will not\nbe expanded to include the extents of spheres and volumes.</p>\n<p>If a group is specified, only points in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_center\">getpointbbox_center</a><div class=\"related-summary\">Returns the center of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_size\">getpointbbox_size</a><div class=\"related-summary\">Returns the size of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_min\">getpointbbox_min</a><div class=\"related-summary\">Returns the minimum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_max\">getpointbbox_max</a><div class=\"related-summary\">Returns the maximum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "pointgroup"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "pointgroup"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getpointbbox_min": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_min\">getpointbbox_min</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the minimum of the bounding box for the geometry.</p><ul><li><code>vector getpointbbox_min(int opinput)</code></li><li><code>vector getpointbbox_min(int opinput, string pointgroup)</code></li><li><code>vector getpointbbox_min(string opinput)</code></li><li><code>vector getpointbbox_min(string filename, string pointgroup)</code></li></ul>\n\n\n\n<p>Computes the minimum of the bounding box for the geometry.  This only\nincludes points, so will not\nbe expanded to include the extents of spheres and volumes.</p>\n<p>If a group is specified, only points in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_center\">getpointbbox_center</a><div class=\"related-summary\">Returns the center of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_size\">getpointbbox_size</a><div class=\"related-summary\">Returns the size of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_min\">getpointbbox_min</a><div class=\"related-summary\">Returns the minimum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_max\">getpointbbox_max</a><div class=\"related-summary\">Returns the maximum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "pointgroup"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "pointgroup"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getpointbbox_size": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_size\">getpointbbox_size</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the size of the bounding box for the geometry.</p><ul><li><code>vector getpointbbox_size(int opinput)</code></li><li><code>vector getpointbbox_size(int opinput, string pointgroup)</code></li><li><code>vector getpointbbox_size(string opinput)</code></li><li><code>vector getpointbbox_size(string filename, string pointgroup)</code></li></ul>\n\n\n\n<p>Computes the size of the bounding box for the geometry.  This only\nincludes points, so will not\nbe expanded to include the extents of spheres and volumes.</p>\n<p>If a group is specified, only points in that group will be used.\nThe group field\u2019s behavior matches that in SOPs.  An empty string\nwill include all primitives.  Ad-hoc patterns like <code>0-10</code> and\n<code>@Cd.x&gt;0</code> are also valid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox\">getpointbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_center\">getpointbbox_center</a><div class=\"related-summary\">Returns the center of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_size\">getpointbbox_size</a><div class=\"related-summary\">Returns the size of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_min\">getpointbbox_min</a><div class=\"related-summary\">Returns the minimum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getpointbbox_max\">getpointbbox_max</a><div class=\"related-summary\">Returns the maximum of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "pointgroup"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "pointgroup"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "getprimid": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getprimid\">getprimid</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the number of the current primitive.</p><ul><li><code>int getprimid()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the primitive number for the current geometric primitive being shaded.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "getptextureid": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getptextureid\">getptextureid</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the ptexture face id for the current primitive.</p><ul><li><code>int getptextureid()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the ptexture id for the current face being shaded.  This will typically\nbe the same as <code>getprimid()</code> except in the case of subdivision surfaces.  For\nsubdivision surfaces, mantra splits non-quadrilateral faces into multiple\npatches.  Each of these split faces is assigned a unique ptexture id.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "getraylevel": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getraylevel\">getraylevel</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the depth of the ray tree for the current shading.</p><ul><li><code>int getraylevel()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the depth of the ray tree for the current shading. If the\nreturned value is 0, this represents a ray from the camera to the scene.\nIf the ray level is 1, the ray represents either a reflection/refraction\nray. If the level is 2, then this represents a reflection/refraction\nwhich appears in a previous reflection/refraction etc.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "getrayweight": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getrayweight\">getrayweight</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns an approximation to the contribution of the ray to the final\npixel color.</p><ul><li><code>float getrayweight()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns an approximation to the contribution of the ray to the final\npixel color. Often, this is a better metric for judging contribution to\nthe final pixel color than <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/getraylevel\" title=\"Returns the depth of the ray tree for the current shading.\">getraylevel</a>. However, this\nrelies on prior shaders giving good estimates on the contribution to\ntheir shading (see <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/reflectlight\" title=\"Computes the amount of reflected light which hits the surface.\">reflectlight</a>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "float"
            }
        ]
    },
    "getsamplestore": {
        "added": "15.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getsamplestore\">getsamplestore</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.5</span></span><span class=\"padder\"><span class=\"pillow\">properties</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Looks up sample data in a channel, referenced by a point.</p><ul><li><code>int getsamplestore(string channel, vector P, int &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int getsamplestore(string channel, vector P, float &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int getsamplestore(string channel, vector P, vector &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int getsamplestore(string channel, vector P, vector4 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Looks up a value in a named channel at a specified point.\nReturns a non-zero value and sets <code>value</code> on success, or returns 0\nif the data could not be set.</p>\n<p>The sample store can be thought of as an in-memory point cloud, storing\nshading data at points. This allows data to be accessed across shader\nboundaries, unlike the internal export/import system. For example,\na lens shader could store data to be passed to the surface shader,\nan operation that is not supported using export variables due to the\nlayout of the shading pipeline.</p>\n<p>Please note that the stored samples can only be accessed within the same render\ntile.</p>\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n<code class=\"line\">cvex displacedlens(\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Inputs\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float x = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float y = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float Time = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float dofx = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float dofy = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float aspect = 1;\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float displaceScale = 1.0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float displaceGain = 0.1;\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Outputs\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0export vector P = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0export vector I = 0;\n</code><code class=\"line\">)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0P = {x, y, 0};\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0I = {1, 0, 0};\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector displace = noise(P * displaceScale) * displaceGain;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0I += displace;\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Store the displacement at the eye point, 'P'\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int status = setsamplestore(\"displacedlens_d\", P, displace);\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">surface mysurface()\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Get the displacement at the eye point, 'Eye'\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector displace = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int status = getsamplestore(\"displacedlens_d\", Eye, displace);\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0//...\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setsamplestore\">setsamplestore()</a><div class=\"related-summary\">Stores sample data in a channel, referenced by a point.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "channel",
                    "P",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel",
                    "P",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel",
                    "P",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel",
                    "P",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "getscope": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getscope\">getscope</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns a selection of objects visible to rays for a given material.</p><ul><li><code>void getscope(material mat, string raystyle, string &amp;scope, string &amp;categories)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Given a material handle, determine the objects which are visible for a given raystyle (\"diffuse\", \"reflect\", or \"refract\").  The object selection is given by the scope/categories returned.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getmaterial\">getmaterial()</a><div class=\"related-summary\">Returns a material struct for the current surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlightscope\">getlightscope()</a><div class=\"related-summary\">Returns a selection of lights that illuminate a given material.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "mat",
                    "raystyle",
                    "scope",
                    "categories"
                ],
                "args": [
                    "const material",
                    "const string",
                    "string",
                    "string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "getsmoothP": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getsmoothP\">getsmoothP</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span></span><p class=\"summary\">Returns modified surface position based on a smoothing function.</p><ul><li><code>int getsmoothP(vector &amp;smoothP, vector foo, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector getsmoothP(...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n<p>Returns a modified surface position based on a smoothing function.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int getsmoothP(vector smoothP, vector ray_origin, vector ray_direction, ...)\n</code>\n\n<div class=\"content\">\n<p>Returns 1 if <code>smoothP</code> is set to an interpolated position or 0\n    if the variable is unchanged.</p>\n</div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector getsmoothP(...)\n</code>\n\n<div class=\"content\">\n<p>Roughly equivalent to:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector getsmoothP(...)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector smoothP;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (!getsmoothP(smoothP, Eye, I, ...))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0smoothP = P;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return smoothP;\n</code><code class=\"line\">}\n</code>\n</div></div>\n</li>\n</div>\n\n<h2 class=\"label heading\" id=\"keyword-arguments\">\n            \n            Keyword arguments\n        </h2>\n<div class=\"content\" id=\"keyword-arguments-body\">\n\n<p>\n<code>style</code>\n\n<div class=\"content\">\n\n<p>\n<code>none</code>\n\n<div class=\"content\">\n<p>No smoothing.</p>\n</div>\n</p>\n<p>\n<code>shadow</code>\n\n<div class=\"content\">\n<p>Apply a smoothing function appropriate to elimination of the shadow\n        terminator issue for polygons.</p>\n</div>\n</p>\n\n</div>\n</p>\n\n</div>\n\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n<code class=\"line\">shadow\n</code><code class=\"line\">fastshadow()\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector        surfP;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (!getsmoothP(surfP, Eye, I))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0surfP = Ps;                // Set to the Ps (surface P) variable\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector shad = trace(surfP, normalize(L), Time, \"raystyle\", \"shadow\");\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0Cl *= ({1,1,1} - shad);\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "smoothP",
                    "foo"
                ],
                "args": [
                    "vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "vector",
                "variadic": true
            }
        ]
    },
    "getspace": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">See getspace</p><ul><li><code>matrix getspace(string fromspace, string tospace)</code></li></ul>\n\n\n\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/ptransform\" title=\"Transforms a vector from one space to another.\">ptransform</a>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vtransform\">vtransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a><div class=\"related-summary\">Transforms a vector from one space to another.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "fromspace",
                    "tospace"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "getuvtangents": {
        "added": "15.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/getuvtangents\">getuvtangents</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.5</span></span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Evaluates UV tangents at a point on an arbitrary object.</p><ul><li><code>void getuvtangents(string objName, vector P, vector dir, vector &amp;Tu, vector &amp;Tv)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void getuvtangents(string objName, vector P, vector dir, vector &amp;Tu, vector &amp;Tv, vector &amp;Tn)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>This variant additionally sets Tn to the evaluation point\u2019s surface normal:</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">getuvtangents(string objName, vector P, vector dir, vector &amp;Tu, vector &amp;Tv, vector &amp;Tn)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The object must have a vector attribute named \"uv\".</p>\n</div>\n</div>\n</div>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item tip \">\nTip\n<div class=\"content\">\n<p>Passing \"\" as the <code>objName</code> parameter will cause the function to use the current shaded object.</p>\n</div>\n</div>\n</div>\n\n<p>\n<code>objName</code>\n\n<div class=\"content\">\n<p>Name of object to evaluate UV tangents for.</p>\n</div>\n</p>\n<p>\n<code>P</code>\n\n<div class=\"content\">\n<p>Point at which to evaluate UV tangents.</p>\n</div>\n</p>\n<p>\n<code>dir</code>\n\n<div class=\"content\">\n<p>The direction to use for searching the object\u2019s surface.</p>\n<p>The surface of the object is searched for by casting rays from <code>P</code> in this direction as well as the opposite direction.</p>\n<p>When available, it makes sense to use the normal at the point being evaluated.</p>\n</div>\n</p>\n<p>\n<code>Tu</code>\n\n<div class=\"content\">\n<p>UV tangent in U direction.</p>\n</div>\n</p>\n<p>\n<code>Tv</code>\n\n<div class=\"content\">\n<p>UV tangent in V direction.</p>\n</div>\n</p>\n<p>\n<code>Tn</code>\n\n<div class=\"content\">\n<p>The surface normal at the point where tangents are evaluated.</p>\n</div>\n</p>\n\n<div class=\"code-container\">\n<code class=\"line\">// Get UV tangent at 'P', searching the surface in the direction of 'N'\n</code><code class=\"line\">vector Tu, Tv;\n</code><code class=\"line\">getuvtangents(\"/obj/geo1\", P, N, Tu, Tv);\n</code>\n</div><div class=\"code-container\">\n<code class=\"line\">// Find a surface location using an arbitrary ray.\n</code><code class=\"line\">// In this case the surface normal isn't known beforehand and can be fetched via 'Tn'.\n</code><code class=\"line\">vector Tu, Tv, Tn;\n</code><code class=\"line\">getuvtangents(\"/obj/geo1\", ray_orig, ray_dir, Tu, Tv, Tn);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Du\">Du()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to U.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Dv\">Dv()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to V.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getderiv\">getderiv()</a><div class=\"related-summary\">Evaluates surface derivatives of an attribute.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "objName",
                    "P",
                    "dir",
                    "Tu",
                    "Tv"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "objName",
                    "P",
                    "dir",
                    "Tu",
                    "Tv",
                    "Tn"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "gradient": {
        "added": "12.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/gradient\">gradient</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.0</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span><span class=\"padder\"><span class=\"pillow\">volume</span></span></span><p class=\"summary\">Returns the gradient of a field.</p><ul><li><code>vector gradient(float val, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector gradient(vector P, float val, ...)</code></li></ul>\n\n\n\n<p>This method computes the derivative of a volume field using the partial\nderivatives with respect to a given position (<code>Du</code>, <code>Dv</code>, and <code>Dw</code>).  If no\nposition is provided, <code>P</code> is assumed in shading contexts.  If only <code>Du</code> and\n<code>Dv</code> are defined, the derivative will be tangent to the surface being\nrendered.</p>\n<p>You can <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#derive\">specify optional parameters</a>\nto control the computation. The optional parameter <code>\"extrapolate\"</code>\ncontrols whether to do derivative extrapolation at the edges.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Return the gradient of the density field:</p>\n<div class=\"code-container\">\n<code class=\"line\">surface test_grad(float density = 0)\n</code><code class=\"line\">{\n</code><code class=\"line\">Cf = gradient(density);\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/volume\">volume()</a><div class=\"related-summary\">Returns the volume of the microvoxel containing a variable such as P.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Du\">Du()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to U.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Dv\">Dv()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to V.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Dw\">Dw()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to the 3rd axis, for volume rendering.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "val"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "P",
                    "val"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "hair": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hair\">hair</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\"></p><ul><li><code>bsdf hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, ...)</code></li><li><code>bsdf hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, float lobe_with_azi, ...)</code></li><li><code>bsdf hair(vector N, vector tip, float lobe_shift, float lobe_width_lon, float lobe_with_azi, float glint_shift, float glint_intensity, ...)</code></li></ul>\n\n\n\n<p>This is a function which invokes CVEX BSDF hair function.  Details of the hair BSDF can be found in the source file (<code>hair_eval.vfl</code>).</p>\n<p>Any additional arguments to the functions are passed through to the CVEX evaluation function.</p>\n<p>These different signatures are equivalent to the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">bsdf hair(vector N; vector tip; float lobe_shift; float lobe_width_lon, ...)\n</code><code class=\"line\">{\n</code><code class=\"line\">cvex_bsdf(\"hair_eval\", \"hair_sample\",\n</code><code class=\"line\">\"label\", \"diffuse\",\n</code><code class=\"line\">\"tip\", tip,\n</code><code class=\"line\">\"lobe_shift\", lobe_shift,\n</code><code class=\"line\">\"lobe_width_lon\", lobe_width_lon,\n</code><code class=\"line\">...);\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">bsdf hair(vector N; vector tip; float lobe_shift; float lobe_width_lon, float lobe_with_azi, ...)\n</code><code class=\"line\">{\n</code><code class=\"line\">cvex_bsdf(\"hair_eval\", \"hair_sample\",\n</code><code class=\"line\">\"label\", \"refract\",\n</code><code class=\"line\">\"tip\", tip,\n</code><code class=\"line\">\"lobe_shift\", lobe_shift,\n</code><code class=\"line\">\"lobe_width_lon\", lobe_width_lon,\n</code><code class=\"line\">\"lobe_width_azi\", lobe_width_azi,\n</code><code class=\"line\">...);\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">bsdf hair(vector N; vector tip; float lobe_shift; float lobe_width_lon, float glint_shift; float glint_intensity, ...)\n</code><code class=\"line\">{\n</code><code class=\"line\">cvex_bsdf(\"hair_eval\", \"hair_sample\",\n</code><code class=\"line\">\"label\", \"reflect\",\n</code><code class=\"line\">\"tip\", tip,\n</code><code class=\"line\">\"lobe_shift\", lobe_shift,\n</code><code class=\"line\">\"lobe_width_lon\", lobe_width_lon,\n</code><code class=\"line\">\"glint_shift\", glint_shift,\n</code><code class=\"line\">\"glint_intensity\", glint_intensity,\n</code><code class=\"line\">...);\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phong\">phong()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phonglobe\">phonglobe()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "N",
                    "tip",
                    "lobe_shift",
                    "lobe_width_lon",
                    "lobe_with_azi",
                    "glint_shift",
                    "glint_intensity"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "N",
                    "tip",
                    "lobe_shift",
                    "lobe_width_lon",
                    "lobe_with_azi"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "N",
                    "tip",
                    "lobe_shift",
                    "lobe_width_lon"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "hasattrib": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hasattrib\">hasattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Checks whether a geometry attribute exists.</p><ul><li><code>int hasattrib(int opinput, string attribute_class, string attribute_name)</code></li><li><code>int hasattrib(string geometry, string attribute_class, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>1</code> if the attribute can be found and <code>0</code> if the attribute cannot be found.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n<p><code>attribute_class</code>:\nOne of the following.</p>\n<p><code>detail</code>, <code>global</code>:\nDetail or global attribute\n<code>prim</code>, <code>primitive</code>:\nPrimitive attribute\n<code>point</code>:\nPoint attribute\n<code>vertex</code>:\nVertex attribute\n<code>pointgroup</code>:\nPoint group\n<code>primgroup</code>:\nPrimitive group\n<code>vertexgroup</code>:\nVertex group</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">// Check whether the point group \"pointstouse\" exists.\n</code><code class=\"line\">if (hasattrib(\"defgeo.bgeo\", \"pointgroup\", \"pointstouse\")) {\n</code><code class=\"line\">// Do something with the point group\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_class",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_class",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hasdetailattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hasdetailattrib\">hasdetailattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns if a geometry detail attribute exists.</p><ul><li><code>int hasdetailattrib(int opinput, string attribute_name)</code></li><li><code>int hasdetailattrib(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Returns <code>1</code> if it can be found.</p>\n<p>This is the same as:</p>\n<p><code>(detailattribsize(geometry, attribute_name) &gt; 0)</code></p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        exists;\n</code><code class=\"line\">// Determine if the P attribute exists.\n</code><code class=\"line\">exists = hasdetailattrib(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "haslight": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/haslight\">haslight</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns whether a light illuminates the given material.</p><ul><li><code>int haslight(material mat, vector P, int light, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns 1 if the given light is used to illuminate the material at the point\nspecified.</p>\n<p>This function accepts PBR keyword arguments to specify sampling types.  These\noptions may exclude lights which don\u2019t match the desired sampling paths.</p>\n<p>The PBR sampling keywords include:</p>\n<p><code>label</code>:\nA string specifying a specific label.  This keyword argument may be specified multiple times.\n<code>direct</code>:\nExpects an 0 or 1 integer value which will limit lights based on indirect or direct contribution categories.</p>\n<div class=\"code-container\">\n<code class=\"line\">haslight(material(), P, light_num, \"direct\", 0);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "mat",
                    "P",
                    "light"
                ],
                "args": [
                    "const material",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            }
        ]
    },
    "hasmetadata": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hasmetadata\">hasmetadata</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">cop</span></span></span><p class=\"summary\">Queries if metadata exists on a composite operator.</p><ul><li><code>int hasmetadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>This function checks if metadata named <code>name</code> exists on the COP attached to\nthe VEX COP\u2019s input <code>opinput</code>. If it exists then 1 is returned, otherwise 0.</p>\n\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>The input of the COP VOP to check for metadata.</p>\n</div>\n</p>\n<p>\n<code>name</code>\n\n<div class=\"content\">\n<p>The name of the metadata to check.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/metadata\">metadata()</a><div class=\"related-summary\">Returns a metadata value from a composite operator.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hasplane": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hasplane\">hasplane</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns 1 if the plane specified by the parameter exists in this\nCOP.</p><ul><li><code>int hasplane(string planename)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns 1 if the plane specified by the parameter exists in this COP.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "planename"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "haspointattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/haspointattrib\">haspointattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns if a geometry point attribute exists.</p><ul><li><code>int haspointattrib(int opinput, string attribute_name)</code></li><li><code>int haspointattrib(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Returns <code>1</code> if it can be found.</p>\n<p>This is the same as:</p>\n<p><code>(pointattribsize(geometry, attribute_name) &gt; 0)</code></p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        exists;\n</code><code class=\"line\">// Determine if the P attribute exists.\n</code><code class=\"line\">exists = haspointattrib(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hasprimattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hasprimattrib\">hasprimattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns if a geometry prim attribute exists.</p><ul><li><code>int hasprimattrib(int opinput, string attribute_name)</code></li><li><code>int hasprimattrib(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Returns <code>1</code> if it can be found.</p>\n<p>This is the same as:</p>\n<p><code>(primattribsize(geometry, attribute_name) &gt; 0)</code></p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        exists;\n</code><code class=\"line\">// Determine if the P attribute exists.\n</code><code class=\"line\">exists = hasprimattrib(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hasvertexattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hasvertexattrib\">hasvertexattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns if a geometry vertex attribute exists.</p><ul><li><code>int hasvertexattrib(int opinput, string attribute_name)</code></li><li><code>int hasvertexattrib(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Returns <code>1</code> if it can be found.</p>\n<p>This is the same as:</p>\n<p><code>(vertexattribsize(geometry, attribute_name) &gt; 0)</code></p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        exists;\n</code><code class=\"line\">// Determine if the P attribute exists.\n</code><code class=\"line\">exists = hasvertexattrib(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_dstpoint": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_dstpoint\">hedge_dstpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the destination point of a half-edge.</p><ul><li><code>int hedge_dstpoint(int opinput, int hedge)</code></li><li><code>int hedge_dstpoint(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the half-edge hedge is invalid. Otherwise, returns the point number of the destination point of the half-edge <code>hedge</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int dstpt;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get vertex number of half-edge number 3.\n</code><code class=\"line\">dstpt = hedge_dstpoint(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_dstvertex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_dstvertex\">hedge_dstvertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the destination vertex of a half-edge.</p><ul><li><code>int hedge_dstvertex(int opinput, int hedge)</code></li><li><code>int hedge_dstvertex(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the half-edge hedge is invalid. Otherwise, returns the vertex\nnumber of the destination vertex of the half-edge <code>hedge</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int dstvtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the destination vertex half-edge number 3.\n</code><code class=\"line\">dstvtx = hedge_dstvertex(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_equivcount": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_equivcount\">hedge_equivcount</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of half-edges equivalent to a given half-edge.</p><ul><li><code>int hedge_equivcount(int opinput, int hedge)</code></li><li><code>int hedge_equivcount(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the half-edge hedge is invalid. Otherwise, returns the half-edges that have the same endpoints as <code>hedge</code> including <code>hedge</code>.</p>\n<p>NOTE:\nEquivalent half-edges may be oppositely oriented, i.e. the source of one can be the destination of the other and vice versa.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int is_boundary = 0;\n</code><code class=\"line\">int is_interior = 0;\n</code><code class=\"line\">int is_nonmanifold = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">// Determine the type of edge represnted by half-edge number 3:\n</code><code class=\"line\">int numeq;\n</code><code class=\"line\">numeq = hedge_equivcount(\"defgeo.bgeo\", 3);\n</code><code class=\"line\">if (numeq == 1)\n</code><code class=\"line\">is_boundary = 1;\n</code><code class=\"line\">else if (numeq &gt;= 3)\n</code><code class=\"line\">is_nonmanifold = 1;\n</code><code class=\"line\">else\n</code><code class=\"line\">is_interior = 1;\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_isequiv": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_isequiv\">hedge_isequiv</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Determines whether a two half-edges are equivalent (represent the same edge).</p><ul><li><code>int hedge_isequiv(int opinput, int hedge1, int hedge2)</code></li><li><code>int hedge_isequiv(string geometry, int hedge1, int hedge2)</code></li></ul>\n\n\n\n<p>Returns <code>1</code> if <code>hedge1</code> and <code>hedge2</code> are equivalent, i.e. represent the same\nedge in the geometry. This is the case when either source and destination points\nof <code>hedge1</code> and <code>hedge2</code> are respectively the same, or source of each of <code>hedge1</code>\nand <code>hedge2</code> is the same as the destination of the other.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge1</code>:\nThe integer representing the first half-edge.</p>\n<p><code>hedge2</code>:\nThe integer representing the second half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int opposite = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">// test if hedges 2 and 3 are oppositely oriented equivalent half-edges\n</code><code class=\"line\">if (hedge_isequiv(\"defgeo.bgeo\", 2, 3))\n</code><code class=\"line\">{\n</code><code class=\"line\">if (hedge_srcpoint(\"defgeo.bgeo\", 2) == hedge_dstpoint(\"defgeo.bgeo\", 3))\n</code><code class=\"line\">opposite = 1;\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge1",
                    "hedge2"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge1",
                    "hedge2"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_isprimary": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_isprimary\">hedge_isprimary</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Determines whether a half-edge number corresponds to a primary half-edge.</p><ul><li><code>int hedge_isprimary(int opinput, int hendge)</code></li><li><code>int hedge_isprimary(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>1</code> if <code>hedge</code> represents a primary half-edge in the referenced geometry and <code>0</code> otherwise.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nThe integer representing a half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int numedges;\n</code><code class=\"line\">\n</code><code class=\"line\">// Count the number of edges\n</code><code class=\"line\">\n</code><code class=\"line\">if (hedge_isprimary(\"defgeo.bgeo\", 3))\n</code><code class=\"line\">numedges++;\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hendge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_isvalid": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_isvalid\">hedge_isvalid</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Determines whether a half-edge number corresponds to a valid half-edge.</p><ul><li><code>int hedge_isvalid(int opinput, int hendge)</code></li><li><code>int hedge_isvalid(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>1</code> if <code>hedge</code> represents a valid half-edge in the referenced geometry and <code>0</code> otherwise.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nThe integer representing a half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int srcpt;\n</code><code class=\"line\">\n</code><code class=\"line\">// find the source point of a half-edge number 3 if it is valid\n</code><code class=\"line\">if (hedge_isvalid(\"defgeo.bgeo\", 3))\n</code><code class=\"line\">srcpt = hedge_srcpoint(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hendge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_next": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_next\">hedge_next</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the half-edge that follows a given half-edge in its polygon.</p><ul><li><code>int hedge_next(int opinput, int hedge)</code></li><li><code>int hedge_next(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>hedge</code> is invalid. Otherwise, returns the number of the half-edge\nthat follows (its source is the destination of) <code>hedge</code> in the polygon that contains it.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int nexthedge;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the next half-edge of half-edge number 3.\n</code><code class=\"line\">nexthedge = hedge_next(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_nextequiv": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_nextequiv\">hedge_nextequiv</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the next half-edges equivalent to a given half-edge.</p><ul><li><code>int hedge_nextequiv(int opinput, int hedge)</code></li><li><code>int hedge_nextequiv(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the half-edge hedge is invalid and returns <code>hedge</code> if there\nare no other half-edges equivalent to <code>hedge</code>. Otherwise, returns the next\nhalf-edges equivalent to <code>hedge</code>. Successive calls to <code>hedge_nextequiv()</code> cycle\nover all the half-edges in an equivalence class.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">// Determine the number of half-edges equivalent to half-edge number 3 (including itself)\n</code><code class=\"line\">int num_equiv = 0;\n</code><code class=\"line\">int h = 3;\n</code><code class=\"line\">do\n</code><code class=\"line\">{\n</code><code class=\"line\">h = hedge_nextequiv(\"defgeo.bgeo\", h);\n</code><code class=\"line\">num_equiv++;\n</code><code class=\"line\">} while (h != 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_postdstpoint": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_postdstpoint\">hedge_postdstpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the point into which the vertex following the destination vertex of a half-edge in its primitive is wired.</p><ul><li><code>int hedge_postdstpoint(int opinput, int hedge)</code></li><li><code>int hedge_postdstpoint(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the half-edge hedge is invalid. Otherwise, returns the point number\nof the point into which the vertex that comes after the destination vertex of the\nhalf-edge <code>hedge</code> in the primitive that contains <code>hedge</code> is wired.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int postdstpt;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the destination vertex half-edge number 3.\n</code><code class=\"line\">postdstpt = hedge_postdstpoint(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_postdstvertex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_postdstvertex\">hedge_postdstvertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the vertex following the destination vertex of a half-edge in its primitive.</p><ul><li><code>int hedge_postdstvertex(int opinput, int hedge)</code></li><li><code>int hedge_postdstvertex(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the half-edge hedge is invalid. Otherwise, returns the vertex\nnumber of the vertex that comes after the destination vertex of the half-edge <code>hedge</code> in the primitive that contains <code>hedge</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int postdstvtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the destination vertex half-edge number 3.\n</code><code class=\"line\">postdstvtx = hedge_postdstvertex(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_presrcpoint": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_presrcpoint\">hedge_presrcpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the point into which the vertex that precedes the source vertex of a half-edge in its primitive is wired.</p><ul><li><code>int hedge_presrcpoint(int opinput, int hedge)</code></li><li><code>int hedge_presrcpoint(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the <code>hedge</code> is invalid. Otherwise returns the point of the point into which the vertex that\ncomes before the source vertex of the <code>hedge</code> in the primitive that contains <code>hedge</code> is wired.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int presrcpt;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the pre-source point of half-edge number 3.\n</code><code class=\"line\">presrcpt = hedge_presrcpoint(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_presrcvertex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_presrcvertex\">hedge_presrcvertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the vertex that precedes the source vertex of a half-edge in its primitive.</p><ul><li><code>int hedge_presrcvertex(int opinput, int hedge)</code></li><li><code>int hedge_presrcvertex(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the <code>hedge</code> is invalid. Otherwise returns the vertex number of the vertex that\ncomes before the source vertex of the <code>hedge</code> in the primitive that contains <code>hedge</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int presrcvtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the pre-source vertex of half-edge number 3.\n</code><code class=\"line\">presrcvtx = hedge_presrcvertex(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_prev": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_prev\">hedge_prev</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the half-edge that precedes a given half-edge in its polygon.</p><ul><li><code>int hedge_prev(int opinput, int hedge)</code></li><li><code>int hedge_prev(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>hedge</code> is invalid. Otherwise, returns the number of the half-edge\nthat precedes (its destination is the source of) <code>hedge</code> in the polygon that contains it.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int prev;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the previous half-edge of half-edge number 3.\n</code><code class=\"line\">prevhedge = hedge_prev(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_prim": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_prim\">hedge_prim</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the primitive that contains a half-edge.</p><ul><li><code>int hedge_prim(int opinput, int hedge)</code></li><li><code>int hedge_prim(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the half-edge hedge is invalid. Otherwise, returns the primitive number of primitive that contains (the source and destination vertices of) <code>hedge</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int prim;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the primitive number of half-edge number 3.\n</code><code class=\"line\">prim = hedge_prim(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_primary": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_primary\">hedge_primary</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the primary half-edge equivalent to a given half-edge.</p><ul><li><code>int hedge_primary(int opinput, int hedge)</code></li><li><code>int hedge_primary(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the half-edge hedge is invalid. Otherwise, returns the\nprimary half-edge <code>hedge</code> that shares the source and destination of <code>hedge</code> (possibly in reverse order). Each class of equivalent half-edges has precisely one primary half-edge. In particular, a half-edge which is equivalent to no other half-edges is always primary. Primary half-edges are useful for accounting for each edge exactly once as each edge may be realized by any number of equivalent half-edges.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int primhedge;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the primary half-edge equivalent  to half-edge number 3.\n</code><code class=\"line\">primhedge = hedge_primary(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_srcpoint": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_srcpoint\">hedge_srcpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the source point of a half-edge.</p><ul><li><code>int hedge_srcpoint(int opinput, int hedge)</code></li><li><code>int hedge_srcpoint(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>hedge</code> is invalid. Otherwise, returns the point number of the source point of the <code>hedge</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int linearvtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the linear vertex value of vertex 2 of primitive 3.\n</code><code class=\"line\">linearvtx = hedge_srcpoint(\"defgeo.bgeo\", 3, 2);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "hedge_srcvertex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hedge_srcvertex\">hedge_srcvertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the source vertex of a half-edge.</p><ul><li><code>int hedge_srcvertex(int opinput, int hedge)</code></li><li><code>int hedge_srcvertex(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the <code>hedge</code> is invalid. Otherwise returns the vertex number of the source vertex of the <code>hedge</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>hedge</code>:\nInput half-edge.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int srcvtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the source vertex of half-edge number 3.\n</code><code class=\"line\">srcvtx = hedge_srcvertex(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "henyeygreenstein": {
        "added": "12.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/henyeygreenstein\">henyeygreenstein</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span><span class=\"padder\"><span class=\"pillow\">volumes</span></span></span><p class=\"summary\">Returns an anisotropic volumetric bsdf, which can scatter light forward or backward.</p><ul><li><code>bsdf henyeygreenstein(float anisotropic_bias, ...)</code></li></ul>\n\n\n\n<p>The Henyey-Greenstein function scatters light either forward or in reverse depending on the <code>anisotropic_bias</code> provided to the function which must be a floating point value between -1 and 1. A value of 0 will cause isotropic scattering (identical to the <code>isotropic()</code> bsdf) while positive values produce forward scattering and negative values produce reverse scattering. The extrema of -1 and 1 cause all light to be scattered in a single direction, back toward the light for -1 and without any directional change for 1.</p>\n<p>NOTE:\nNo normal vector is required to construct a henyeygreenstein bsdf since it has no directionality. The default albedo for the henyeygreenstein <code>bsdf</code> is 1, which means the is scatters 100% of the incoming light.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/isotropic\">isotropic()</a><div class=\"related-summary\">Returns an isotropic bsdf, which scatters light equally in all directions.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/specular\">specular()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phong\">phong()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "anisotropic_bias"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "hscript_noise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hscript_noise\">hscript_noise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Mimics the Houdini expression functions noise(), snoise(), turb(), and\nsturb().</p><ul><li><code>float hscript_noise(vector pos)</code></li></ul>\n\n\n<p>hscript_noise, hscript_turb, hscript_snoise, and hscript_sturb mimic\nthe Houdini expression functions noise(), snoise(), turb(), and\nsturb().</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float hscript_noise(vector pos)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p><code>hscript_noise</code>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/hscript_turb\">hscript_turb</a>,\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/hscript_snoise\">hscript_snoise</a>, and\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/hscript_sturb\">hscript_sturb</a> mimic the Houdini expression functions\n<code>noise()</code>, <code>snoise()</code>, <code>turb()</code>, and <code>sturb()</code>. They have very similar\nproperties to the onoise() and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/snoise\" title=\"These functions are similar to wnoise.\">snoise</a> functions, but will\nproduce results which match the Houdini expression functions exactly.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "hscript_rand": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hscript_rand\">hscript_rand</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Produces the exact same results as the Houdini expression function of\nthe same name.</p><ul><li><code>float hscript_rand(float seed)</code></li><li><code>vector hscript_rand(float seed)</code></li><li><code>vector4 hscript_rand(float seed)</code></li></ul>\n\n\n\n<p>Produces the exact same results as the Houdini expression function of\nthe same name. This function will generate different random values for\nevery floating point seed. This is different that the\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/random\" title=\"Generate a random number based on the position in N dimensional space\n(where N is 1 to 4 dimensions).\">random</a> function which converts the floating point argument\nto an integer seed. The <code>hscript_rand()</code> function may produce different\nresults on different hardware or operating systems.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            }
        ]
    },
    "hscript_snoise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hscript_snoise\">hscript_snoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\"></p><ul><li><code>float hscript_snoise(vector pos)</code></li></ul>\n\n\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hscript_noise\">hscript_noise</a><div class=\"related-summary\">Mimics the Houdini expression functions noise(), snoise(), turb(), and\nsturb().</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "hscript_sturb": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hscript_sturb\">hscript_sturb</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\"></p><ul><li><code>float hscript_sturb(vector pos, int turbulence)</code></li></ul>\n\n\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hscript_noise\">hscript_noise</a><div class=\"related-summary\">Mimics the Houdini expression functions noise(), snoise(), turb(), and\nsturb().</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "pos",
                    "turbulence"
                ],
                "args": [
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "hscript_turb": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hscript_turb\">hscript_turb</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\"></p><ul><li><code>float hscript_turb(vector pos, int turbulence)</code></li></ul>\n\n\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hscript_noise\">hscript_noise</a><div class=\"related-summary\">Mimics the Houdini expression functions noise(), snoise(), turb(), and\nsturb().</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "pos",
                    "turbulence"
                ],
                "args": [
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "hsvtorgb": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/hsvtorgb\">hsvtorgb</a></h1><span><span class=\"padder\"><span class=\"pillow\">color</span></span></span><p class=\"summary\">Convert HSV color space into RGB color space.</p><ul><li><code>vector hsvtorgb(float hue, float sat, float val)</code></li><li><code>vector hsvtorgb(vector hsv)</code></li></ul>\n\n\n\n<p>Convert HSV color space into RGB color space. A vector representing the\nRGB triple is returned. The hue should be in the range 0 to 1.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "hue",
                    "sat",
                    "val"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "hsv"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "iaspect": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/iaspect\">iaspect</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the aspect ratio of the specified input.</p><ul><li><code>float iaspect(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the aspect ratio of the specified input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "ichname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ichname\">ichname</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the channel name of the indexed plane of the given input (e.</p><ul><li><code>string ichname(int planeindex, int chindex, int input)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the channel name of the indexed plane of the given input (e.g.\n\"r\" or \"x\").</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "planeindex",
                    "chindex",
                    "input"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "ident": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ident\">ident</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Return an identity matrix.</p><ul><li><code>matrix2 ident()</code></li><li><code>matrix3 ident()</code></li><li><code>matrix ident()</code></li></ul>\n\n\n\n<p>The <code>ident</code> function returns the identity matrix for the given matrix type.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix2"
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix3"
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix"
            }
        ]
    },
    "idtopoint": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/idtopoint\">idtopoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Looks up a point number by an id attribute.</p><ul><li><code>int idtopoint(int opinput, int id)</code></li><li><code>int idtopoint(string file, int id)</code></li></ul>\n\n\n\n<p>Looks up a point number from an id attribute value.</p>\n<p>If the specified geometry has an attribute named <code>id</code>, the first point\nwith an id value matching the provided value is returned.  If no\nsuch point is found, -1 is returned.</p>\n<p>If the geometry doesn\u2019t have an <code>id</code> attribute, point numbers are used\nas ids.  Thus the result will be the passed in id value, unless it is\ngreater than the number of points in the source geometry, in which case\nit will be -1.</p>\n<p>This is a short form for the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">int idtopoint(const string opname; const int id)\n</code><code class=\"line\">{\n</code><code class=\"line\">if (hasattrib(opname, 'point', 'id'))\n</code><code class=\"line\">return findattribval(opname, 'point', 'id', id);\n</code><code class=\"line\">if (id &lt; npoints(opname))\n</code><code class=\"line\">return id;\n</code><code class=\"line\">return -1;\n</code><code class=\"line\">}\n</code>\n</div>\n<p><code>opinput</code>:\nWhich input to the current node.\n<code>id</code>:\nThe id to search for.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "id"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "idtoprim": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/idtoprim\">idtoprim</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Looks up a primitive number by an id attribute.</p><ul><li><code>int idtoprim(int opinput, int id)</code></li><li><code>int idtoprim(string file, int id)</code></li></ul>\n\n\n\n<p>Looks up a primitive number from an id attribute value.</p>\n<p>If the specified geometry has an attribute named <code>id</code>, the first primitive\nwith an id value matching the provided value is returned.  If no\nsuch primitive is found, -1 is returned.</p>\n<p>If the geometry doesn\u2019t have an <code>id</code> attribute, primitive numbers are used\nas ids.  Thus the result will be the passed in id value, unless it is\ngreater than the number of primitives in the source geometry, in which case\nit will be -1.</p>\n<p>This is a short form for the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">int idtoprim(const string opname; const int id)\n</code><code class=\"line\">{\n</code><code class=\"line\">if (hasattrib(opname, 'prim', 'id'))\n</code><code class=\"line\">return findattribval(opname, 'prim', 'id', id);\n</code><code class=\"line\">if (id &lt; nprimitives(opname))\n</code><code class=\"line\">return id;\n</code><code class=\"line\">return -1;\n</code><code class=\"line\">}\n</code>\n</div>\n<p><code>opinput</code>:\nWhich input to the current node.\n<code>id</code>:\nThe id to search for.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "id"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "iend": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/iend\">iend</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the last frame of the specified input.</p><ul><li><code>int iend(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the last frame of the specified input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "iendtime": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/iendtime\">iendtime</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the end time of the specified input.</p><ul><li><code>float iendtime(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the end time of the specified input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "ihasplane": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ihasplane\">ihasplane</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns 1 if the specified input has a plane named <code>planename</code>.</p><ul><li><code>int ihasplane(int input_number, string planename)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns 1 if the specified input has a plane named <code>planename</code>. Input\nnumbers start at 0.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number",
                    "planename"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "import": {
        "sigs": [
            {
                "argnames": [
                    "attrib_name",
                    "result",
                    "input"
                ],
                "args": [
                    "const string",
                    "export matrix3",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "values",
                    "input",
                    "pt_num"
                ],
                "args": [
                    "const string",
                    "export matrix3",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "result",
                    "input"
                ],
                "args": [
                    "const string",
                    "export matrix",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "values",
                    "input",
                    "pt_num"
                ],
                "args": [
                    "const string",
                    "export matrix",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "result",
                    "input"
                ],
                "args": [
                    "const string",
                    "export float",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "values",
                    "input",
                    "pt_num"
                ],
                "args": [
                    "const string",
                    "export float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "result",
                    "input"
                ],
                "args": [
                    "const string",
                    "export int",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "values",
                    "input",
                    "pt_num"
                ],
                "args": [
                    "const string",
                    "export int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "result",
                    "input"
                ],
                "args": [
                    "const string",
                    "export vector4",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "values",
                    "input",
                    "pt_num"
                ],
                "args": [
                    "const string",
                    "export vector4",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "result",
                    "input"
                ],
                "args": [
                    "const string",
                    "export vector",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "values",
                    "input",
                    "pt_num"
                ],
                "args": [
                    "const string",
                    "export vector",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "result",
                    "input"
                ],
                "args": [
                    "const string",
                    "float[]",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "attrib_name",
                    "values",
                    "input",
                    "pt_num"
                ],
                "args": [
                    "const string",
                    "export float[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "inedgegroup": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/inedgegroup\">inedgegroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns 1 if the edge specified by the point pair is in the group specified by the string.</p><ul><li><code>int inedgegroup(int input, string groupname, int pointnum0, int pointnum1)</code></li><li><code>int inedgegroup(string filename, string groupname, int pointnum0, int pointnum1)</code></li></ul>\n\n\n\n<p>Returns 1 if the edge specified by the point pair is in the group specified by the string. This function returns 0 if the group does not exist or if the edge is not contained in the group.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname",
                    "pointnum0",
                    "pointnum1"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "groupname",
                    "pointnum0",
                    "pointnum1"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "ingroup": {
        "sigs": [
            {
                "argnames": [
                    "group_name",
                    "point_number"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "inpointgroup": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/inpointgroup\">inpointgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns 1 if the point specified by the point number is in the group specified by the string.</p><ul><li><code>int inpointgroup(int input, string groupname, int pointnum)</code></li><li><code>int inpointgroup(string filename, string groupname, int pointnum)</code></li></ul>\n\n\n\n<p>Returns 1 if the point specified by the point number is in the group specified by the string. This function returns 0 if the group does not exist or if the point is not contained in the group.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname",
                    "pointnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "groupname",
                    "pointnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "inprimgroup": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/inprimgroup\">inprimgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns 1 if the primitive specified by the primitive number is in the group specified by the string.</p><ul><li><code>int inprimgroup(int input, string groupname, int primnum)</code></li><li><code>int inprimgroup(string filename, string groupname, int primnum)</code></li></ul>\n\n\n\n<p>Returns 1 if the primitive specified by the primitive number is in the group specified by the string. This function returns 0 if the group does not exist or if the primitive is not contained in the group.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname",
                    "primnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "groupname",
                    "primnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "insert": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/insert\">insert</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">array</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Inserts an item, array, or string into an array or string.</p><ul><li><code>void insert(string &amp;str, int index, string value)</code></li><li><code>void insert(int[] &amp;str, int index, int value)</code></li><li><code>void insert(int[] &amp;str, int index, int[] value)</code></li><li><code>void insert(string[] &amp;str, int index, string value)</code></li><li><code>void insert(string[] &amp;str, int index, string[] value)</code></li><li><code>void insert(float[] &amp;str, int index, float value)</code></li><li><code>void insert(float[] &amp;str, int index, float[] value)</code></li><li><code>void insert(vector2[] &amp;str, int index, vector2 value)</code></li><li><code>void insert(vector2[] &amp;str, int index, vector2[] value)</code></li><li><code>void insert(vector[] &amp;str, int index, vector value)</code></li><li><code>void insert(vector[] &amp;str, int index, vector[] value)</code></li><li><code>void insert(vector4[] &amp;str, int index, vector4 value)</code></li><li><code>void insert(vector4[] &amp;str, int index, vector4[] value)</code></li><li><code>void insert(matrix2[] &amp;str, int index, matrix2 value)</code></li><li><code>void insert(matrix2[] &amp;str, int index, matrix2[] value)</code></li><li><code>void insert(matrix3[] &amp;str, int index, matrix3 value)</code></li><li><code>void insert(matrix3[] &amp;str, int index, matrix3[] value)</code></li><li><code>void insert(matrix[] &amp;str, int index, matrix value)</code></li><li><code>void insert(matrix[] &amp;str, int index, matrix[] value)</code></li></ul>\n\n\n\n<p>Inserts the given value or array into the destination string or array at the\nprovided insertion point index.</p>\n<p>If the index is negative, it measures from the end of the string.  If, after\nthis, it is still negative, it is clamped to 0 (ie, prepend).</p>\n<p>with arrays, inserting past the end will grow the array up to the insertion\npoint by filling with zero or <code>\"\"</code>.</p>\n<p>With strings, inserting past the end will nominally fill with invalid\ncharacters, ie <code>\"\"</code>, and thus in practice append to the original string.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/len\">len()</a><div class=\"related-summary\">Returns the length of an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/push\">push()</a><div class=\"related-summary\">Adds an item to an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/append\">append()</a><div class=\"related-summary\">Adds an item to an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize()</a><div class=\"related-summary\">Sets the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export matrix2[]",
                    "const int",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export matrix2[]",
                    "const int",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export matrix3[]",
                    "const int",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export matrix3[]",
                    "const int",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export matrix[]",
                    "const int",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export matrix[]",
                    "const int",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export float[]",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export float[]",
                    "const int",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export int[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export int[]",
                    "const int",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export vector4[]",
                    "const int",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export vector4[]",
                    "const int",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export string[]",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export string[]",
                    "const int",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export vector2[]",
                    "const int",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export vector2[]",
                    "const int",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export vector[]",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "str",
                    "index",
                    "value"
                ],
                "args": [
                    "export vector[]",
                    "const int",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            }
        ]
    },
    "instance": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/instance\">instance</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Creates an instance transform matrix.</p><ul><li><code>matrix instance(vector P, vector N)</code></li><li><code>matrix instance(vector P, vector N, vector scale)</code></li><li><code>matrix instance(vector P, vector N, vector scale, vector pivot)</code></li><li><code>matrix instance(vector P, vector N, vector scale, vector4 rotate, vector up)</code></li><li><code>matrix instance(vector P, vector N, vector scale, vector4 rotate, vector up, vector pivot)</code></li><li><code>matrix instance(vector P, vector N, vector scale, vector4 rotate, vector4 orient)</code></li><li><code>matrix instance(vector P, vector N, vector scale, vector4 rotate, vector4 orient, vector pivot)</code></li></ul>\n\n\n\n<p>Creates a transform matrix from the given arguments, using the same\nmethod that the <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/copy\" title=\"Creates multiple copies of the input geometry, or copies the geometry\nonto the points of the second input.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/SOP/copy.svg\">[Image \ud83d\udd17]</a>Copy SOP</a> uses to transform its\noutput instances. The instance is placed at point <code>P</code>, oriented\nalong the normal direction <code>N</code>, and, optionally, scaled by <code>scale</code>.  An\noptional <code>pivot</code> parameter can be supplied as the local transformation point\nfor the instance.</p>\n<p>The function supports two methods for setting rotation. The fist method\nrequires an explicit <code>up</code> vector, which should be tangent to <code>N</code>. This\n<code>up</code> vector, along with <code>N</code>, is used to construct an orthonormal frame\nin which the rotation takes place.\nThe second method uses an explicit orientation relative to the XYZ axis\nto construct the frame.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/scale\">scale()</a><div class=\"related-summary\">Scales the given matrix in three directions simultaneously (X, Y, Z -\ngiven by the components of the scale_vector).</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rotate\">rotate()</a><div class=\"related-summary\">Applies a rotation to the given matrix.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/translate\">translate()</a><div class=\"related-summary\">Translates the given matrix.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "P",
                    "N"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "P",
                    "N",
                    "scale"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "P",
                    "N",
                    "scale",
                    "rotate",
                    "orient"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "P",
                    "N",
                    "scale",
                    "rotate",
                    "orient",
                    "pivot"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector4",
                    "const vector4",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "P",
                    "N",
                    "scale",
                    "rotate",
                    "up"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector4",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "P",
                    "N",
                    "scale",
                    "rotate",
                    "up",
                    "pivot"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector4",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "P",
                    "N",
                    "scale",
                    "pivot"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "interpolate": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/interpolate\">interpolate</a></h1><span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Interpolates a value across the currently shaded micropolygon.</p><ul><li><code>float interpolate(float val, float sx, float sy)</code></li><li><code>vector interpolate(vector val, float sx, float sy)</code></li><li><code>vector4 interpolate(vector4 val, float sx, float sy)</code></li><li><code>bsdf interpolate(bsdf val, float sx, float sy)</code></li></ul>\n\n\n\n<p>These operations can be used to generate antialiasing positions within\nthe micropolygon rendering engine.</p>\n<p><code>sx</code> and <code>sy</code> are random values, such as generated by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a>. Different\nvalues of <code>sx</code> and <code>sy</code> translate into different random positions on the micropolygon.</p>\n<p>The returned value is undefined in the raytracing engine.</p>\n<div class=\"code-container\">\n<code class=\"line\">vector hitP = interpolate(P, sx, sy);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_light\">sample_light()</a><div class=\"related-summary\">Samples a 3D position on a light source and runs the light shader at that point.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "val",
                    "sx",
                    "sy"
                ],
                "args": [
                    "const bsdf",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf"
            },
            {
                "argnames": [
                    "val",
                    "sx",
                    "sy"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "val",
                    "sx",
                    "sy"
                ],
                "args": [
                    "const vector4",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "val",
                    "sx",
                    "sy"
                ],
                "args": [
                    "const vector",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "intersect": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/intersect\">intersect</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">This function computes the intersection of the specified ray with the geometry.</p><ul><li><code>int intersect(int input, string group, vector orig, vector dir, vector &amp;p, vector &amp;uvw)</code></li><li><code>int intersect(int input, vector orig, vector dir, vector &amp;p, float &amp;u, float &amp;v)</code></li><li><code>int intersect(int input, vector orig, vector dir, vector &amp;p, vector &amp;uvw)</code></li><li><code>int intersect(string filename, string group, vector orig, vector dir, vector &amp;p, vector &amp;uvw)</code></li><li><code>int intersect(string filename, vector orig, vector dir, vector &amp;p, float &amp;u, float &amp;v, ...)</code></li><li><code>int intersect(string filename, vector orig, vector dir, vector &amp;p, vector &amp;uvw)</code></li></ul>\n\n\n\n<p>This function computes the intersection of the specified ray with the\ngeometry. The primitive number is returned, or -1 if there is an error or\nno intersection found.</p>\n<p>The world position of the intersection location is stored in <code>p</code>. The\ncorresponding parametric location of the intersection is stored in\n<code>u</code>, <code>v</code> or <code>uvw</code>. In the case of multiple intersections, the\nintersection closest to the ray origin is used.</p>\n<p>This function does not expect a normalized direction vector. Instead, it uses the length of the vector as the maximum distance. The integer result is the primitive hit.</p>\n<p>NOTE:\nWhen intersections are performed against metaball geometry, it is\nimpossible to determine the primitive number of the metaball which\nwas hit. In this case, the function returns the number of primitives\nin the intersection geometry.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "group",
                    "orig",
                    "dir",
                    "p",
                    "uvw"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "orig",
                    "dir",
                    "p",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector",
                    "vector",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "orig",
                    "dir",
                    "p",
                    "uvw"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "group",
                    "orig",
                    "dir",
                    "p",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "orig",
                    "dir",
                    "p",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "orig",
                    "dir",
                    "p",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "intersect_all": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/intersect_all\">intersect_all</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">This function computes all intersections of the specified ray with the geometry.</p><ul><li><code>int intersect_all(int input, string group, vector orig, vector dir, vector[] &amp;pos, int[] &amp;prim, vector[] &amp;uvw)</code></li><li><code>int intersect_all(int input, string group, vector orig, vector dir, vector[] &amp;pos, int[] &amp;prim, vector[] &amp;uvw, float tol=0.01, float ttol=0.01)</code></li><li><code>int intersect_all(int input, vector orig, vector dir, vector[] &amp;pos, int[] &amp;prim, vector[] &amp;uvw)</code></li><li><code>int intersect_all(int input, vector orig, vector dir, vector[] &amp;pos, int[] &amp;prim, vector[] &amp;uvw, float tol=0.01, float ttol=0.01)</code></li><li><code>int intersect_all(string filename, string group, vector orig, vector dir, vector[] &amp;pos, int[] &amp;prim, vector[] &amp;uvw)</code></li><li><code>int intersect_all(string filename, string group, vector orig, vector dir, vector[] &amp;pos, int[] &amp;prim, vector[] &amp;uvw, float tol=0.01, float ttol=0.01)</code></li><li><code>int intersect_all(string filename, vector orig, vector dir, vector[] &amp;pos, int[] &amp;prim, vector[] &amp;uvw)</code></li><li><code>int intersect_all(string filename, vector orig, vector dir, vector[] &amp;pos, int[] &amp;prim, vector[] &amp;uvw, float tol=0.01, float ttol=0.01)</code></li></ul>\n\n\n\n<p>This function returns all intersections along the specified ray with\nthe geometry of the filename or input. The number of intersections is\nreturned, or 0 if nothing was intersected.</p>\n<p>The list of world positions of the intersection locations is stored in <code>p</code>.\nThe corresponding primitive numbers and parametric locations of the intersections\nare stored in <code>prim</code> and <code>uvw</code>. The intersections are sorted in an\nascending order by distance from the origin.</p>\n<p>This function does not expect a normalized direction vector.\nInstead, it uses the length of the vector as the maximum distance.</p>\n<p>The <code>tol</code> and <code>ttol</code> specify the 3d tolerance and ray-tolerance respectively.\nCollision points within the parametric ray tolerance, <code>ttol</code> will be merged\ntogether, often useful to avoid getting extra intersects when hitting the edges\nof geometry.  If absolutely all intersections are desired, use -1 for <code>ttol</code>.</p>\n<p>NOTE:\nWhen intersections are performed against metaball geometry, it is\nimpossible to determine the primitive number of the metaball which\nwas hit. In this case, the function returns the number of primitives\nin the intersection geometry.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "group",
                    "orig",
                    "dir",
                    "pos",
                    "prim",
                    "uvw"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const vector",
                    "vector[]",
                    "int[]",
                    "vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "group",
                    "orig",
                    "dir",
                    "pos",
                    "prim",
                    "uvw",
                    "tol=0.01",
                    "ttol=0.01"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const vector",
                    "vector[]",
                    "int[]",
                    "vector[]",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "orig",
                    "dir",
                    "pos",
                    "prim",
                    "uvw"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector",
                    "vector[]",
                    "int[]",
                    "vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "orig",
                    "dir",
                    "pos",
                    "prim",
                    "uvw",
                    "tol=0.01",
                    "ttol=0.01"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector",
                    "vector[]",
                    "int[]",
                    "vector[]",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "group",
                    "orig",
                    "dir",
                    "pos",
                    "prim",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const vector",
                    "vector[]",
                    "int[]",
                    "vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "group",
                    "orig",
                    "dir",
                    "pos",
                    "prim",
                    "uvw",
                    "tol=0.01",
                    "ttol=0.01"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const vector",
                    "vector[]",
                    "int[]",
                    "vector[]",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "orig",
                    "dir",
                    "pos",
                    "prim",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "vector[]",
                    "int[]",
                    "vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "orig",
                    "dir",
                    "pos",
                    "prim",
                    "uvw",
                    "tol=0.01",
                    "ttol=0.01"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "vector[]",
                    "int[]",
                    "vector[]",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "intersect_lights": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/intersect_lights\">intersect_lights</a></h1><span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span></span><p class=\"summary\">Finds the nearest intersection of a ray with any of a list of (area) lights and runs the light shader at the intersection point.</p><ul><li><code>int intersect_lights(int[] lightids, vector pos, vector dir, float time, int &amp;idx, float &amp;dist, vector &amp;clr, float &amp;scale, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>If no light was hit by the ray, <code>intersect_lights</code> will return 0.  If a light\nwas hit, the return value will be a bitmask indicating what types of\nbounces the light affects.</p>\n<p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n<p>Only area lights will produce intersections.</p>\n<p><code>lightids</code>:\nAn array of light IDs, as returned by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlights\" title=\"Returns an array of light identifiers for the currently shaded surface.\">getlights()</a>.</p>\n<p><code>pos</code>:\nThe origin of the ray (such as the global variable <code>P</code>).</p>\n<p><code>dir</code>:\nDirection vector from the origin. The length of this vector does not affect\nthe distance the ray will travel.</p>\n<p><code>time</code>:\nTime to send the ray at.</p>\n<p>The function modifies the values of the following arguments:</p>\n<p><code>idx</code>:\nThe light index for the light that was hit by the ray, or -1 if no intersection was found.</p>\n<p><code>dist</code>:\nThe distance to the nearest intersected light.</p>\n<p><code>clr</code>:\nThe light color set by the light shader.</p>\n<p><code>scale</code>:\nThe light average hemispherical intensity (for area lights).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlightname\">getlightname()</a><div class=\"related-summary\">Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_light\">sample_light()</a><div class=\"related-summary\">Samples a 3D position on a light source and runs the light shader at that point.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lightids",
                    "pos",
                    "dir",
                    "time",
                    "idx",
                    "dist",
                    "clr",
                    "scale"
                ],
                "args": [
                    "const int[]",
                    "const vector",
                    "const vector",
                    "const float",
                    "int",
                    "float",
                    "vector",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "inumplanes": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/inumplanes\">inumplanes</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the number of planes in the given input.</p><ul><li><code>int inumplanes(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the number of planes in the given input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "invert": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/invert\">invert</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Inverts the matrix.</p><ul><li><code>matrix2 invert(matrix2 mat)</code></li><li><code>matrix3 invert(matrix3 mat)</code></li><li><code>matrix invert(matrix mat)</code></li></ul>\n\n\n\n<p>inverts the matrix. If the matrix is singular, the original matrix is\nreturned.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "invertexgroup": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/invertexgroup\">invertexgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns 1 if the vertex specified by the vertex number is in the group specified by the string.</p><ul><li><code>int invertexgroup(int input, string groupname, int vertexnum)</code></li><li><code>int invertexgroup(string filename, string groupname, int vertexnum)</code></li></ul>\n\n\n\n<p>Returns 1 if the vertex specified by the vertex number is in the group specified by the string. This function returns 0 if the group does not exist or if the vertex is not contained in the group.</p>\n<p>To convert a primitive number and vertex number within that primitive to a linear vertex number for the <code>vertexnum</code> parameter, use the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexindex\" title=\"Converts a primitive/vertex pair into a linear vertex.\">vertexindex()</a> function.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname",
                    "vertexnum"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "groupname",
                    "vertexnum"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "iplaneindex": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/iplaneindex\">iplaneindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the index of the plane named 'planename' in the specified input.</p><ul><li><code>int iplaneindex(int input_number, string planename)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the index of the plane named 'planename' in the specified input.\nInput numbers start at 0.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number",
                    "planename"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "iplanename": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/iplanename\">iplanename</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the name of the plane specified by the planeindex of the given input</p><ul><li><code>string iplanename(int input_number, int planeindex)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the name of the plane specified by the planeindex of the given\ninput (e.g. \"C\", \"A\").</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number",
                    "planeindex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "iplanesize": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/iplanesize\">iplanesize</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the number of components in the plane named <code>planename</code> in\nthe specified input.</p><ul><li><code>int iplanesize(int input_number, int planeindex)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the number of components in the plane named <code>planename</code> in the\nspecified input. Input numbers start at 0.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number",
                    "planeindex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "irate": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/irate\">irate</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the frame rate of the specified input.</p><ul><li><code>float irate(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the frame rate of the specified input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "irradiance": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/irradiance\">irradiance</a></h1><span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Computes irradiance (global illumination) at the point P with the\nnormal N.</p><ul><li><code>vector irradiance(vector P, vector N, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Computes irradiance (global illumination) at the point P with the normal\nN.</p>\n\n<h2 class=\"label heading\" id=\"keyword-arguments\">\n            \n            Keyword arguments\n        </h2>\n<div class=\"content\" id=\"keyword-arguments-body\">\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#rayopts\">optional parameters</a>.</p>\n<p><code>adaptive</code>:\n<code>1</code> or <code>0</code>. Turns on an automatic optimization that will reduce the\nnumber of samples when there is little variation in occlusion\nabove the sample point. This can improve performance at the\nexpense of some possible flickering or additional noise.</p>\n\n<p>\n<code>lightmask</code>\n\n<div class=\"content\">\n<p>You can use the <code>lightmask</code> keyword argument to pass a light name\n    pattern to limit the set of lights used to illuminate the hit surface.\n    This allows the tracing surface to control the lighting of the hit\n    surface.  The <code>\"scope:default\"</code> value will cause the <code>lightmask</code>\n    argument to use the default light mask for the current context - as if\n    the argument were not specified.</p>\n<div class=\"code-container\">\n..., \"lightmask\", \"hotlights*\");\n\n</div></div>\n</p>\n\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/occlusion\">occlusion()</a><div class=\"related-summary\">Computes ambient occlusion.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pathtrace\">pathtrace()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/reflectlight\">reflectlight()</a><div class=\"related-summary\">Computes the amount of reflected light which hits the surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/gather\">gather()</a><div class=\"related-summary\">Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/irradiance\">irradiance()</a><div class=\"related-summary\">Computes irradiance (global illumination) at the point P with the\nnormal N.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "P",
                    "N"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "isalpha": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isalpha\">isalpha</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns 1 if all the characters in the string are alphabetic</p><ul><li><code>int isalpha(string str)</code></li></ul>\n\n\n\n<p>Returns 1 if all the characters in the string are alphabetic. No numerals, punctuation\nor other special characters. If any are present then returns 0.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/isdigit\">isdigit()</a><div class=\"related-summary\">Returns 1 if all the characters in the string are numeric</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "str"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "isbound": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isbound\">isbound</a></h1><span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Parameters in VEX can be overridden by geometry attributes (if the attributes exist on the surface being rendered).</p><ul><li><code>int isbound(string variable_name)</code></li></ul>\n\n\n\n<p>Parameters in VEX can be overridden by geometry attributes (if the\nattributes exist on the surface being rendered). If the geometry\noverrides the default attribute, this function will return 1. Otherwise\nit will return 0.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>Though this function is defined for all contexts, it is only useful in the Displacement, Surface, and SOP contexts. No other contexts</p>\n</div>\n</div>\n</div>\n<p>can currently bind geometry attributes to VEX variables.</p>\n<p>Example, in a SOP function:</p>\n<div class=\"code-container\">\n<code class=\"line\">sop\n</code><code class=\"line\">mycolor(vector uv=0; string map=\"\")\n</code><code class=\"line\">{\n</code><code class=\"line\">if (isbound(\"uv\") &amp;&amp; map != \"\")\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// User has texture coordinates here, so create\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// velocity based on a texture map.\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0v = colormap(map, uv);\n</code><code class=\"line\">}\n</code><code class=\"line\">else\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// No texture coordinates, so use a random value\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0v = random(id);\n</code><code class=\"line\">}\n</code>\n</div>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p><code>isbound</code> does not tell you if the attribute exists. It tells you if the attribute is bound. If you added an <code>@a</code> to a wrangle to bind the <code>a</code>, then <code>isbound</code> will work as you expect in CVEX. Without an <code>@a</code>, there is no parameter in your CVEX function to bind the attribute to, so it will be unbound. </p>\n</div>\n</div>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "variable_name"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "isconnected": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isconnected\">isconnected</a></h1><span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Returns 1 if input_number is connected, or 0 if the input is not connected.</p><ul><li><code>int isconnected(int input_number)</code><span class=\"padder\"><span class=\"pillow\">chop</span></span><span class=\"padder\"><span class=\"pillow\">pop</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns 1 if <code>input_number</code> is connected, or 0 if the input is not\nconnected. Input numbering begins at 0.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "chop",
                    "pop",
                    "sop",
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "isdigit": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isdigit\">isdigit</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns 1 if all the characters in the string are numeric</p><ul><li><code>int isdigit(string str)</code></li></ul>\n\n\n\n<p>Returns 1 if all the characters in the string are numeric (0-9). No alphabetic characters,\npunctuation or other special characters. If any are present then returns 0.</p>\n<p>NOTE:\nIf passed the string \"543.34\", this function will return 0 because \".\" is not a digit.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/isalpha\">isalpha()</a><div class=\"related-summary\">Returns 1 if all the characters in the string are alphabetic</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "str"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "isfinite": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isfinite\">isfinite</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span></span><p class=\"summary\">Checks whether a value is a normal finite number.</p><ul><li><code>int isfinite(float x)</code></li></ul>\n\n\n\n<p>Returns 1 if the given value is a normal, finite, number.</p>\n<p>Returns 0 if it is a NAN or infinite.  Note that VEX generally\nwill not produce these: 3/0 is defined as 0, for example.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "x"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "isfogray": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isfogray\">isfogray</a></h1><span><span class=\"padder\"><span class=\"pillow\">fog</span></span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Returns 1 if the shader is being called to evaluate illumination for\nfog objects, or 0 if the light or shadow shader is being called to\nevaluate surface illumination.</p><ul><li><code>int isfogray()</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span></li></ul>\n\n\n\n<p>Returns 1 if the shader is being called to evaluate illumination for fog\nobjects, or 0 if the light or shadow shader is being called to evaluate\nsurface illumination.</p>\n<p>Use this function to simplify light shaders when evaluating for fog.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "light",
                    "shadow"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "isframes": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isframes\">isframes</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'frames', 0\notherwise.</p><ul><li><code>int isframes()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'frames', 0\notherwise.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "isnan": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isnan\">isnan</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span></span><p class=\"summary\">Checks whether a value is not a number.</p><ul><li><code>int isnan(float x)</code></li></ul>\n\n\n\n<p>Returns 1 if the given value is not a number.</p>\n<p>Returns 0 if it is a normal number or infinite.</p>\n<p>NAN, or Not A Number, is a special value floating point numbers can be set to\nto signal something has gone wrong in the computation.  They are carried\nforward by all further operations (adding or multiplying with them produces\nmore NANs) and tend to cause problems with downstream operations.</p>\n<p>In traditional programming, these are generated by 0/0 or <code>sqrt(-1)</code>, but in VEX\nmost such operations are guarded so normally VEX will not produce NANs.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "x"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "isotropic": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isotropic\">isotropic</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns an isotropic bsdf, which scatters light equally in all directions.</p><ul><li><code>bsdf isotropic(...)</code></li></ul>\n\n\n\n<p>The isotropic function scatters light equally in all directions and is suitable for use in rendering dense volumetric materials such as smoke. Note that no normal vector is required to construct an isotropic bsdf since it has no directionality. The default albedo for an isotropic <code>bsdf</code> is 1, which means the isotropic() function scatters 100% of the incoming light.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/henyeygreenstein\">henyeygreenstein()</a><div class=\"related-summary\">Returns an anisotropic volumetric bsdf, which can scatter light forward or backward.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/specular\">specular()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phong\">phong()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "israytracing": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/israytracing\">israytracing</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Indicates whether a shader is being executed for ray tracing.</p><ul><li><code>int israytracing()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns true when the current shader is shading ray hits.  For micropolygon\nrendering, the return value will be false.  This function can be used to\ndisambiguate shading styles for renders that use the vm_rayshade property -\nwhere only some objects are ray traced.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "issamples": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/issamples\">issamples</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'samples',\n0 otherwise.</p><ul><li><code>int issamples()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'samples', 0\notherwise.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "isseconds": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isseconds\">isseconds</a></h1><span><span class=\"padder\"><span class=\"pillow\">chop</span></span></span><p class=\"summary\">Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'seconds',\n0 otherwise.</p><ul><li><code>int isseconds()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns 1 if the Vex CHOP\u2019s Unit Menu is currently set to 'seconds', 0\notherwise.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "isshadowray": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isshadowray\">isshadowray</a></h1><span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Returns 1 if the shader is being called to evaluate opacity for\nshadow rays, or 0 if the shader is being called to evaluate for surface\ncolor.</p><ul><li><code>int isshadowray()</code><span class=\"padder\"><span class=\"pillow\">surface</span></span></li></ul>\n\n\n\n<p>Returns 1 if the shader is being called to evaluate opacity for shadow\nrays, or 0 if the shader is being called to evaluate for surface color.</p>\n<p>Use this function to compute different opacity if the surface is\nshadowing another surface.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "istart": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/istart\">istart</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the starting frame of the specified input.</p><ul><li><code>int istart(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the starting frame of the specified input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "istarttime": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/istarttime\">istarttime</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the start time of the specified input.</p><ul><li><code>float istarttime(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the start time of the specified input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "isuvrendering": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isuvrendering\">isuvrendering</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Indicats whether the shader is being evaulated while doing UV rendering (e.g. texture unwrapping)</p><ul><li><code>int isuvrendering()</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns 1 if the shader is being called while evaluating uv rendering (texture unwrapping), and 0 for normal rendering.</p>\n<p>Use this function to evaluate shaders differently when baking illumination.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "isvalidindex": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isvalidindex\">isvalidindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">array</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Checks if the index given is valid for the array or string given.</p><ul><li><code>int isvalidindex(string str, int index)</code></li><li><code>int isvalidindex(int[] &amp;str, int index)</code></li><li><code>int isvalidindex(string[] &amp;str, int index)</code></li><li><code>int isvalidindex(float[] &amp;str, int index)</code></li><li><code>int isvalidindex(vector2[] &amp;str, int index)</code></li><li><code>int isvalidindex(vector[] &amp;str, int index)</code></li><li><code>int isvalidindex(vector4[] &amp;str, int index)</code></li><li><code>int isvalidindex(matrix2[] &amp;str, int index)</code></li><li><code>int isvalidindex(matrix3[] &amp;str, int index)</code></li><li><code>int isvalidindex(matrix[] &amp;str, int index)</code></li></ul>\n\n\n\n<p>This is equivalent to the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">int pop(arraytype arr, int index)\n</code><code class=\"line\">{\n</code><code class=\"line\">int arrlen = len(arr);\n</code><code class=\"line\">return index &lt; arrlen &amp;&amp; index &gt;= -arlen;\n</code><code class=\"line\">}\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export matrix2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export matrix3[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export matrix[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export float[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export vector4[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export string[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export vector2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "str",
                    "index"
                ],
                "args": [
                    "export vector[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "isvarying": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/isvarying\">isvarying</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span></span><p class=\"summary\">Check whether a VEX variable is varying or uniform.</p><ul><li><code>int isvarying(int variable)</code></li><li><code>int isvarying(string variable)</code></li><li><code>int isvarying(float variable)</code></li><li><code>int isvarying(vector2 variable)</code></li><li><code>int isvarying(vector variable)</code></li><li><code>int isvarying(vector4 variable)</code></li><li><code>int isvarying(matrix2 variable)</code></li><li><code>int isvarying(matrix3 variable)</code></li><li><code>int isvarying(matrix variable)</code></li><li><code>int isvarying(light variable)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int isvarying(material variable)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int isvarying(bsdf variable)</code></li><li><code>int isvarying(int[] variable)</code></li><li><code>int isvarying(string[] variable)</code></li><li><code>int isvarying(float[] variable)</code></li><li><code>int isvarying(vector2[] variable)</code></li><li><code>int isvarying(vector[] variable)</code></li><li><code>int isvarying(vector4[] variable)</code></li><li><code>int isvarying(matrix2[] variable)</code></li><li><code>int isvarying(matrix3[] variable)</code></li><li><code>int isvarying(matrix[] variable)</code></li><li><code>int isvarying(bsdf[] variable)</code></li><li><code>int isvarying(light[] variable)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int isvarying(material[] variable)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns 1 when the given variable is varying, or 0 when it is uniform. A\nvariable is varying when it may have a different value for each processor\nin the VEX SIMD array. If a value is varying, shader execution will\ngenerally be slower - so this function can be useful when debugging shader\nperformance. Any variable type can be passed to the isvarying() function.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const light"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const material"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const bsdf[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const light[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const material[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "variable"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "itoa": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/itoa\">itoa</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Converts an integer to a string.</p><ul><li><code>string itoa(int number)</code></li></ul>\n\n\n\n<p>Converts an integer to a string.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "ixres": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ixres\">ixres</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the X resolution of the specified input.</p><ul><li><code>int ixres(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the X resolution of the specified input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "iyres": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/iyres\">iyres</a></h1><span><span class=\"padder\"><span class=\"pillow\">input_plane</span></span></span><p class=\"summary\">Returns the Y resolution of the specified input.</p><ul><li><code>int iyres(int input_number)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the Y resolution of the specified input.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "join": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/join\">join</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Concatenate all the strings of an array inserting a common spacer.</p><ul><li><code>string join(string[] s, string spacer)</code></li></ul>\n\n\n\n<p>Concatenate all the strings in the array to form a single string.\nThe spacer will be placed between each pair of strings.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "s",
                    "spacer"
                ],
                "args": [
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "kspline": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/kspline\">kspline</a></h1><p class=\"summary\">Returns an interpolated value along a spline curve.</p><ul><li><code>float kspline(string basis, float t, float v0, float k0, ...)</code></li><li><code>vector kspline(string basis, float t, vector v0, float k0, ...)</code></li><li><code>vector4 kspline(string basis, float t, vector4 v0, float k0, ...)</code></li></ul>\n\n\n\n<p>This function returns the value at a certain point\n<code>t</code> along a polyline or cubic spline specified by pairs of\n<code>v</code> (height) and <code>k</code> (position).</p>\n<p>TIP:\nTo specify uniform control points (that is, to only specify\nvalues and have the function distribute them uniformly),\nuse <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/spline\" title=\"Returns an interpolated value along a polyline or spline curve.\">spline()</a>.</p>\n<p>This function is the equivalent of:</p>\n<div class=\"code-container\">\n<code class=\"line\">type kspline(basis, t, v0, k0, v1, k1, v2, k2...)\n</code><code class=\"line\">{\n</code><code class=\"line\">float tk = spline(\"linearsolve\", t, k0, k1, k2, ...);\n</code><code class=\"line\">return spline(basis, tk, v0, v1, v2, ...);\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2 class=\"label heading\" id=\"linear\">\n            \n            Linear\n        </h2>\n<div class=\"content\" id=\"linear-body\">\n<p>When <code>basis</code> is <code>\"linear\"</code>, this function connects the control\npoint values with a polyline.</p>\n<p>For example, if you specified four v/k pairs:</p>\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../images/kspline_linear.png\">[Image \ud83d\udd17]\n</a></p>\n<p>\u2026the function returns the height of the orange dot at position <code>t</code>.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"cubic-spline\">\n            \n            Cubic spline\n        </h2>\n<div class=\"content\" id=\"cubic-spline-body\">\n<p>When <code>basis</code> is <code>\"cubic\"</code>, <code>\"catrom\"</code>, or <code>\"catmull-rom\"</code>, this\nfunction connects the point values with a Catmull-Rom spline.</p>\n<p>Note that the first and last values are outside the sample area to\nprovide the slope of the curve at the second point (at the start of the\nsample range) and the second-to-last point (at the end of the sample\nrange).</p>\n<p>For example, if you specified six v/k pairs:</p>\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../images/kspline_catrom.png\">[Image \ud83d\udd17]\n</a></p>\n<p>\u2026the function returns the height of the orange dot at position <code>t</code>.</p>\n<p>(This image is for illustration only, it does not show the correct\ncurve for the shown points.)</p>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/spline\">spline()</a><div class=\"related-summary\">Returns an interpolated value along a polyline or spline curve.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "basis",
                    "t",
                    "v0",
                    "k0"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "basis",
                    "t",
                    "v0",
                    "k0"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "basis",
                    "t",
                    "v0",
                    "k0"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            }
        ]
    },
    "len": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/len\">len</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns the length of an array.</p><ul><li><code>int len(string array)</code></li><li><code>int len(vector2 array)</code></li><li><code>int len(vector array)</code></li><li><code>int len(vector4 array)</code></li><li><code>int len(matrix2 array)</code></li><li><code>int len(matrix3 array)</code></li><li><code>int len(matrix array)</code></li><li><code>int len(int[] array)</code></li><li><code>int len(string[] array)</code></li><li><code>int len(float[] array)</code></li><li><code>int len(vector2[] array)</code></li><li><code>int len(vector[] array)</code></li><li><code>int len(vector4[] array)</code></li><li><code>int len(matrix2[] array)</code></li><li><code>int len(matrix3[] array)</code></li><li><code>int len(matrix[] array)</code></li><li><code>int len(bsdf[] array)</code></li><li><code>int len(light[] array)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int len(material[] array)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize()</a><div class=\"related-summary\">Sets the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const bsdf[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const light[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const material[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "length": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/length\">length</a></h1><span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the length of the vector or vector4.</p><ul><li><code>float length(float vec)</code></li><li><code>float length(vector2 vec)</code></li><li><code>float length(vector vec)</code></li><li><code>float length(vector4 vec)</code></li></ul>\n\n\n\n<p>Returns the length of the vector or vector4.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/length2\">length2</a><div class=\"related-summary\">Returns the squared distance of the vector or vector4.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            }
        ]
    },
    "length2": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/length2\">length2</a></h1><span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the squared distance of the vector or vector4.</p><ul><li><code>float length2(vector2 vec)</code></li><li><code>float length2(vector vec)</code></li><li><code>float length2(vector4 vec)</code></li></ul>\n\n\n\n<p>Returns the squared length of the vector or vector4.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/length\">length</a><div class=\"related-summary\">Returns the length of the vector or vector4.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "lerp": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/lerp\">lerp</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Performs bilinear interpolation between the values.</p><ul><li><code>float lerp(float value1, float value2, float amount)</code></li><li><code>vector2 lerp(vector2 value1, vector2 value2, float amount)</code></li><li><code>vector2 lerp(vector2 value1, vector2 value2, vector2 amount)</code></li><li><code>vector lerp(vector value1, vector value2, float amount)</code></li><li><code>vector lerp(vector value1, vector value2, vector amount)</code></li><li><code>vector4 lerp(vector4 value1, vector4 value2, float amount)</code></li><li><code>vector4 lerp(vector4 value1, vector4 value2, vector4 amount)</code></li><li><code>bsdf lerp(bsdf value1, bsdf value2, float amount)</code></li></ul>\n\n\n\n<p>Performs bilinear interpolation between the values. If the amount is\noutside the range 0 to 1, the values will be extrapolated linearly.</p>\n<p>If amount is 0, the first value is returned.  If it is 1, the second value is\nreturned.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const bsdf",
                    "const bsdf",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf"
            },
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            }
        ]
    },
    "lightbounces": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/lightbounces\">lightbounces</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span></span><p class=\"summary\">Returns the bounce mask for a light struct.</p><ul><li><code>int lightbounces(light lp)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the bounce mask for the light struct passed in. The bounce mask is based on the light object\u2019s <strong class=\"ui\">Lighting contribution</strong> parameter.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlight\">getlight()</a><div class=\"related-summary\">Returns a light struct for the specified light identifier.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lp"
                ],
                "args": [
                    "const light"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "lightid": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/lightid\">lightid</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span></span><p class=\"summary\">Returns the light id for a light struct.</p><ul><li><code>int lightid(light lp)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the integer light identifier of the light struct passed in.  The function returns -1 if the argument is invalid.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlight\">getlight()</a><div class=\"related-summary\">Returns a light struct for the specified light identifier.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlightname\">getlightname()</a><div class=\"related-summary\">Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lp"
                ],
                "args": [
                    "const light"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "limit_sample_space": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/limit_sample_space\">limit_sample_space</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Limits u in <a class=\"link missing \" href=\"0,1) to be in [minu,maxu\">/vex/functions/0,1) to be in [minu,maxu</a>, in a way that maintains uniformity and in-range consistency.</p><ul><li><code>float limit_sample_space(float maxu, float u)</code></li><li><code>float limit_sample_space(float minu, float maxu, float u)</code></li></ul>\n\n\n\n<p><code>minu</code>:\nMinimum desired value of <code>u</code>.  <code>minu</code> will be clamped to between 0 and 1.\nIf not specified, <code>minu</code> is 0.</p>\n<p><code>maxu</code>:\nMaximum desired value of <code>u</code>.  <code>maxu</code> will be clamped to between 0 and 1.</p>\n<p><code>u</code>:\nPair of numbers between 0 and 1.</p>\n<p>If <code>u</code> is outside of <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/`minu`,`maxu`\">/vex/functions/`minu`,`maxu`</a>, <code>u</code> is wrapped in the space in such a\nway that uniform random <code>u</code> in [0,1) will yield uniform random samples in\n<a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/`minu`,`maxu`\">/vex/functions/`minu`,`maxu`</a> and returned.  This avoids the extra samples at the bounds\nof the range that clamping to the range would introduce.  It also avoids the\nchanging of samples inside the range that fitting to the range would\nintroduce, i.e. if <code>u</code> is already in the range, the return value is exactly <code>u</code>.</p>\n<p>However, this is much slower than fitting or clamping, so only use\nit when both uniformity and consistency are needed.  For example, it can be\nuseful in avoiding outliers in probability distributions without affecting\nsamples that are not outliers.  It also introduces the issue that results\nwill no longer be monotone increasing with respect to <code>u</code>.\nFitting will often suffice for avoiding outliers too, at the expense\nof slightly affecting samples that are not outliers.</p>\n<p>To find <code>minu</code> and <code>maxu</code> given a <code>minvalue</code> and <code>maxvalue</code> of some probability\ndistribution, <code>minu = CDF(minvalue)</code> and <code>maxu = CDF(maxvalue)</code>, where <code>CDF</code>\nis the cumulative distribution function (not inverse) of the probability\ndistribution.  The versions of <code>sample_exponential</code>,\n<code>sample_cauchy</code>, <code>sample_normal</code>, <code>sample_lognormal</code>, and\n<code>sample_lognormal_by_median</code> that take a <code>minvalue</code> or <code>maxvalue</code> use fitting\ninstead of this limiting, because it maintains monotonicity, but this\nfunction can be applied to <code>u</code> before sampling, in order to have better\nconsistency for samples in the range.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_exponential\">sample_exponential()</a><div class=\"related-summary\">Samples the exponential distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cauchy\">sample_cauchy()</a><div class=\"related-summary\">Samples the Cauchy (Lorentz) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_normal\">sample_normal()</a><div class=\"related-summary\">Samples the normal (Gaussian) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal\">sample_lognormal()</a><div class=\"related-summary\">Samples the log-normal distribution based on parameters of the underlying normal distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal_by_median\">sample_lognormal_by_median()</a><div class=\"related-summary\">Samples the log-normal distribution based on median and standard deviation.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "maxu",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float"
            },
            {
                "argnames": [
                    "minu",
                    "maxu",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float"
            }
        ]
    },
    "limport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/limport\">limport</a></h1><span><span class=\"padder\"><span class=\"pillow\">fog</span></span><span class=\"padder\"><span class=\"pillow\">shadedata</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Imports a variable from the light shader for the surface.</p><ul><li><code>int limport(string name, int &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int limport(string name, string &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int limport(string name, float &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int limport(string name, vector2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int limport(string name, vector &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int limport(string name, vector4 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int limport(string name, matrix2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int limport(string name, matrix3 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int limport(string name, matrix &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Imports a variable from the light shader for the surface.</p>\n<p>If the shader variable named by the first argument is defined and\nexported, the function returns 1 and puts the value in the second\nargument. Otherwise, it returns 0.</p>\n<p>This function is only valid inside an <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> loop.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "lkspline": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/lkspline\">lkspline</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Computes a linear spline between the key points.</p><ul><li><code>float lkspline(float t, float v1, float k1, ...)</code></li><li><code>vector lkspline(float t, vector v1, float k1, ...)</code></li><li><code>vector4 lkspline(float t, vector4 v1, float k1, ...)</code></li></ul>\n\n\n\n<p>Computes a linear spline between the key points. The values are spaced\naccording to the keys given. The keys should be specified in ascending\norder or the results will be unpredictable.</p>\n<p>You should use the more flexible <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/spline\" title=\"Returns an interpolated value along a polyline or spline curve.\">spline()</a> and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/kspline\" title=\"Returns an interpolated value along a spline curve.\">kspline()</a> functions\ninstead of this.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/spline\">spline()</a><div class=\"related-summary\">Returns an interpolated value along a polyline or spline curve.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/kspline\">kspline()</a><div class=\"related-summary\">Returns an interpolated value along a spline curve.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "t",
                    "v1",
                    "k1"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "t",
                    "v1",
                    "k1"
                ],
                "args": [
                    "const float",
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "t",
                    "v1",
                    "k1"
                ],
                "args": [
                    "const float",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            }
        ]
    },
    "log": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/log\">log</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the natural logarithm of the argument.</p><ul><li><code>float log(float value)</code></li><li><code>vector2 log(vector2 value)</code></li><li><code>vector log(vector value)</code></li><li><code>vector4 log(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the natural logarithm of the argument</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "log10": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/log10\">log10</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the logarithm (base 10) of the argument.</p><ul><li><code>float log10(float value)</code></li><li><code>vector2 log10(vector2 value)</code></li><li><code>vector log10(vector value)</code></li><li><code>vector4 log10(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the logarithm (base 10) of the argument.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "lookat": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/lookat\">lookat</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Computes a rotation matrix or angles to orient the z-axis along the vector\n(to-from) under the transformation.</p><ul><li><code>vector lookat(vector from, vector to, float roll, int xyz)</code></li><li><code>vector lookat(vector from, vector to, vector up, int xyz)</code></li><li><code>matrix3 lookat(vector from, vector to)</code></li><li><code>matrix3 lookat(vector from, vector to, float roll)</code></li><li><code>matrix3 lookat(vector from, vector to, vector up)</code></li></ul>\n\n\n\n<p>Computes a rotation matrix or angles to orient the z-axis along the vector\n(to-from) under the transformation. If an up vector is specified, this\nwill determine the roll.\nxyz is a rotation order defined in $HFS/houdini/support/vex/include/math.h.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "from",
                    "to"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "from",
                    "to",
                    "roll"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "from",
                    "to",
                    "up"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "from",
                    "to",
                    "roll",
                    "xyz"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "from",
                    "to",
                    "up",
                    "xyz"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "lspline": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/lspline\">lspline</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Computes a linear spline between the key points.</p><ul><li><code>float lspline(float t, float val1, ...)</code></li><li><code>vector lspline(float t, vector val1, ...)</code></li><li><code>vector4 lspline(float t, vector4 val1, ...)</code></li></ul>\n\n\n\n<p>Computes a linear spline between the key points. This is equivalent to a\nsequence of lerp() functions.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "t",
                    "val1"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "t",
                    "val1"
                ],
                "args": [
                    "const float",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "t",
                    "val1"
                ],
                "args": [
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            }
        ]
    },
    "lstrip": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/lstrip\">lstrip</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Strips leading whitespace from a string.</p><ul><li><code>string lstrip(string value)</code></li><li><code>string lstrip(string value, string whitespace)</code></li></ul>\n\n\n\n<p>Returns a string with the leading whitespace removed.  If whitespace is provided, it is a string of characters that will be stripped.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rstrip\">rstrip()</a><div class=\"related-summary\">Strips trailing whitespace from a string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/strip\">strip()</a><div class=\"related-summary\">Strips leading and trailing whitespace from a string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "value",
                    "whitespace"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "luminance": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/luminance\">luminance</a></h1><span><span class=\"padder\"><span class=\"pillow\">color</span></span></span><p class=\"summary\">Compute the luminance of the RGB color specified by the parameters.</p><ul><li><code>float luminance(float r, float g, float b)</code></li><li><code>float luminance(vector vec)</code></li><li><code>float luminance(vector4 rgb)</code></li></ul>\n\n\n\n<p>Compute the CIE luminance of the RGB color specified by the parameters.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "r",
                    "g",
                    "b"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "rgb"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "lumname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/lumname\">lumname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the luminence plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string lumname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the luminence plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"L\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "makebasis": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/makebasis\">makebasis</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Creates an orthonormal basis given a z-axis vector.</p><ul><li><code>void makebasis(vector &amp;xaxis, vector &amp;yaxis, vector zaxis)</code></li><li><code>void makebasis(vector &amp;xaxis, vector &amp;yaxis, vector zaxis, vector u)</code></li></ul>\n\n\n\n<p>Completes an orthonormal basis for the given <code>zaxis</code> vector consisting of\nthe <code>xaxis</code> and <code>yaxis</code> basis vectors. When only the <code>zaxis</code> vector is\ngiven, the basis will have an arbitrary orientation. When a second vector\n<code>u</code> is provided, the <code>yaxis</code> vector will be constrained so that it is aligned\nwith that vector.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "xaxis",
                    "yaxis",
                    "zaxis"
                ],
                "args": [
                    "vector",
                    "vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xaxis",
                    "yaxis",
                    "zaxis",
                    "u"
                ],
                "args": [
                    "export vector",
                    "export vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "maketransform": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/maketransform\">maketransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Builds a 3\u00d73 or 4\u00d74 transform matrix.</p><ul><li><code>matrix3 maketransform(vector zaxis, vector yaxis)</code></li><li><code>matrix maketransform(int trs, int xyz, vector t, vector r, vector s)</code></li><li><code>matrix maketransform(int trs, int xyz, vector t, vector r, vector s, vector p)</code></li><li><code>matrix maketransform(vector zaxis, vector yaxis, vector translate)</code></li></ul>\n\n\n\n<p>Builds a 3\u00d73 or 4\u00d74 transform matrix.</p>\n<p><code>maketransform(int trs, ...)</code> builds a general 4\u00d74 transform matrix\ngiven an order of transformations (<code>trs</code>), an order for rotations\n(<code>xyz</code>), a vector representing the translation (<code>t</code>), rotation\n(<code>r</code>), scale (<code>s</code>) (and optionally a pivot (<code>p</code>)). The\nspecifications for the <code>trs</code> and <code>xyz</code> parameters can be found in\n<code>$HFS/houdini/vex/include/math.h</code></p>\n<p><code>maketransform(vector zaxis, yaxis, ...)</code> builds either a 3\u00d73 transform\nmatrix or a 4\u00d74 transform matrix. The matrix will be constructed so that the \nz-axis will be transformed to the z-axis specified with the given up vector \n(yaxis). Thus, maketransform({0,0,1}, {0,1,0}) will result in an identity \nmatrix. The version which returns a 4\u00d74 transform will apply the translation \nto the 4\u00d74 matrix. This function is very similar to the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/lookat\" title=\"Computes a rotation matrix or angles to orient the z-axis along the vector\n(to-from) under the transformation.\">lookat</a> \nfunction. The vectors passed in are <em>not</em> normalized meaning that scales \nshould be preserved in construction of the transform.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>Unlike most VEX function, this function expects rotations \n  in <em>degrees</em>, not radians.</p>\n</div>\n</div>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "zaxis",
                    "yaxis"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "trs",
                    "xyz",
                    "t",
                    "r",
                    "s"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "trs",
                    "xyz",
                    "t",
                    "r",
                    "s",
                    "p"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "zaxis",
                    "yaxis",
                    "translate"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "maskname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/maskname\">maskname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the mask plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string maskname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the mask plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"M\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "match": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/match\">match</a></h1><span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">This function returns 1 if the subject matches the pattern specified,\nor 0 if the subject doesn\u2019t match.</p><ul><li><code>int match(string pattern, string subject)</code></li></ul>\n\n\n\n<p>This function returns 1 if the subject matches the pattern specified, or\n0 if the subject doesn\u2019t match. The standard Houdini pattern matching is\nused. Multiple patterns may be separated by spaces or commas. The\nspecial characters for matching are:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>?</code> Match any character\n</li>\n<li class=\"bullet \">\n<code>*</code> Match any substring\n</li>\n<li class=\"bullet \">\n<code>[list]</code> Match any of the characters specified in the list.\n</li>\n<li class=\"bullet \">\nIf a pattern is prefixed by a caret (^), then subjects which match\nthis pattern will be excluded from the match.\n</li>\n</ul>\n<p>Examples:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>a*</code> - Match any string beginning with a.\n</li>\n<li class=\"bullet \">\n<code>a*,^aardvark</code> - Match any string beginning with a except for\naardvark.\n</li>\n<li class=\"bullet \">\n<code>[abc]*z</code> - Match any string beginning with a, b or c and ending with\nz.\n</li>\n<li class=\"bullet \">\n<code>g*,^geo*</code> - Match any string beginning with g, but not any string\nbeginning with geo.\n</li>\n</ul>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "pattern",
                    "subject"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "matchvex_blinn": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/matchvex_blinn\">matchvex_blinn</a></h1><span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\"></p><ul><li><code>bsdf matchvex_blinn(float exponent, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf matchvex_blinn(vector nml, float exponent, ...)</code></li></ul>\n\n\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/matchvex_blinn.png\">[Image \ud83d\udd17]\n</a></p>\n<p>The BSDF produced by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/blinn\" title=\"Returns the illumination for specular highlights using the Blinn model.\">blinn()</a> is not the same as the traditional VEX \n<code>blinn()</code> output. Use this function to produce a closer approximate match to \nthe traditional VEX <code>blinn()</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/blinn\">blinn()</a><div class=\"related-summary\">Returns the illumination for specular highlights using the Blinn model.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "exponent"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "exponent"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "matchvex_specular": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/matchvex_specular\">matchvex_specular</a></h1><span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\"></p><ul><li><code>bsdf matchvex_specular(float exponent, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf matchvex_specular(vector nml, float exponent, ...)</code></li></ul>\n\n\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/matchvex_specular.png\">[Image \ud83d\udd17]\n</a></p>\n<p>The BSDF produced by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/specular\" title=\"Returns the illumination for specular highlights using different lighting models.\">specular()</a> is not the same as the traditional VEX <code>specular()</code> output. Use this function to produce a closer approximate match to the traditional VEX <code>specular()</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/specular\">specular()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "exponent"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "exponent"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "mattrib": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/mattrib\">mattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">i3d</span></span></span><p class=\"summary\">Returns the value of the point attribute for the metaballs if\nmetaball geometry is specified to i3dgen.</p><ul><li><code>float mattrib(string name, vector P)</code><span class=\"padder\"><span class=\"pillow\">image3d</span></span></li><li><code>vector mattrib(string name, vector P)</code><span class=\"padder\"><span class=\"pillow\">image3d</span></span></li><li><code>vector4 mattrib(string name, vector P)</code><span class=\"padder\"><span class=\"pillow\">image3d</span></span></li><li><code>matrix3 mattrib(string name, vector P)</code><span class=\"padder\"><span class=\"pillow\">image3d</span></span></li><li><code>matrix mattrib(string name, vector P)</code><span class=\"padder\"><span class=\"pillow\">image3d</span></span></li></ul>\n\n\n\n<p>Returns the value of the point attribute for the metaballs if metaball\ngeometry is specified to i3dgen.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "name",
                    "P"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "image3d"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "name",
                    "P"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "image3d"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "name",
                    "P"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "image3d"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "name",
                    "P"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "image3d"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "name",
                    "P"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "image3d"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "max": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/max\">max</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\"></p><ul><li><code>int max(int vec)</code></li><li><code>int max(int value1, int value2, ...)</code></li><li><code>int max(int[] vec)</code></li><li><code>float max(float vec)</code></li><li><code>float max(float a, float b, ...)</code></li><li><code>float max(vector2 vec)</code></li><li><code>float max(vector vec)</code></li><li><code>float max(vector4 vec)</code></li><li><code>float max(float[] vec)</code></li><li><code>vector2 max(vector2 value1, vector2 value2, ...)</code></li><li><code>vector2 max(vector2[] vec)</code></li><li><code>vector max(vector a, vector b, ...)</code></li><li><code>vector max(vector[] vec)</code></li><li><code>vector4 max(vector4 a, vector4 b, ...)</code></li><li><code>vector4 max(vector4[] vec)</code></li></ul>\n\n\n\n<p>Returns the maximum of the vector\u2019s 3 components</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float max(float a, float b)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector max(vector a, vector b)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 max(vector4 a, vector4 b)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the maximum parameter</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">type max(type[] arr)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the maximum value in the array.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int max(int, int, ...)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the maximum of the given arguments.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/min\">min()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "value1",
                    "value2"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value1",
                    "value2"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "mdensity": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/mdensity\">mdensity</a></h1><span><span class=\"padder\"><span class=\"pillow\">i3d</span></span></span><p class=\"summary\">Returns the density of the metaball field if metaball geometry is\nspecified to i3dgen.</p><ul><li><code>float mdensity(vector P)</code><span class=\"padder\"><span class=\"pillow\">image3d</span></span></li></ul>\n\n\n\n<p>Returns the density of the metaball field if metaball geometry is\nspecified to i3dgen.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "P"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "image3d"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "metadata": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/metadata\">metadata</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">cop</span></span></span><p class=\"summary\">Returns a metadata value from a composite operator.</p><ul><li><code>int metadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>int metadata(int opinput, string name, int index)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>string metadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float metadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>float metadata(int opinput, string name, int index)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector metadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>vector4 metadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>matrix2 metadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>matrix3 metadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>matrix metadata(int opinput, string name)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the metadata value associated with metadata <code>name</code>, or zero if the \nmetadata doesn\u2019t exist, the input isn\u2019t connected, or the index is out of range\n(identity matrices for the matrix versions).</p>\n\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>The input of the COP VOP to fetch the metadata from.</p>\n</div>\n</p>\n<p>\n<code>name</code>\n\n<div class=\"content\">\n<p>The name of the metadata to fetch.</p>\n</div>\n</p>\n<p>\n<code>index</code>\n\n<div class=\"content\">\n<p>For component-wise <code>metadata</code> versions, this indicates the component of the\n   vector, matrix, quaternion, or array to fetch.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hasmetadata\">hasmetadata()</a><div class=\"related-summary\">Queries if metadata exists on a composite operator.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/cinput\">cinput()</a><div class=\"related-summary\">Returns point sampled input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/binput\">binput()</a><div class=\"related-summary\">Returns bilinearly sampled input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/finput\">finput()</a><div class=\"related-summary\">Returns fully filtered pixel input.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ninput\">ninput()</a><div class=\"related-summary\">Reads a pixel and its eight neighbors into a 3\u00d73 matrix.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "name",
                    "index"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "name",
                    "index"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "metaimport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/metaimport\">metaimport</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Once you get a handle to a metaball using metastart and metanext, you\ncan query attributes of the metaball with metaimport.</p><ul><li><code>int metaimport(int handle, string attribute_name, vector pos, int &amp;value)</code></li><li><code>int metaimport(int handle, string attribute_name, vector pos, float &amp;value)</code></li><li><code>int metaimport(int handle, string attribute_name, vector pos, vector2 &amp;value)</code></li><li><code>int metaimport(int handle, string attribute_name, vector pos, vector &amp;value)</code></li><li><code>int metaimport(int handle, string attribute_name, vector pos, vector4 &amp;value)</code></li><li><code>int metaimport(int handle, string attribute_name, vector pos, matrix2 &amp;value)</code></li><li><code>int metaimport(int handle, string attribute_name, vector pos, matrix3 &amp;value)</code></li><li><code>int metaimport(int handle, string attribute_name, vector pos, matrix &amp;value)</code></li><li><code>int[] metaimport(string geometry, string attribute_name, vector pos)</code></li><li><code>float[] metaimport(string geometry, string attribute_name, vector pos)</code></li><li><code>vector[] metaimport(string geometry, string attribute_name, vector pos)</code></li><li><code>vector4[] metaimport(string geometry, string attribute_name, vector pos)</code></li><li><code>matrix3[] metaimport(string geometry, string attribute_name, vector pos)</code></li><li><code>matrix[] metaimport(string geometry, string attribute_name, vector pos)</code></li></ul>\n\n\n\n<p>Once you get a handle to a metaball using <a at=\"\" class=\"link Vex\" for=\"\" handle\"=\"\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/metastart\" interest,=\"\" metaballs=\"\" of=\"\" p.\"=\"\" position=\"\" the=\"\" title=\"Open a geometry file and return a \">metastart()</a> and\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/metanext\" title=\"Iterate to the next metaball in the list of metaballs returned by the metastart() function.\">metanext()</a>, you can query attributes of the metaball with\n<code>metaimport</code>.</p>\n<p>There are three \"special\" attributes you can query:</p>\n<p><code>float meta:density</code> :\nThe density of the current metaball</p>\n<p><code>float meta:prim</code> :\nThe primitive number of the current metaball</p>\n<p><code>matrix meta:transform</code> :\nThe transform associated with the current metaball. Applying the\ninverse of this transform will transform a point into the \"space\" of\nthe metaball.</p>\n<p>For example, the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/metaweight\" title=\"Returns the metaweight of the geometry at position p.\">metaweight()</a> function can be expressed in the following\nway:</p>\n<div class=\"code-container\">\n<code class=\"line\">float\n</code><code class=\"line\">metaweight(string file; vector P)\n</code><code class=\"line\">{\n</code><code class=\"line\">int        handle;\n</code><code class=\"line\">float    density, tmp;\n</code><code class=\"line\">\n</code><code class=\"line\">density = 0;\n</code><code class=\"line\">handle = metastart(file, P);\n</code><code class=\"line\">while (metanext(handle))\n</code><code class=\"line\">{\n</code><code class=\"line\">if (metaimport(handle, \"meta:density\", P, tmp))\n</code><code class=\"line\">density += tmp;\n</code><code class=\"line\">}\n</code><code class=\"line\">return density;\n</code><code class=\"line\">}\n</code>\n</div>\n<p>The attributes evaluated are un-premultiplied by the weight of the\nmetaball at the position and must be multiped for blending. For\nexample, to evaluate a vector attribute (say color) on metaballs, the\nfollowing function could be used:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector\n</code><code class=\"line\">meta_attribute(string file, attrib_name; vector P)\n</code><code class=\"line\">{\n</code><code class=\"line\">int        handle;\n</code><code class=\"line\">vector    result, tmp;\n</code><code class=\"line\">float    density;\n</code><code class=\"line\">\n</code><code class=\"line\">handle = metastart(file, P);\n</code><code class=\"line\">result = 0;\n</code><code class=\"line\">while (metanext(handle))\n</code><code class=\"line\">{\n</code><code class=\"line\">if (metaimport(handle, \"meta:density\", P, density))\n</code><code class=\"line\">{\n</code><code class=\"line\">if (metaimport(handle, attrib_name, P, tmp))\n</code><code class=\"line\">result += density * tmp;\n</code><code class=\"line\">}\n</code><code class=\"line\">return result;\n</code><code class=\"line\">}\n</code>\n</div>\n<p>In the i3d context, there is a default metaball geometry (specified\nby the <code>-g</code> option on the command line to the i3dgen program). If the\nfilename is an empty string, the default geometry will be used.</p>\n\n<h2 class=\"label heading\" id=\"array-form\">\n            \n            Array form\n        </h2>\n<div class=\"content\" id=\"array-form-body\">\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">arraytype metaimport(string file, attribute; vector P)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Rather than iterating over all the values, these functions will import the values from all metaballs simultaneously. As with the scalar counterparts, you can use the keywords\u2026</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>meta:density</code>\n</li>\n<li class=\"bullet \">\n<code>meta:prim</code>\n</li>\n<li class=\"bullet \">\n<code>meta:transform</code>\n</li>\n</ul>\n<p>\u2026to import non-attribute information from the metaballs.</p>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "attribute_name",
                    "pos",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "attribute_name",
                    "pos",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "attribute_name",
                    "pos",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "attribute_name",
                    "pos",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "attribute_name",
                    "pos",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "attribute_name",
                    "pos",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "attribute_name",
                    "pos",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "attribute_name",
                    "pos",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "metamarch": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/metamarch\">metamarch</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Takes the ray defined by p0 and p1 and partitions it into zero or\nmore sub-intervals where each interval intersects a cluster of metaballs\nfrom filename.</p><ul><li><code>int metamarch(int &amp;index, string filename, vector &amp;p0, vector &amp;p1, float displace_bound)</code></li></ul>\n\n\n\n<p>Takes the ray defined by <code>p0</code> and <code>p1</code> and partitions it into zero\nor more sub-intervals where each interval intersects a cluster of\nmetaballs from <code>filename</code>. The interval may not actually intersect any\nmetaballs, but will provide fairly tight bounds on the cluster.</p>\n<p>This allows a ray-marching algorithm to \"skip\" uninteresting areas and\nonly focus on marching through areas where metaballs might be found.</p>\n<p>The first time you call the function, use <code>index</code>=-1 and set <code>p0</code>\nand <code>p1</code> to the endpoints of the ray. If the function finds an\ninterval, it returns 1 and sets <code>p0</code> and <code>p1</code> to the endpoints of\nthe interval and increments <code>index</code>. Otherwise it returns 0 and\ndoesn\u2019t alter the arguments.</p>\n<p>So, you can repeatedly call the function with variables for the\n<code>index</code>, <code>index</code>, and <code>index</code> arguments to ray-march through areas\nof interest, skipping the dead space:</p>\n<div class=\"code-container\">\n<code class=\"line\">int    index;\n</code><code class=\"line\">vector    p0, p1;\n</code><code class=\"line\">// Initialize input values\n</code><code class=\"line\">index = -1;\n</code><code class=\"line\">p0 = Eye; p1 = P;\n</code><code class=\"line\">result = 0;\n</code><code class=\"line\">while (metamarch(index, metaball_file, p0, p1, displace_bound))\n</code><code class=\"line\">{\n</code><code class=\"line\">result += ray_march(metaball_file, p0, p1);\n</code><code class=\"line\">}\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "index",
                    "filename",
                    "p0",
                    "p1",
                    "displace_bound"
                ],
                "args": [
                    "export int",
                    "const string",
                    "export vector",
                    "export vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "metanext": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/metanext\">metanext</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Iterate to the next metaball in the list of metaballs returned by the <code>metastart()</code> function.</p><ul><li><code>int metanext(int handle)</code></li></ul>\n\n\n\n<p>This iterates through the list of metaballs returned by <code>metastart()</code>.  The function returns <code>0</code> if there are no further metaballs in selected by <code>metastart()</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/metastart\">metastart</a><div class=\"related-summary\">Open a geometry file and return a </div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/metadata\">metadata</a><div class=\"related-summary\">Returns a metadata value from a composite operator.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/metaimport\">metaimport</a><div class=\"related-summary\">Once you get a handle to a metaball using metastart and metanext, you\ncan query attributes of the metaball with metaimport.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/metamarch\">metamarch</a><div class=\"related-summary\">Takes the ray defined by p0 and p1 and partitions it into zero or\nmore sub-intervals where each interval intersects a cluster of metaballs\nfrom filename.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/metaweight\">metaweight</a><div class=\"related-summary\">Returns the metaweight of the geometry at position p.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "metastart": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/metastart\">metastart</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Open a geometry file and return a \"handle\" for the metaballs of\ninterest, at the position p.</p><ul><li><code>int metastart(string filename, vector p)</code></li></ul>\n\n\n\n<p>Open a geometry file and return a \"handle\" for the metaballs of\ninterest, at the position <code>p</code>. You can then use\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/metanext\" title=\"Iterate to the next metaball in the list of metaballs returned by the metastart() function.\">metanext</a> to move the handle to the next metaball for\nevaluation, and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/metaimport\" title=\"Once you get a handle to a metaball using metastart and metanext, you\ncan query attributes of the metaball with metaimport.\">metaimport</a> to query attributes of the\nmetaball.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "p"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "metaweight": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/metaweight\">metaweight</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the metaweight of the geometry at position p.</p><ul><li><code>float metaweight(string filename, vector p)</code></li></ul>\n\n\n\n<p>Returns the metaweight of the geometry at position <code>p</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "p"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "min": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/min\">min</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\"></p><ul><li><code>int min(int vec)</code></li><li><code>int min(int value1, int value2, ...)</code></li><li><code>int min(int[] vec)</code></li><li><code>float min(float vec)</code></li><li><code>float min(float a, float b, ...)</code></li><li><code>float min(vector2 vec)</code></li><li><code>float min(vector vec)</code></li><li><code>float min(vector4 vec)</code></li><li><code>float min(float[] vec)</code></li><li><code>vector2 min(vector2 value1, vector2 value2, ...)</code></li><li><code>vector2 min(vector2[] vec)</code></li><li><code>vector min(vector a, vector b, ...)</code></li><li><code>vector min(vector[] vec)</code></li><li><code>vector4 min(vector4 a, vector4 b, ...)</code></li><li><code>vector4 min(vector4[] vec)</code></li></ul>\n\n\n\n<p>Returns the minimum of the vector\u2019s 3 components</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float min(float a, float b)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector min(vector a, vector b)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 min(vector4 a, vector4 b)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the minimum parameter</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">type min(type[] arr)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the minimum value in the array.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int min(int, int, ...)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the minimum of the given arguments.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/max\">max()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "value1",
                    "value2"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value1",
                    "value2"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "a",
                    "b"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            },
            {
                "argnames": [
                    "vec"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "minpos": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/minpos\">minpos</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds the closest position on the surface of a geometry.</p><ul><li><code>vector minpos(int opinput, string primgroup, vector pt)</code></li><li><code>vector minpos(int opinput, string primgroup, vector pt, float maxdist)</code></li><li><code>vector minpos(int opinput, vector pt)</code></li><li><code>vector minpos(int opinput, vector pt, float maxdist)</code></li><li><code>vector minpos(string geometry, string primgroup, vector pt)</code></li><li><code>vector minpos(string geometry, string primgroup, vector pt, float maxdist)</code></li><li><code>vector minpos(string geometry, vector pt)</code></li><li><code>vector minpos(string geometry, vector pt, float maxdist)</code></li></ul>\n\n\n\n<p>Returns the closest point on the surface of the geometry to\nthe given search point.  If none is found in <code>maxdist</code>, the\nprovided <code>pt</code> is returned.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be \"op:full_path_to_sop\" to reference a SOP.</p>\n<p><code>primgroup</code>:\nThe name of a primitive group or a pattern to generate a primitive\ngroup.  Uses the same semantics as a SOP group, so empty strings\nwill match all primitives.  Attribute groups like <code>@Cd.x&gt;0</code> can\nalso be used, but note that the <code>@</code> may need to be escaped with\na backslash in a <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/vop/snippet\" title=\"Runs a VEX snippet to modify the incoming values.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/COMMON/wrangle.svg\">[Image \ud83d\udd17]</a>Snippet VOP</a>.</p>\n<p><code>pt</code>:\nThe position in space to find the closest surface point on the geometry to.</p>\n<p><code>maxdist</code>:\nThe maximum distance to search.  The operation can be sped up if it\nis allowed to quit early.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primgroup",
                    "pt"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "primgroup",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "pt"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "primgroup",
                    "pt"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "primgroup",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "pt"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "mspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/mspace\">mspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">i3d</span></span></span><p class=\"summary\">Transforms the position specified into the \"local\" space of the\nmetaball.</p><ul><li><code>vector mspace(vector P)</code><span class=\"padder\"><span class=\"pillow\">image3d</span></span></li></ul>\n\n\n\n<p>Transforms the position specified into the \"local\" space of the\nmetaball. This function is only valid inside the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/forpoints\">forpoints()</a> loop\nconstruct.</p>\n<p>An example use of this function would be to compute noise based on a\n\"rest\" position\u2026 For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">forpoints(P) {\n</code><code class=\"line\">vector npos = mspace(P) - mattrib(\"rest\", P);\n</code><code class=\"line\">nval += noise(npos);\n</code><code class=\"line\">}\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "P"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "image3d"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "nametopoint": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nametopoint\">nametopoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Looks up a point number by a name attribute.</p><ul><li><code>int nametopoint(int opinput, string name)</code></li><li><code>int nametopoint(string file, string name)</code></li></ul>\n\n\n\n<p>Looks up a point number from a name attribute value.</p>\n<p>If the specified geometry has an attribute named <code>name</code>, the first point\nwith an name value matching the provided value is returned.  If no\nsuch point is found, -1 is returned.</p>\n<p>This is a short form for the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">int nametopoint(const string opname; const string name)\n</code><code class=\"line\">{\n</code><code class=\"line\">return findattribval(opname, 'point', 'name', name);\n</code><code class=\"line\">}\n</code>\n</div>\n<p><code>opinput</code>:\nWhich input to the current node.\n<code>name</code>:\nThe name to search for.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "nametoprim": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nametoprim\">nametoprim</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Looks up a primitive number by a name attribute.</p><ul><li><code>int nametoprim(int opinput, string name)</code></li><li><code>int nametoprim(string geometry, string name)</code></li></ul>\n\n\n\n<p>Looks up a primitive number from a name attribute value.</p>\n<p>If the specified geometry has an attribute named <code>name</code>, the first primitive\nwith an name value matching the provided value is returned.  If no\nsuch primitive is found, -1 is returned.</p>\n<p>This is a short form for the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">int nametoprim(const string opname; const string name)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return findattribval(opname, 'prim', 'name', name);\n</code><code class=\"line\">}\n</code>\n</div>\n\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>Which input to the current node.</p>\n</div>\n</p>\n<p>\n<code>name</code>\n\n<div class=\"content\">\n<p>The name to search for.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "nbouncetypes": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nbouncetypes\">nbouncetypes</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\"></p><ul><li><code>int nbouncetypes()</code></li></ul>\n\n\n\n<p>Return the number of different bounce types supported by the renderer.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbounces\">getbounces()</a></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "nearpoint": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nearpoint\">nearpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds the closest point in a geometry.</p><ul><li><code>int nearpoint(int opinput, string ptgroup, vector pt)</code></li><li><code>int nearpoint(int opinput, string ptgroup, vector pt, float maxdist)</code></li><li><code>int nearpoint(int opinput, vector pt)</code></li><li><code>int nearpoint(int opinput, vector pt, float maxdist)</code></li><li><code>int nearpoint(string geometry, string ptgroup, vector pt)</code></li><li><code>int nearpoint(string geometry, string ptgroup, vector pt, float maxdist)</code></li><li><code>int nearpoint(string geometry, vector pt)</code></li><li><code>int nearpoint(string geometry, vector pt, float maxdist)</code></li></ul>\n\n\n\n<p>Returns the number of the closest point on the geometry.\nThis will only search against points, not the surface locations\nof the geometry.  Use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/xyzdist\" title=\"Finds the distance of a point to a geometry.\">xyzdist()</a> to find the closest point on surfaces or curves.</p>\n<p>-1 is returned if no point is found in the search distance.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n  this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>ptgroup</code>\n\n<div class=\"content\">\n<p>A point group pattern to limit the search to.  Can be a SOP-style group\n  pattern such as <code>0-10</code> or <code>@Cd.x&gt;0.5</code>.  An empty string will match all points.</p>\n</div>\n</p>\n<p>\n<code>pt</code>\n\n<div class=\"content\">\n<p>The position in space to find the closest point on the geometry to.</p>\n</div>\n</p>\n<p>\n<code>maxdist</code>\n\n<div class=\"content\">\n<p>The maximum distance to search.  The operation can be sped up if it\n  is allowed to quit early.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nearpoints\">nearpoints</a><div class=\"related-summary\">Finds the all the closest point in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind\">pcfind</a><div class=\"related-summary\">Returns a list of closest points from a file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind_radius\">pcfind_radius</a><div class=\"related-summary\">Returns a list of closest points from a file taking into account their radii.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pgfind\">pgfind</a><div class=\"related-summary\">Returns a list of closest points from a file.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "ptgroup",
                    "pt"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "ptgroup",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "pt"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "ptgroup",
                    "pt"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "ptgroup",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "pt"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "nearpoints": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nearpoints\">nearpoints</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds the all the closest point in a geometry.</p><ul><li><code>int[] nearpoints(int opinput, string ptgroup, vector pt, float maxdist)</code></li><li><code>int[] nearpoints(int opinput, string ptgroup, vector pt, float maxdist, int maxpts)</code></li><li><code>int[] nearpoints(int opinput, vector pt, float maxdist)</code></li><li><code>int[] nearpoints(int opinput, vector pt, float maxdist, int maxpts)</code></li><li><code>int[] nearpoints(string geometry, string ptgroup, vector pt, float maxdist)</code></li><li><code>int[] nearpoints(string geometry, string ptgroup, vector pt, float maxdist, int maxpts)</code></li><li><code>int[] nearpoints(string geometry, vector pt, float maxdist)</code></li><li><code>int[] nearpoints(string geometry, vector pt, float maxdist, int maxpts)</code></li></ul>\n\n\n\n<p>Returns the number of the closest point on the geometry.\nThis will only search against points, not the surface locations\nof the geometry.  Use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/xyzdist\" title=\"Finds the distance of a point to a geometry.\">xyzdist()</a> to find the closest point on surfaces or curves.</p>\n<p>-1 is returned if no point is found in the search distance.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be \"op:full_path_to_sop\" to reference a SOP.</p>\n<p><code>ptgroup</code>:\nA point group pattern to limit the search to.  Can be a SOP-style group\npattern such as <code>0-10</code> or <code>@Cd.x&gt;0.5</code>.  An empty string will match\nall points.</p>\n<p><code>pt</code>:\nThe position in space to find the closest point on the geometry to.</p>\n<p><code>maxdist</code>:\nThe maximum distance to search.</p>\n<p><code>maxpts</code>:\nThe maximum number of points to find.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nearpoint\">nearpoint</a><div class=\"related-summary\">Finds the closest point in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind\">pcfind</a><div class=\"related-summary\">Returns a list of closest points from a file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind_radius\">pcfind_radius</a><div class=\"related-summary\">Returns a list of closest points from a file taking into account their radii.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pgfind\">pgfind</a><div class=\"related-summary\">Returns a list of closest points from a file.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "ptgroup",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "ptgroup",
                    "pt",
                    "maxdist",
                    "maxpts"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "pt",
                    "maxdist",
                    "maxpts"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "ptgroup",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "ptgroup",
                    "pt",
                    "maxdist",
                    "maxpts"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "pt",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "pt",
                    "maxdist",
                    "maxpts"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "nedgesgroup": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nedgesgroup\">nedgesgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of edges in the group.</p><ul><li><code>int nedgesgroup(int input, string groupname)</code></li><li><code>int nedgesgroup(string filename, string groupname)</code></li></ul>\n\n\n\n<p>Returns the number of edges in the specified group in the input or geometry file.</p>\n<p>This must refer to an exact group name, not an adhoc group pattern.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/expandedgegroup\">expandedgegroup()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/inedgegroup\">inedgegroup()</a><div class=\"related-summary\">Returns 1 if the edge specified by the point pair is in the group specified by the string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "groupname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "neighbour": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/neighbour\">neighbour</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the point index of the neighbour of the point.</p><ul><li><code>int neighbour(int inputnum, int ptnum, int neighbournum)</code></li><li><code>int neighbour(string filename, int ptnum, int neighbournum)</code></li></ul>\n\n\n\n<p>Returns the point index of the neighbour of the point. The order is\nundefined, but will be consistent for consistent geometry. Returns -1 if\nthe <code>neighbournum</code> is out of range for that point, or the point is out of\nrange for that input, or the input doesn\u2019t exist.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "ptnum",
                    "neighbournum"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "ptnum",
                    "neighbournum"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "neighbourcount": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/neighbourcount\">neighbourcount</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of points that are connected to the specified point.</p><ul><li><code>int neighbourcount(int inputnum, int ptnum)</code></li><li><code>int neighbourcount(string filename, int ptnum)</code></li></ul>\n\n\n\n<p>Returns the number of points that are connected to the specified point.\nA point is connected if it is adjacent in some polygon, or is one of the\nfour surrounding points in a grid or NURBs surface. Returns 0 if there\nis no input, or if the point number is out of range.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "ptnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "ptnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "neighbours": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/neighbours\">neighbours</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns an array of the point numbers of the neighbours of a point.</p><ul><li><code>int[] neighbours(int input, int ptnum)</code></li><li><code>int[] neighbours(string filename, int ptnum)</code></li></ul>\n\n\n\n<p>This is a simpler, array-based replacement for the combination of\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/neighbourcount\" title=\"Returns the number of points that are connected to the specified point.\">neighbourcount()</a> and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/neighbour\" title=\"Returns the point index of the neighbour of the point.\">neighbour()</a>.\nIt is roughly equivalent to the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">int []\n</code><code class=\"line\">neighbours(int input, int ptnum)\n</code><code class=\"line\">{\n</code><code class=\"line\">int     i, n;\n</code><code class=\"line\">int     result[];\n</code><code class=\"line\">n = neighbourcount(input, ptnum);\n</code><code class=\"line\">resize(result, n);\n</code><code class=\"line\">for (i = 0; i &lt; n; i++)\n</code><code class=\"line\">result[i] = neighbour(input, ptnum, i);\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/neighbourcount\">neighbourcount()</a><div class=\"related-summary\">Returns the number of points that are connected to the specified point.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/neighbour\">neighbour()</a><div class=\"related-summary\">Returns the point index of the neighbour of the point.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "ptnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "ptnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "newgroup": {
        "sigs": [
            {
                "argnames": [
                    "group_name"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "newsampler": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/newsampler\">newsampler</a></h1><span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\"></p><ul><li><code>int newsampler(...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int newsampler(int seed, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns an initialized sampler sequence for use as the first argument\nto the nextsample function.</p>\n<p>An optional seed value can also be used. This can be useful when random\nsampling into a point cloud, for consistent results.</p>\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a></p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "NOARG",
                "return": "int",
                "variadic": true
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true
            }
        ]
    },
    "nextsample": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample</a></h1><span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\"></p><ul><li><code>void nextsample(int &amp;sid, float &amp;sx, float &amp;sy, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void nextsample(int &amp;sid, vector &amp;svec, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p><a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/newsampler\">newsampler()</a> and this function expose the high-quality deterministic sampling patterns used by mantra for pixel anti-aliasing. When rendering in raytracing mode, it\u2019s possible to generate deterministic 2D samples with <code>nextsample</code> routine by initializing the sampling sequence with the <code>SID</code> global variable.</p>\n<p>This method can generate either 2D or 3D sampling patterns.  To generate 2D samples, use the signature with 2 float write-only arguments.  To generate 3D samples, use the signature with a vector write-only argument.</p>\n<p>You can add an extra argument, <code>\"mode\"</code>, followed by one of the following:</p>\n<p><code>\"qstrat\"</code>:\nAdvances to the next sample in the pattern. You should use this mode when using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/newsampler\">newsampler()</a>.</p>\n<p><code>\"nextpixel\"</code>:\nAdvances to a new pixel sampling pattern. You should use this mode when using SID with raytracing to generate good-quality sampling patterns within a pixel. This mode takes into account other samples within the current pixel and will appropriately stratify itself.  If rendering with micropolygon rendering, \"nextpixel\" will behave the same as \"qstrat\".</p>\n<p><code>\"decorrelate\"</code>:\nAdvances to a new decorrelated sample. You should use this mode to deterministically generate a new sampling sequence that is unrelated to an existing sequence. Similarly to \"nextpixel\", this mode preserves high-quality pixel sampling when used with SID and raytracing.</p>\n<div class=\"code-container\">\n<code class=\"line\">int nsamples = 10;\n</code><code class=\"line\">int sid = israytrace ? SID : newsampler();\n</code><code class=\"line\">\n</code><code class=\"line\">for (i = 0; i &lt; nsamples; i++)\n</code><code class=\"line\">{\n</code><code class=\"line\">if (israytrace)\n</code><code class=\"line\">nextsample(sid, sx, sy, \"mode\", \"nextpixel\");\n</code><code class=\"line\">else\n</code><code class=\"line\">nextsample(sid, sx, sy, \"mode\", \"qstrat\");\n</code><code class=\"line\">// Sample something using sx/sy...\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/newsampler\">newsampler()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "sid",
                    "sx",
                    "sy"
                ],
                "args": [
                    "export int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "sid",
                    "svec"
                ],
                "args": [
                    "export int",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "ninput": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ninput\">ninput</a></h1><span><span class=\"padder\"><span class=\"pillow\">cop</span></span></span><p class=\"summary\">Reads a pixel and its eight neighbors into a 3\u00d73 matrix.</p><ul><li><code>matrix3 ninput(int input_number, int planeindex, int arrayindex, int component, int u, int v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li><li><code>matrix3 ninput(int input_number, int planeindex, int arrayindex, int component, float u, float v, int frame, ...)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Reads a pixel and its eight neighbors into a 3\u00d73 matrix. Ideal for\nsimple kernel and subpixel operations. The floating point UV version\nalways rounds to the nearest pixel.</p>\n<p>Only one component is read at a time. To read a Color plane, you would\nneed to call ninput() three times to read R,G and B (with component set\nto 0, 1 and 2).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "component",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "matrix3",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "input_number",
                    "planeindex",
                    "arrayindex",
                    "component",
                    "u",
                    "v",
                    "frame"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "matrix3",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "ninputs": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ninputs\">ninputs</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Returns the number of inputs.</p><ul><li><code>int ninputs()</code><span class=\"padder\"><span class=\"pillow\">chop</span></span></li></ul>\n\n\n\n<p>Returns the number of inputs on the current node.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "chop"
                ],
                "fillstate": "NOARG",
                "return": "int"
            }
        ]
    },
    "noise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/noise\">noise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</p><ul><li><code>float noise(float x)</code></li><li><code>float noise(float x, float y)</code></li><li><code>float noise(vector xyz)</code></li><li><code>float noise(vector4 xyzt)</code></li><li><code>vector noise(float x)</code></li><li><code>vector noise(float x, float y)</code></li><li><code>vector noise(vector xyz)</code></li><li><code>vector noise(vector4 xyzt)</code></li></ul>\n\n\n\n<p>There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</p>\n<p>NOTE:\nThis function generates non-periodic noise. Use the\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pnoise\" title=\"There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.\">pnoise</a> function to generate periodic Perlin noise.</p>\n<p>The various functions return the noise value at a 4D (vector4 argument),\n3D (vector argument), 2D (two float arguments) or 1D (float argument)\nposition. You can get a random float value or a vector of three random\nvalues.</p>\n<p>The noise is in the range 0-1 with a median of 0.5. The distribution of\nthe noise depends on the dimension, with higher dimensions approaching a\nGaussian distribution of noise values.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pnoise\">pnoise</a><div class=\"related-summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x",
                    "y"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyzt"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyz"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "x",
                    "y"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyzt"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyz"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "noised": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/noised\">noised</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Derivatives of Perlin Noise.</p><ul><li><code>void noised(float x, float &amp;v, float &amp;dvdx)</code></li><li><code>void noised(float x, float y, float &amp;v, float &amp;dvdx, float &amp;dvdy)</code></li><li><code>void noised(float x, float y, vector &amp;v, vector &amp;dvdx, vector &amp;dvdy)</code></li><li><code>void noised(float x, vector &amp;v, vector &amp;dvdx)</code></li><li><code>void noised(vector xyz, float &amp;v, float &amp;dvdx, float &amp;dvdy, float &amp;dvdz)</code></li><li><code>void noised(vector xyz, vector &amp;v, vector &amp;dvdx, vector &amp;dvdy, vector &amp;dvdz)</code></li><li><code>void noised(vector4 xyzw, float &amp;v, float &amp;dvdx, float &amp;dvdy, float &amp;dvdz, float &amp;dvdw)</code></li><li><code>void noised(vector4 xyzw, vector &amp;v, vector &amp;dvdx, vector &amp;dvdy, vector &amp;dvdz, vector &amp;dvdw)</code></li></ul>\n\n\n\n<p>This computes both the perlin noise value, and the derivatives of the\nnoise along each axis.  This can be performed quite efficiently as\nthere are analytic derivatives available.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/noise\">noise</a><div class=\"related-summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x",
                    "v",
                    "dvdx"
                ],
                "args": [
                    "const float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "x",
                    "y",
                    "v",
                    "dvdx",
                    "dvdy"
                ],
                "args": [
                    "const float",
                    "const float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "x",
                    "y",
                    "v",
                    "dvdx",
                    "dvdy"
                ],
                "args": [
                    "const float",
                    "const float",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "x",
                    "v",
                    "dvdx"
                ],
                "args": [
                    "const float",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xyzw",
                    "v",
                    "dvdx",
                    "dvdy",
                    "dvdz",
                    "dvdw"
                ],
                "args": [
                    "const vector4",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xyzw",
                    "v",
                    "dvdx",
                    "dvdy",
                    "dvdz",
                    "dvdw"
                ],
                "args": [
                    "const vector4",
                    "vector",
                    "vector",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xyz",
                    "v",
                    "dvdx",
                    "dvdy",
                    "dvdz"
                ],
                "args": [
                    "const vector",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xyz",
                    "v",
                    "dvdx",
                    "dvdy",
                    "dvdz"
                ],
                "args": [
                    "const vector",
                    "vector",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "normal_bsdf": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/normal_bsdf\">normal_bsdf</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Returns the normal for the diffuse component of a bsdf.</p><ul><li><code>vector normal_bsdf(bsdf b)</code></li></ul>\n\n\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/albedo\">albedo()</a><div class=\"related-summary\">Returns the albedo (percentage of reflected light) for a bsdf given the outgoing light direction.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/eval_bsdf\">eval_bsdf()</a><div class=\"related-summary\">Evaluates a bsdf given two vectors.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_bsdf\">sample_bsdf()</a><div class=\"related-summary\">Samples a bsdf.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "b"
                ],
                "args": [
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "normalize": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/normalize\">normalize</a></h1><span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the normalized vector.</p><ul><li><code>vector2 normalize(vector2 v)</code></li><li><code>vector normalize(vector v)</code></li><li><code>vector4 normalize(vector4 v)</code></li></ul>\n\n\n\n<p>Returns the normalized vector</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "normalname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/normalname\">normalname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the normal plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string normalname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the normal plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"N\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "npoints": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/npoints\">npoints</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of points in the input or geometry file.</p><ul><li><code>int npoints(int input_number)</code></li><li><code>int npoints(string filename)</code></li></ul>\n\n\n\n<p>Returns the number of points in the input specified, or 0 if there is no input connected.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int npoints(string filename)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the number of points in the geometry file.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "npointsgroup": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/npointsgroup\">npointsgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of points in the group.</p><ul><li><code>int npointsgroup(int input, string groupname)</code></li><li><code>int npointsgroup(string filename, string groupname)</code></li></ul>\n\n\n\n<p>Returns the number of points in the specified group in the input or geometry file.</p>\n<p>This must refer to an exact group name, not an adhoc group pattern.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/expandpointgroup\">expandpointgroup()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/inpointgroup\">inpointgroup()</a><div class=\"related-summary\">Returns 1 if the point specified by the point number is in the group specified by the string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hasattrib\">hasattrib()</a><div class=\"related-summary\">Checks whether a geometry attribute exists.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "groupname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "nprimitives": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nprimitives\">nprimitives</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of primitives in the input or geometry file.</p><ul><li><code>int nprimitives(int input_number)</code></li><li><code>int nprimitives(string filename)</code></li></ul>\n\n\n\n<p>Returns the number of primitives in the input specified, or 0 if there is no input connected.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int nprimitives(string filename)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the number of primitives in the geometry file.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "nprimitivesgroup": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nprimitivesgroup\">nprimitivesgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of primitives in the group.</p><ul><li><code>int nprimitivesgroup(int input, string groupname)</code></li><li><code>int nprimitivesgroup(string filename, string groupname)</code></li></ul>\n\n\n\n<p>Returns the number of primitives in the specified group in the input or geometry file.</p>\n<p>This must refer to an exact group name, not an adhoc group pattern.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/expandprimgroup\">expandprimgroup()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/inprimgroup\">inprimgroup()</a><div class=\"related-summary\">Returns 1 if the primitive specified by the primitive number is in the group specified by the string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hasattrib\">hasattrib()</a><div class=\"related-summary\">Checks whether a geometry attribute exists.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "groupname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "nrandom": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nrandom\">nrandom</a></h1><span><span class=\"padder\"><span class=\"pillow\">random</span></span></span><p class=\"summary\">The nrandom() functions are non-deterministic random number\ngenerators for VEX.</p><ul><li><code>void nrandom(float &amp;x, float &amp;y, ...)</code></li><li><code>float nrandom(...)</code></li><li><code>vector nrandom(...)</code></li><li><code>vector4 nrandom(...)</code></li></ul>\n\n\n\n<p>The nrandom() functions are non-deterministic random number generators\nfor VEX. Numbers generated will be between 0 and 1. These random\ngenerators will generate the same sequence of random numbers if called\nin precisely the same order. However, there is no seed involved so it is\nnot possible to reproduce the same random number or sequence multiple\ntimes.</p>\n<p>You can optionally specify a string argument to choose the random number\ngeneration method. The string may be one of:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>default</code>: Efficient random number generation. This method is backward\ncompatible with previous releases of Houdini.\n</li>\n<li class=\"bullet \">\n<code>mersenne</code> or <code>twister</code>: Uses the Mersenne Twister which has some very\nnice properties. This code is based of the work of: Copyright (C) 1997\n</li>\n<li class=\"bullet \">\n2002, Makoto Matsumoto and Takuji Nishimura, All rights reserved.\n</li>\n<li class=\"bullet \">\n<code>qstrat</code>: Uses a quasi-stratified random number generator. This tends\nto distribute the random numbers evenly, reducing clumping and\nspacing.\n</li>\n</ul>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "x",
                    "y"
                ],
                "args": [
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "vector",
                "variadic": true
            }
        ]
    },
    "ntransform": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">See ptransform.</p><ul><li><code>vector ntransform(string fromspace, string tospace, vector n)</code></li><li><code>vector ntransform(string tospace, vector n)</code></li><li><code>vector ntransform(vector n, matrix transform_matrix)</code></li></ul>\n\n\n\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/ptransform\" title=\"Transforms a vector from one space to another.\">ptransform</a>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vtransform\">vtransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a><div class=\"related-summary\">Transforms a vector from one space to another.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a><div class=\"related-summary\">See getspace</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "fromspace",
                    "tospace",
                    "n"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "tospace",
                    "n"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "n",
                    "transform_matrix"
                ],
                "args": [
                    "const vector",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "nuniqueval": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nuniqueval\">nuniqueval</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of unique values from an integer or string attribute.</p><ul><li><code>int nuniqueval(int opinput, string class, string attribute_name)</code></li><li><code>int nuniqueval(string file, string class, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns the number of unique values from an integer or string attribute.</p>\n\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>Which input to the current node.</p>\n</div>\n</p>\n<p>\n<code>file</code>\n\n<div class=\"content\">\n<p>A geometry file on disk or an op: operator reference.</p>\n</div>\n</p>\n<p>\n<code>class</code>\n\n<div class=\"content\">\n<p>What type of attribute: <code>detail</code>, <code>primitive</code>, <code>point</code>, or <code>vertex</code>.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute, ie <code>P</code> or <code>Cd</code>.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "class",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "nvertices": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nvertices\">nvertices</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of vertices in the input or geometry file.</p><ul><li><code>int nvertices(int input_number)</code></li><li><code>int nvertices(string filename)</code></li></ul>\n\n\n\n<p>Returns the number of vertices in the input specified, or 0 if there is no input connected.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int nvertices(string filename)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the number of vertices for all primitives in the geometry file.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input_number"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "nverticesgroup": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/nverticesgroup\">nverticesgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the number of vertices in the group.</p><ul><li><code>int nverticesgroup(int input, string groupname)</code></li><li><code>int nverticesgroup(string filename, string groupname)</code></li></ul>\n\n\n\n<p>Returns the number of vertices in the specified group in the input or geometry file.</p>\n<p>This must refer to an exact group name, not an adhoc group pattern.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "groupname"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "groupname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "occlusion": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/occlusion\">occlusion</a></h1><span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Computes ambient occlusion.</p><ul><li><code>void occlusion(float &amp;coverage, vector &amp;missed_direction, vector P, vector N, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector occlusion(vector P, vector N, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Computes ambient occlusion at the point P with the normal N. Just as\nin the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/irradiance\" title=\"Computes irradiance (global illumination) at the point P with the\nnormal N.\">irradiance</a> function, the hemisphere is\nsampled. However, unlike irradiance, surfaces intersected during the\nhemisphere sampling are not shaded. For this function to work\nproperly, either a constant background color or an environment map\nmust be specified in the\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#scope\">optional scope parameters</a>.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">void occlusion(float coverage&amp;, vector missed_direction&amp;, vector P, vector N)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Instead of computing color information from ambient occlusion, this\nform computes the coverage (the percentage of occlusion) and the\naverage direction of empty space. The average direction can be used to\nlook up the color in a pre-blurred environment map.</p>\n\n<h2 class=\"label heading\" id=\"keyword-arguments\">\n            \n            Keyword arguments\n        </h2>\n<div class=\"content\" id=\"keyword-arguments-body\">\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#rayopts\">optional parameters</a> .</p>\n\n<tr>\n</tr>\n<td>\n<code>variancevar</code>\n</td>\n<td>\n    string\n    \n</td>\n<td>\n</td>\n<p>The name of a VEX variable to use for variance anti-aliasing.</p>\n<p>This variable must be imported from the hit surface, so it must be in the list of imported names (see \"importing information back from the ray\" below). If the named variable is not imported, this option will be ignored.\ntr&gt;&gt;\ntd&gt;&gt;<code>adaptive</code>\ntd&gt;&gt;1 or 0\ntd&gt;&gt;\nTurns on an automatic optimization that will reduce the\nnumber of samples when there is little variation in occlusion\nabove the sample point. This can improve performance at the\nexpense of some possible flickering or additional noise.</p>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/irradiance\">irradiance()</a><div class=\"related-summary\">Computes irradiance (global illumination) at the point P with the\nnormal N.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pathtrace\">pathtrace()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "coverage",
                    "missed_direction",
                    "P",
                    "N"
                ],
                "args": [
                    "float",
                    "vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "P",
                    "N"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "ocean_sample": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ocean_sample\">ocean_sample</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Evaluates an ocean spectrum and samples the result at a given time and location.</p><ul><li><code>vector ocean_sample(string geometry, int phase, int frequency, int amplitude, float hscale, float time, int mode, int downsample, vector pos)</code></li></ul>\n\n\n\n<p>Evaluates the input ocean spectrum at the given time and position and returns the value specified by <code>mode</code>.  The input is typically the output of the <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/oceanspectrum\" title=\"Generates volumes containing information for simulating ocean waves.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/SHELF/wave.svg\">[Image \ud83d\udd17]</a>Ocean Spectrum</a> SOP.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>phase</code>\n\n<div class=\"content\">\n<p>The primitive number of the volume representing wave phase.</p>\n</div>\n</p>\n<p>\n<code>frequency</code>\n\n<div class=\"content\">\n<p>The primitive number of the volume representing wave frequency.</p>\n</div>\n</p>\n<p>\n<code>amplitude</code>\n\n<div class=\"content\">\n<p>The primitive number of the volume representing wave amplitude.</p>\n</div>\n</p>\n<p>\n<code>hscale</code>\n\n<div class=\"content\">\n<p>The amount to scale any horizontal motion in the ocean waves.</p>\n</div>\n</p>\n<p>\n<code>mode</code>\n\n<div class=\"content\">\n<p>The type of value to sample from the ocean spectrum, where 0 means displacement, 1 means velocity, and 2 means horizontal spatial derivatives.</p>\n</div>\n</p>\n<p>\n<code>downsample</code>\n\n<div class=\"content\">\n<p>The number of times to downsample the input spectrum before evaluation.  Each downsample level halves the resolution of the input.</p>\n</div>\n</p>\n<p>\n<code>pos</code>\n\n<div class=\"content\">\n<p>The position in object space at which to sample the evaluated ocean.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Displace the point position by an ocean spectrum stored in a file.</p>\n<div class=\"code-container\">\n<code class=\"line\">@P += ocean_sample(\"spectrum.bgeo\", 0, 1, 2, 0.7, @Time, 0, 0, @P);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geometry",
                    "phase",
                    "frequency",
                    "amplitude",
                    "hscale",
                    "time",
                    "mode",
                    "downsample",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "ocio_import": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ocio_import\">ocio_import</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">color</span></span><span class=\"padder\"><span class=\"pillow\">ocio</span></span></span><p class=\"summary\">Imports attributes from OpenColorIO spaces.</p><ul><li><code>int ocio_import(string space, string property, int &amp;value)</code></li><li><code>int ocio_import(string space, string property, string &amp;value)</code></li><li><code>int ocio_import(string space, string property, vector &amp;value)</code></li></ul>\n\n\n\n<p>This function queries data associated with a color space.</p>\n<p>If the function fails, the <code>value</code> variable will not be modified,\nand may be left uninitialized.</p>\n\n<h2 class=\"label heading\" id=\"queryable-attributes\">\n            \n            Queryable attributes\n        </h2>\n<div class=\"content\" id=\"queryable-attributes-body\">\n<p>There list of properties includes most of the properties defined in the OCIO configuration file:</p>\n\n<p>\n<code>string name</code>\n\n<div class=\"content\">\n<p>The name of the color space.</p>\n</div>\n</p>\n<p>\n<code>string family</code>\n\n<div class=\"content\">\n<p>The color space family.</p>\n</div>\n</p>\n<p>\n<code>string equalitygroup</code>\n\n<div class=\"content\">\n<p>The equality group for the color space.</p>\n</div>\n</p>\n<p>\n<code>string description</code>\n\n<div class=\"content\">\n<p>A description of the color space.</p>\n</div>\n</p>\n<p>\n<code>int isdata</code>\n\n<div class=\"content\">\n<p>True if the color space is suitable for non-color pixel data (such as normals, point positions, etc.)</p>\n</div>\n</p>\n<p>\n<code>string bitdepth</code>\n\n<div class=\"content\">\n<p>A string representing the color space bit depth.</p>\n</div>\n</p>\n<p>\n<code>string allocation</code>\n\n<div class=\"content\">\n<p>Either <code>uniform</code> or <code>lg2</code> (log2).</p>\n</div>\n</p>\n<p>\n<code>vector allocationvars</code>\n\n<div class=\"content\">\n<p>The allocation variables (min, max, offset).</p>\n</div>\n</p>\n\n</div>\n\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n<code class=\"line\">cvex test()\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0string        token;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0string        sval;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int                ival;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector        vval;\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Color spaces may be specified by name or by role\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0foreach(space; { \"sRGB\", \"color_picker\" })\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach(token; { \"name\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"description\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"isdata\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"allocation\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"allocationvars\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"description\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} )\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"----------------- %s ---------------------\\n\", token);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (teximport(map, token, sval))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"'%s' = %s\\n\", token, sval);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (teximport(map, token, ival))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"'%s' = %d\\n\", token, ival);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (teximport(map, token, vval))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fprintf(stderr, \"'%s' = %g\\n\", token, vval);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/dsmpixel\">dsmpixel()</a><div class=\"related-summary\">Reads the z-records stored in a pixel of a deep shadow map\nor deep camera map.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "space",
                    "property",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "space",
                    "property",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "space",
                    "property",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "ocio_spaces": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ocio_spaces\">ocio_spaces</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">color</span></span><span class=\"padder\"><span class=\"pillow\">ocio</span></span></span><p class=\"summary\">Returns the names of color spaces supported in Open Color IO</p><ul><li><code>string[] ocio_spaces()</code></li></ul>\n\n\n\n<p>Returns a list of names of the color spaces supported by Open Color IO in Houdini.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "string[]"
            }
        ]
    },
    "ocio_transform": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ocio_transform\">ocio_transform</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">color</span></span><span class=\"padder\"><span class=\"pillow\">ocio</span></span></span><p class=\"summary\">Transform colors using Open Color IO</p><ul><li><code>vector ocio_transform(string src, string dest, vector clr)</code></li><li><code>vector ocio_transform(string dest, vector clr)</code></li><li><code>vector4 ocio_transform(string src, string dest, vector4 clr)</code></li><li><code>vector4 ocio_transform(string dest, vector4 clr)</code></li></ul>\n\n\n\n<p>Transform a color from one color space to another using Open Color IO.\nWhen no <code>src</code> color space is given, the space assigned to the <code>\"data\"</code> role is assumed.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "dest",
                    "clr"
                ],
                "args": [
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "src",
                    "dest",
                    "clr"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "src",
                    "dest",
                    "clr"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "dest",
                    "clr"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "onoise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/onoise\">onoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">These functions are similar to wnoise and vnoise.</p><ul><li><code>float onoise(vector pos)</code></li><li><code>float onoise(vector pos, int turbulence, float rough, float atten)</code></li><li><code>vector onoise(vector pos)</code></li><li><code>vector onoise(vector pos, int turbulence, float rough, float atten)</code></li></ul>\n\n\n\n<p>These functions are similar to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/wnoise\" title=\"Worley noise scatters points randomly through space (according to a\nnice Poisson distribution).\">wnoise</a> and\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vnoise\" title=\"Voronoi noise gives almost identical results to the Worley noise\nfunctions.\">vnoise</a>. However, they are marginally less efficient in\ncomputation and don\u2019t have the same characteristics. The bounds on the\nnoise are roughly (-1, 1). Only 3D noise is supported. However, this\nnoise has the ability to compute turbulence with roughness and\nattenuation on the noise.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos",
                    "turbulence",
                    "rough",
                    "atten"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "pos",
                    "turbulence",
                    "rough",
                    "atten"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "opdigits": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/opdigits\">opdigits</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span></span><p class=\"summary\">Returns the integer value of the last sequence of digits of a string</p><ul><li><code>int opdigits()</code></li><li><code>int opdigits(string str)</code></li></ul>\n\n\n\n<p>Returns the integer value of the last sequence of digits in the input string.</p>\n<p>If no argument is passed, the code is equivalent to</p>\n<div class=\"code-container\">\n<code class=\"line\">string dir, name;\n</code><code class=\"line\">splitpath(opfullpath(\".\"), dir, name);\n</code><code class=\"line\">return opdigits(name);\n</code>\n</div>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>opdigits(\"/obj/geo34/box21\")</code> - returns 21\n</li>\n<li class=\"bullet \">\n<code>opdigits(\"/obj/geo34/box\")</code> - returns 34\n</li>\n<li class=\"bullet \">\n<code>opdigits(\"/obj/geo34/box2.1\")</code> - returns 1 (\".\" is not a digit)\n</li>\n</ul>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/isdigit\">isdigit()</a><div class=\"related-summary\">Returns 1 if all the characters in the string are numeric</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/atoi\">atoi()</a><div class=\"related-summary\">Converts a string to an integer.</div></p></div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "int"
            },
            {
                "argnames": [
                    "str"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "opend": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/opend\">opend</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">interrupt</span></span><span class=\"padder\"><span class=\"pillow\">progress</span></span><span class=\"padder\"><span class=\"pillow\">statistics</span></span></span><p class=\"summary\">End a long operation.</p><ul><li><code>void opend(int operation_id)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Inform mantra that a long operation begun with <code>opstart()</code> has completed.</p>\n<div class=\"code-container\">\n<code class=\"line\">int started = opstart(\"Performing long operation\");\n</code><code class=\"line\">perform_long_operation();\n</code><code class=\"line\">if (started &gt;= 0)\n</code><code class=\"line\">opend(started);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opstart\">opstart()</a><div class=\"related-summary\">Start a long operation.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "operation_id"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "opfullpath": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/opfullpath\">opfullpath</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span></span><p class=\"summary\">Returns the full path for the given relative path</p><ul><li><code>string opfullpath(string relative_path)</code></li></ul>\n\n\n\n<p>This function returns the absolute path for a given relative path to the object being evaluated.</p>\n<p>The function is currently only meaningful in Houdini.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>opfullpath(\".\")</code> - The full path of the current node being evaluated\n</li>\n<li class=\"bullet \">\n<code>opfullpath(\"..\")</code> - The full path of the current node\u2019s parent\n</li>\n</ul>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/split\">split()</a><div class=\"related-summary\">Splits a string into tokens.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opdigits\">opdigits()</a><div class=\"related-summary\">Returns the integer value of the last sequence of digits of a string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/splitpath\">splitpath()</a><div class=\"related-summary\">Splits a file path into the directory and name parts.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/relativepath\">relativepath()</a><div class=\"related-summary\">Computes the relative path for two full paths.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "relative_path"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "opparentbonetransform": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/opparentbonetransform\">opparentbonetransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Returns the parent bone transform associated with an OP.</p><ul><li><code>matrix opparentbonetransform(string path)</code></li><li><code>matrix opparentbonetransform(string path, float time)</code></li></ul>\n\n\n\n<p>Returns the parent bone transform associated with an OP. If the specified OP has no\ntransform associated with it (such as a COP), then an identity matrix is returned. It is possible to specify the time at which to evaluate the transform (in seconds, not frames). Returns the transform at the root of the parent bone or the parent transform otherwise.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The op: syntax can be used to simulate this behavior using the standard transform functions.</p>\n</div>\n</div>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a><div class=\"related-summary\">Transforms a vector from one space to another.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a><div class=\"related-summary\">See getspace</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/optransform\">optransform</a><div class=\"related-summary\">Returns the transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/oppreconstrainttransform\">oppreconstrainttransform</a><div class=\"related-summary\">Returns the preconstraint transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparmtransform\">opparmtransform</a><div class=\"related-summary\">Returns the parm transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparenttransform\">opparenttransform</a><div class=\"related-summary\">Returns the parent transform associated with an OP.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "path"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "path",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "opparenttransform": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/opparenttransform\">opparenttransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Returns the parent transform associated with an OP.</p><ul><li><code>matrix opparenttransform(string path)</code></li><li><code>matrix opparenttransform(string path, float time)</code></li></ul>\n\n\n\n<p>Returns the parent transform associated with an OP. If the specified OP has no\ntransform associated with it (such as a COP), then an identity matrix is returned. It is possible to specify the time at which to evaluate the transform (in seconds, not frames).</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The op: syntax can be used to simulate this behavior using the standard transform functions.</p>\n</div>\n</div>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a><div class=\"related-summary\">Transforms a vector from one space to another.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a><div class=\"related-summary\">See getspace</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/optransform\">optransform</a><div class=\"related-summary\">Returns the transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/oppreconstrainttransform\">oppreconstrainttransform</a><div class=\"related-summary\">Returns the preconstraint transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparmtransform\">opparmtransform</a><div class=\"related-summary\">Returns the parm transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparentbonetransform\">opparentbonetransform</a><div class=\"related-summary\">Returns the parent bone transform associated with an OP.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "path"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "path",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "opparmtransform": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/opparmtransform\">opparmtransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Returns the parm transform associated with an OP.</p><ul><li><code>matrix opparmtransform(string path)</code></li><li><code>matrix opparmtransform(string path, float time)</code></li></ul>\n\n\n\n<p>Returns the parm transform associated with an OP. If the specified OP has no\ntransform associated with it (such as a COP), then an identity matrix is returned. It is possible to specify the time at which to evaluate the transform (in seconds, not frames).</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The op: syntax can be used to simulate this behavior using the standard transform functions.</p>\n</div>\n</div>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a><div class=\"related-summary\">Transforms a vector from one space to another.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a><div class=\"related-summary\">See getspace</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/optransform\">optransform</a><div class=\"related-summary\">Returns the transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/oppreconstrainttransform\">oppreconstrainttransform</a><div class=\"related-summary\">Returns the preconstraint transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparenttransform\">opparenttransform</a><div class=\"related-summary\">Returns the parent transform associated with an OP.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "path"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "path",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "oppreconstrainttransform": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/oppreconstrainttransform\">oppreconstrainttransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Returns the preconstraint transform associated with an OP.</p><ul><li><code>matrix oppreconstrainttransform(string path)</code></li><li><code>matrix oppreconstrainttransform(string path, float time)</code></li></ul>\n\n\n\n<p>Returns the preconstraint transform associated with an OP. If the specified OP has no\ntransform associated with it (such as a COP), then an identity matrix is returned. It is possible to specify the time at which to evaluate the transform (in seconds, not frames).</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The op: syntax can be used to simulate this behavior using the standard transform functions.</p>\n</div>\n</div>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a><div class=\"related-summary\">Transforms a vector from one space to another.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a><div class=\"related-summary\">See getspace</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/optransform\">optransform</a><div class=\"related-summary\">Returns the transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparmtransform\">opparmtransform</a><div class=\"related-summary\">Returns the parm transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparenttransform\">opparenttransform</a><div class=\"related-summary\">Returns the parent transform associated with an OP.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "path"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "path",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "oppretransform": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/oppretransform\">oppretransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Returns the pretransform associated with an OP.</p><ul><li><code>matrix oppretransform(string path)</code></li><li><code>matrix oppretransform(string path, float time)</code></li></ul>\n\n\n\n<p>Returns the transform associated with an OP. If the OP specified has no\ntransform associated with it (for example a COP), then an identity\nmatrix is returned. It is possible to specify the time to evaluate the\ntransform at (in seconds, not frames).</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The op: syntax can be used to simulate this behavior using the standard transform functions.</p>\n</div>\n</div>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/optransform\">ntransform</a><div class=\"related-summary\">Returns the transform associated with an OP.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "path"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "path",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "opstart": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/opstart\">opstart</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">interrupt</span></span><span class=\"padder\"><span class=\"pillow\">progress</span></span><span class=\"padder\"><span class=\"pillow\">statistics</span></span></span><p class=\"summary\">Start a long operation.</p><ul><li><code>int opstart(string message)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Inform mantra about the start of a long operation (operation start).  The string argument is passed to mantra and may be displayed in the IPR viewer.</p>\n<p>The function will return a non-negative integer when successfully started.</p>\n<p>The integer returned should be passed to <code>opend()</code> at the completion of the long operation.</p>\n<div class=\"code-container\">\n<code class=\"line\">int started = opstart(\"Performing long operation\");\n</code><code class=\"line\">perform_long_operation();\n</code><code class=\"line\">if (started &gt;= 0)\n</code><code class=\"line\">opend(started);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opend\">opend()</a><div class=\"related-summary\">End a long operation.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "message"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "optransform": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/optransform\">optransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Returns the transform associated with an OP.</p><ul><li><code>matrix optransform(string path)</code></li><li><code>matrix optransform(string path, float time)</code></li></ul>\n\n\n\n<p>Returns the transform associated with an OP. If the OP specified has no\ntransform associated with it (for example a COP), then an identity\nmatrix is returned. It is possible to specify the time to evaluate the\ntransform at (in seconds, not frames).</p>\n<p>NOTE: The op: syntax can be used to simulate this behaviour using the\nstandard transform functions.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a><div class=\"related-summary\">Transforms a vector from one space to another.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a><div class=\"related-summary\">See getspace</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparmtransform\">opparmtransform</a><div class=\"related-summary\">Returns the parm transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/oppreconstrainttransform\">oppreconstrainttransform</a><div class=\"related-summary\">Returns the preconstraint transform associated with an OP.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/opparmtransform\">opparmtransform</a><div class=\"related-summary\">Returns the parm transform associated with an OP.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "path"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "path",
                    "time"
                ],
                "args": [
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "ord": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ord\">ord</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Converts an UTF8 string into a codepoint.</p><ul><li><code>int ord(string value)</code></li></ul>\n\n\n\n<p>Returns the code point of the first UTF8 character in the given string.</p>\n<p>If the prefix of the string isn\u2019t a valid UTF8 encoding, or is empty, -1 is returned.</p>\n<p>Overlong UTF8 encodings will return -1.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/chr\">chr()</a><div class=\"related-summary\">Converts an unicode codepoint to a UTF8 string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "osd_facecount": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_facecount\">osd_facecount</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int osd_facecount(int opinput)</code></li><li><code>int osd_facecount(string filename)</code></li></ul>\n\n\n\n<p>Returns the number of coarse faces in the subdivision hull specified by the geometry filename.  This is different that the number of patches in the subdivision surface.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_facecount\">osd_facecount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_firstpatch\">osd_firstpatch()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurface\">osd_limitsurface()</a><div class=\"related-summary\">Evaluates an attribute at the subdivision limit surface using Open Subdiv.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_patchcount\">osd_patchcount()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "osd_firstpatch": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_firstpatch\">osd_firstpatch</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int osd_firstpatch(int opinput, int face_id)</code></li><li><code>int osd_firstpatch(string geometry, int face_id)</code></li></ul>\n\n\n\n<p>For a given face in the coarse mesh, this returns the number of the first patch associated with the face.  Since each face in a hull may generate multiple patches, this function will return the first of the patches generated by the face.  See also <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_patchcount\">osd_patchcount()</a> to find out the number of patches generated by the face.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_facecount\">osd_facecount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_firstpatch\">osd_firstpatch()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurface\">osd_limitsurface()</a><div class=\"related-summary\">Evaluates an attribute at the subdivision limit surface using Open Subdiv.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_patchcount\">osd_patchcount()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "face_id"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "face_id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "osd_limitsurface": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurface\">osd_limitsurface</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Evaluates an attribute at the subdivision limit surface using Open Subdiv.</p><ul><li><code>int osd_limitsurface(int opinput, string attribute_name, int face_id, float u, float v, float &amp;result)</code></li><li><code>int osd_limitsurface(int opinput, string attribute_name, int face_id, float u, float v, vector2 &amp;result)</code></li><li><code>int osd_limitsurface(int opinput, string attribute_name, int face_id, float u, float v, vector &amp;result)</code></li><li><code>int osd_limitsurface(int opinput, string attribute_name, int face_id, float u, float v, vector4 &amp;result)</code></li><li><code>int osd_limitsurface(int opinput, string attribute_name, int face_id, float u, float v, matrix2 &amp;result)</code></li><li><code>int osd_limitsurface(int opinput, string attribute_name, int face_id, float u, float v, matrix3 &amp;result)</code></li><li><code>int osd_limitsurface(int opinput, string attribute_name, int face_id, float u, float v, matrix &amp;result)</code></li><li><code>int osd_limitsurface(int opinput, string attribute_name, int face_id, float u, float v, float[] &amp;result)</code></li><li><code>int osd_limitsurface(string geometry, string attribute_name, int face_id, float u, float v, float &amp;result)</code></li><li><code>int osd_limitsurface(string geometry, string attribute_name, int face_id, float u, float v, vector2 &amp;result)</code></li><li><code>int osd_limitsurface(string geometry, string attribute_name, int face_id, float u, float v, vector &amp;result)</code></li><li><code>int osd_limitsurface(string geometry, string attribute_name, int face_id, float u, float v, vector4 &amp;result)</code></li><li><code>int osd_limitsurface(string geometry, string attribute_name, int face_id, float u, float v, matrix2 &amp;result)</code></li><li><code>int osd_limitsurface(string geometry, string attribute_name, int face_id, float u, float v, matrix3 &amp;result)</code></li><li><code>int osd_limitsurface(string geometry, string attribute_name, int face_id, float u, float v, matrix &amp;result)</code></li><li><code>int osd_limitsurface(string geometry, string attribute_name, int face_id, float u, float v, float[] &amp;result)</code></li></ul>\n\n\n\n<p><code>osd_limitsurface</code> evaluates the point attribute in the geometry specified as a\nsubdivision surface an returns the result of the attribute on the limit\nsurface.  For vertex attributes, use <code>osd_limitsurfacevertex()</code>.</p>\n<p>Possible reasons for failure are:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nThe geometry contains no polygons or the topology can\u2019t be converted using Open Subdiv\n</li>\n<li class=\"bullet \">\nThe attribute doesn\u2019t exist on the input geometry.\n</li>\n<li class=\"bullet \">\nThe attribute size/type doesn\u2019t match the VEX type.\n</li>\n</ul>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Generate a point cloud on the limit surface of a subdivision mesh.</p>\n<div class=\"code-container\">\n<code class=\"line\">int npatches = osd_patchcount(file);\n</code><code class=\"line\">for (int patch = 0; patch &lt; npatches; patch++)\n</code><code class=\"line\">{\n</code><code class=\"line\">for (int v = 0; v &lt; 100; v++)\n</code><code class=\"line\">{\n</code><code class=\"line\">vector        P;\n</code><code class=\"line\">if (osd_limitsurface(file, \"P\", patch, nrandom(), nrandom(), P))\n</code><code class=\"line\">{\n</code><code class=\"line\">int        ptid = addpoint(geohandle, P);\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_facecount\">osd_facecount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_firstpatch\">osd_firstpatch()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_patchcount\">osd_patchcount()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "osd_limitsurfacevertex": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurfacevertex\">osd_limitsurfacevertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int osd_limitsurfacevertex(int opinput, string attribute_name, int face_id, float u, float v, float &amp;result)</code></li><li><code>int osd_limitsurfacevertex(int opinput, string attribute_name, int face_id, float u, float v, vector2 &amp;result)</code></li><li><code>int osd_limitsurfacevertex(int opinput, string attribute_name, int face_id, float u, float v, vector &amp;result)</code></li><li><code>int osd_limitsurfacevertex(int opinput, string attribute_name, int face_id, float u, float v, vector4 &amp;result)</code></li><li><code>int osd_limitsurfacevertex(int opinput, string attribute_name, int face_id, float u, float v, matrix2 &amp;result)</code></li><li><code>int osd_limitsurfacevertex(int opinput, string attribute_name, int face_id, float u, float v, matrix3 &amp;result)</code></li><li><code>int osd_limitsurfacevertex(int opinput, string attribute_name, int face_id, float u, float v, matrix &amp;result)</code></li><li><code>int osd_limitsurfacevertex(int opinput, string attribute_name, int face_id, float u, float v, float[] &amp;result)</code></li><li><code>int osd_limitsurfacevertex(string geometry, string attribute_name, int face_id, float u, float v, float &amp;result)</code></li><li><code>int osd_limitsurfacevertex(string geometry, string attribute_name, int face_id, float u, float v, vector2 &amp;result)</code></li><li><code>int osd_limitsurfacevertex(string geometry, string attribute_name, int face_id, float u, float v, vector &amp;result)</code></li><li><code>int osd_limitsurfacevertex(string geometry, string attribute_name, int face_id, float u, float v, vector4 &amp;result)</code></li><li><code>int osd_limitsurfacevertex(string geometry, string attribute_name, int face_id, float u, float v, matrix2 &amp;result)</code></li><li><code>int osd_limitsurfacevertex(string geometry, string attribute_name, int face_id, float u, float v, matrix3 &amp;result)</code></li><li><code>int osd_limitsurfacevertex(string geometry, string attribute_name, int face_id, float u, float v, matrix &amp;result)</code></li><li><code>int osd_limitsurfacevertex(string geometry, string attribute_name, int face_id, float u, float v, float[] &amp;result)</code></li></ul>\n\n\n\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurface\" title=\"Evaluates an attribute at the subdivision limit surface using Open Subdiv.\">osd_limitsurface()</a>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "face_id",
                    "u",
                    "v",
                    "result"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "osd_lookupface": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_lookupface\">osd_lookupface</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int osd_lookupface(int opinput, int patch_id, float patch_u, float patch_v, int &amp;face_id, float &amp;face_u, float &amp;face_v)</code></li><li><code>int osd_lookupface(int opinput, int patch_id, float patch_u, float patch_v, int &amp;face_id, float &amp;face_u, float &amp;face_v, string attribute)</code></li><li><code>int osd_lookupface(string geometry, int patch_id, float patch_u, float patch_v, int &amp;face_id, float &amp;face_u, float &amp;face_v)</code></li><li><code>int osd_lookupface(string geometry, int patch_id, float patch_u, float patch_v, int &amp;face_id, float &amp;face_u, float &amp;face_v, string attribute)</code></li></ul>\n\n\n\n<p>Each polygon in a piece of geometry will generate one or more Catmull-Clark subdivision patches.  A quadrilateral will generate a single patch, while a pentagon will generate five patches.  This function helps map between the subdivision patch id and the Houdini polygon (face).</p>\n<p>Given the <code>patch_id</code> and patch interpolants (<code>patch_u</code> and <code>patch_v</code>), this function will return the <code>face_id</code> (Houdini primitive number) and the texture coordinates (<code>face_u</code> and <code>face_v</code>) for the given attribute.</p>\n<p>If no texture attribute is specified, intrinsic polygon interpolants will be used.  The coordinates returned will have values in the range 0 to 1.</p>\n<p>The <code>patch_u</code> and <code>patch_v</code> values should be in the range 0 to 1.</p>\n\n<h2 class=\"label section\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">void\n</code><code class=\"line\">scatterOnLimitSurface(string file, texmap; int npts)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int npatches = osd_patchcount(file);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0for (int i = 0; i &lt; npts; ++i)\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int patch_id = nrandom() * npatches;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float patch_s = nrandom();\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float patch_t = nrandom();\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int face_id;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float face_u, face_v;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (osd_lookupface(file, patch_id, patch_s, patch_t, face_id, face_u, face_v, \"uv\"))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector clr = texture(texmap, face_u, face_v);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector P;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0osd_limitsurface(file, \"P\", patch_id, patch_s, patch_t, P);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addPoint(P, clr, face_id);        // add a scattered point.\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_lookuppatch\">osd_lookuppatch()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_patchcount\">osd_patchcount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_facecount\">osd_facecount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_firstpatch\">osd_firstpatch()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurface\">osd_limitsurface()</a><div class=\"related-summary\">Evaluates an attribute at the subdivision limit surface using Open Subdiv.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "patch_id",
                    "patch_u",
                    "patch_v",
                    "face_id",
                    "face_u",
                    "face_v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "patch_id",
                    "patch_u",
                    "patch_v",
                    "face_id",
                    "face_u",
                    "face_v",
                    "attribute"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "patch_id",
                    "patch_u",
                    "patch_v",
                    "face_id",
                    "face_u",
                    "face_v"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "patch_id",
                    "patch_u",
                    "patch_v",
                    "face_id",
                    "face_u",
                    "face_v",
                    "attribute"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "osd_lookuppatch": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_lookuppatch\">osd_lookuppatch</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int osd_lookuppatch(int opinput, int face_id, float face_u, float face_v, int &amp;patch_id, float &amp;patch_u, float &amp;patch_v)</code></li><li><code>int osd_lookuppatch(int opinput, int face_id, float face_u, float face_v, int &amp;patch_id, float &amp;patch_u, float &amp;patch_v, string attribute)</code></li><li><code>int osd_lookuppatch(string geometry, int face_id, float face_u, float face_v, int &amp;patch_id, float &amp;patch_u, float &amp;patch_v)</code></li><li><code>int osd_lookuppatch(string geometry, int face_id, float face_u, float face_v, int &amp;patch_id, float &amp;patch_u, float &amp;patch_v, string attribute)</code></li></ul>\n\n\n\n<p>Each polygon in a piece of geometry will generate one or more Catmull-Clark subdivision patches.  A quadrilateral will generate a single patch, while a pentagon will generate five patches.  This function helps map between the Houdini polygon (face) and the corresponding open subdivision patch id.</p>\n<p>Given the <code>face_id</code> and texture coordinates for a point inside the face (<code>face_u</code> and<code>face_v</code>), this function will return the corresponding <code>patch_id</code> (Catmull-Clark subdivision face) and the patch interpolants (<code>patch_u</code> and <code>patch_v</code>).  The texture coordinates should be specified according to the attribute passed in.</p>\n<p>If no texture attribute is specified, intrinsic polygon interpolants will be used.  The face coordinates should have values in the range 0 to 1.  Not all values are valid for triangles.  If invalid coordinates are passed in, the function will fail (returning 0).</p>\n<p>The <code>patch_id</code> is also the same integer value used to identify the face when performing PTex texture mapping.</p>\n\n<h2 class=\"label section\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">// This function can be used to move points generated by a scatter SOP to the\n</code><code class=\"line\">// subdivision limit surface.  The scatter SOP needs to store the \"sourceprim\"\n</code><code class=\"line\">// (the Output Attributes tab).  Texture coordinates also need to be\n</code><code class=\"line\">// transferred from the source geometry.\n</code><code class=\"line\">void\n</code><code class=\"line\">movePointToLimitSurface(string file; vector P, uv; int sourceprim)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int        patch_id = -1;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float patch_u, patch_v;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (osd_lookuppatch(file, sourceprim, uv.x, uv.y,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0patch_id, patch_u, patch_v, \"uv\"))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector        tmpP;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (osd_limitsurface(file, \"P\", patch_id, patch_u, patch_v, tmpP))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P = tmpP;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_lookupface\">osd_lookupface()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_patchcount\">osd_patchcount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_facecount\">osd_facecount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_firstpatch\">osd_firstpatch()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurface\">osd_limitsurface()</a><div class=\"related-summary\">Evaluates an attribute at the subdivision limit surface using Open Subdiv.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "face_id",
                    "face_u",
                    "face_v",
                    "patch_id",
                    "patch_u",
                    "patch_v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "face_id",
                    "face_u",
                    "face_v",
                    "patch_id",
                    "patch_u",
                    "patch_v",
                    "attribute"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "face_id",
                    "face_u",
                    "face_v",
                    "patch_id",
                    "patch_u",
                    "patch_v"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "face_id",
                    "face_u",
                    "face_v",
                    "patch_id",
                    "patch_u",
                    "patch_v",
                    "attribute"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "osd_patchcount": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_patchcount\">osd_patchcount</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int osd_patchcount(int opinput)</code></li><li><code>int osd_patchcount(int opinput, int face_id)</code></li><li><code>int osd_patchcount(string filename)</code></li><li><code>int osd_patchcount(string filename, int face_id)</code></li></ul>\n\n\n\n<p>Returns the number of base level patches in the subdivision hull specified by the geometry filename.  This is different that the number of faces in the subdivision hull.  For example, in a tetrahedron, each triangle face will generate three patches.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int osd_patchcount(string filename, int face_id)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>For a given face in the coarse mesh, this returns the number of patches which are generated by that face.  While a quadrilateral only generates 1 patch, all other faces will generate multiple patches based on their vertex count.  For example, a triangle will generate 3 patches, a pentagon will generate 5 patches.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_facecount\">osd_facecount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_firstpatch\">osd_firstpatch()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurface\">osd_limitsurface()</a><div class=\"related-summary\">Evaluates an attribute at the subdivision limit surface using Open Subdiv.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "face_id"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "face_id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "osd_patches": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/osd_patches\">osd_patches</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\"></p><ul><li><code>int[] osd_patches(int opinput, int face_id)</code></li><li><code>int[] osd_patches(string filename, int face_id)</code></li></ul>\n\n\n\n<p>Each face in a subdivision hull may create one or more patches.  This function lists the patch ids for a corresponding face.</p>\n<p>This is implemented using the following algorithm:</p>\n<div class=\"code-container\">\n<code class=\"line\">int []\n</code><code class=\"line\">osd_patches(const string file; const face_id)\n</code><code class=\"line\">{\n</code><code class=\"line\">int        patches[] = {};\n</code><code class=\"line\">int        first = osd_firstpatch(file, face_id);\n</code><code class=\"line\">if (first &gt;= 0)\n</code><code class=\"line\">{\n</code><code class=\"line\">int        npatches = osd_patchcount(file, face_id);\n</code><code class=\"line\">for (int i = 0; i &lt; npatches; i++)\n</code><code class=\"line\">append(patches, first+i);\n</code><code class=\"line\">}\n</code><code class=\"line\">return patches;\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_facecount\">osd_facecount()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_firstpatch\">osd_firstpatch()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurface\">osd_limitsurface()</a><div class=\"related-summary\">Evaluates an attribute at the subdivision limit surface using Open Subdiv.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_limitsurfacevertex\">osd_limitsurfacevertex()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/osd_patchcount\">osd_patchcount()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "face_id"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "face_id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "outerproduct": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/outerproduct\">outerproduct</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the outer product between the arguments.</p><ul><li><code>matrix2 outerproduct(vector2 vec1, vector2 vec2)</code></li><li><code>matrix3 outerproduct(vector vec1, vector vec2)</code></li><li><code>matrix outerproduct(vector4 vec1, vector4 vec2)</code></li></ul>\n\n\n\n<p>Returns the outer product between the arguments.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "vec1",
                    "vec2"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "vec1",
                    "vec2"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "vec1",
                    "vec2"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "ow_nspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ow_nspace\">ow_nspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a normal vector from Object to World space.</p><ul><li><code>vector ow_nspace(vector n)</code></li></ul>\n\n\n\n<p>Transforms a normal vector from <em>Object</em> to <em>World</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "n"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "ow_space": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ow_space\">ow_space</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a position value from Object to World space.</p><ul><li><code>vector ow_space(vector v)</code></li><li><code>vector4 ow_space(vector4 v)</code></li><li><code>matrix ow_space()</code></li></ul>\n\n\n\n<p>Transforms a position value from <em>Object</em> to <em>World</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "ow_vspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ow_vspace\">ow_vspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a direction vector from Object to World space.</p><ul><li><code>vector ow_vspace(vector v)</code></li></ul>\n\n\n\n<p>Transforms a direction vector from <em>Object</em> to <em>World</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "pack_inttosafefloat": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pack_inttosafefloat\">pack_inttosafefloat</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">polysoup</span></span></span><p class=\"summary\">Reversibly packs an integer into a finite, non-denormal float.</p><ul><li><code>float pack_inttosafefloat(int value)</code></li></ul>\n\n\n\n<p>This is used to find the w component of a primitive uvw vector\nreferring to a polygon soup primitive, from the inner polygon number.</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nIntegers in the range\n<code>abs(i) &lt;= (2^24) = 16,777,216</code>\nwill be represented exactly by the floats of the same value.\n</li>\n<li class=\"bullet \">\nIntegers in the range\n<code>16,777,216 &lt; abs(i) &lt; (2^24) + 104*(2^23) = 889,192,448</code>\nwill be represented by larger, non-infinite floats.\n</li>\n<li class=\"bullet \">\nIntegers in the range\n<code>889,192,448 &lt;= abs(i) &lt; (2^24) + 230*(2^23) = 1,946,157,056</code>\nwill be represented by small, non-denormal floats.\n</li>\n<li class=\"bullet \">\nAny other integers, <code>abs(i) &gt;= 1,946,157,056</code>, will not be\nrepresented correctly.\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/unpack_intfromsafefloat\">unpack_intfromsafefloat()</a><div class=\"related-summary\">Reverses the packing of pack_inttosafefloat to get back the original integer.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/primuv\">primuv()</a><div class=\"related-summary\">Evaluates an attribute on a primitive at a certain parametric (u, v) position into a variable.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "pathtrace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pathtrace\">pathtrace</a></h1><p class=\"summary\"></p><ul><li><code>vector pathtrace(vector P, vector N, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#rayopts\">optional parameters</a>.</p>\n<p><code>pathtrace</code> works like <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/irradiance\" title=\"Computes irradiance (global illumination) at the point P with the\nnormal N.\">irradiance()</a>, but uses the physically based\nrendering (PBR) engine to do secondary bounces.</p>\n<p><code>pathtrace</code> provides a simple (and not very flexible) method of invoking the\nPBR rendering engine from micro-polygon rendering. It uses path tracing and\nthe <code>F</code> (BSDF) output, not <code>Cf</code>/<code>Of</code> on the hit shaders. Maximum path depth\nis controlled by the \"diffuse bounces\" parameter on the PBR tab of the\n<a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/out/ifd\" title=\"Renders the scene using Houdini\u2019s standard mantra renderer and generates IFD files.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/ROP/mantra.svg\">[Image \ud83d\udd17]</a>mantra output driver</a>.</p>\n<p>Irradiance caching works the same way it works with occlusion().</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/occlusion\">occlusion()</a><div class=\"related-summary\">Computes ambient occlusion.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/irradiance\">irradiance()</a><div class=\"related-summary\">Computes irradiance (global illumination) at the point P with the\nnormal N.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "P",
                    "N"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "pcclose": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcclose\">pcclose</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">This function closes the handle associated with a pcopen\nfunction.</p><ul><li><code>void pcclose(int &amp;handle)</code></li></ul>\n\n\n\n<p>This function closes the handle associated with a pcopen function. VEX\nwill close handles automatically, however, it\u2019s good practice to call\npcclose. When there are pcopen calls made from within a loop, VEX may\nconsume additional memory if pcclose isn\u2019t called when the handle is no\nlonger required.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle"
                ],
                "args": [
                    "export int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "pcconvex": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcconvex\">pcconvex</a></h1><span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\"></p><ul><li><code>float pcconvex(int handle, string channel, vector N)</code></li></ul>\n\n\n\n<p>Calculates the 2D projected convex hull area for the given point cloud <code>handle</code>\nalong the given normal, where <code>handle</code> was returned by a prior call to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel",
                    "N"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic_pair": true
            }
        ]
    },
    "pcexport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcexport\">pcexport</a></h1><span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Writes data to a point cloud inside a\n<code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>int pcexport(int handle, string channel_name, int value, ...)</code></li><li><code>int pcexport(int handle, string channel_name, string value, ...)</code></li><li><code>int pcexport(int handle, string channel_name, float value, ...)</code></li><li><code>int pcexport(int handle, string channel_name, vector value, ...)</code></li><li><code>int pcexport(int handle, string channel_name, vector value, float radius, ...)</code></li><li><code>int pcexport(int handle, string channel_name, vector4 value, ...)</code></li><li><code>int pcexport(int handle, string channel_name, matrix3 value, ...)</code></li><li><code>int pcexport(int handle, string channel_name, matrix value, ...)</code></li></ul>\n\n\n\n<p>Returns 1 if the export succeeded or 0 if the export failed.\nThe export will fail if <code>channel_name</code> is not read-write or if (in the\nversion of pcexport taking a radius) the point being exported is at a\ndistance less than the specified radius from a point that is already in the\npoint cloud.</p>\n<p>This function writes to the channels of points opened with <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> or\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcgenerate\" title=\"Generates a point cloud.\">pcgenerate()</a>. The second version of this function takes a radius parameter and uses it to accept or reject the point being exported according to its distance to the points that are already in the point cloud.  It must be separated from all other points by at least the specified radius.  To write new point data into a point cloud file, use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcwrite\" title=\"Writes data to a point cloud file.\">pcwrite()</a>.</p>\n\n<h2 class=\"label heading\" id=\"storage-type\">\n            \n            Storage type\n        </h2>\n<div class=\"content\" id=\"storage-type-body\">\n<p>If you add the <code>storage</code> optional keyword, the next argument specifies\na <code>storage_type</code> for the data.\nStorage types are the standard tile based format data types:</p>\n\n<tr>\n</tr>\n<th>\n    Name\n    \n</th>\n<th>\n    Description\n    \n</th>\n<tr>\n</tr>\n<td>\n<code>int8, uint8</code>\n</td>\n<td>\n    8 bit signed/unsigned integers\n    \n</td>\n<tr>\n</tr>\n<td>\n<code>int16, uint16</code>\n</td>\n<td>\n    16 bit signed/unsigned integers\n    \n</td>\n<tr>\n</tr>\n<td>\n<code>int32, uint32</code>\n</td>\n<td>\n    32 bit signed/unsigned integers\n    \n</td>\n<tr>\n</tr>\n<td>\n<code>int64, uint64</code>\n</td>\n<td>\n    64 bit signed/unsigned integers\n    \n</td>\n<tr>\n</tr>\n<td>\n<code>real16</code>\n</td>\n<td>\n    16 bit floating point values\n    \n</td>\n<tr>\n</tr>\n<td>\n<code>real32</code>\n</td>\n<td>\n    32 bit floating point values\n    \n</td>\n<tr>\n</tr>\n<td>\n<code>real64</code>\n</td>\n<td>\n    64 bit floating point values\n    \n</td>\n<tr>\n</tr>\n<td>\n<code>int, uint, real</code>\n</td>\n<td>\n    Default precision integer/floating point values\n    \n</td>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcwrite\">pcwrite()</a><div class=\"related-summary\">Writes data to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pciterate\">pciterate()</a><div class=\"related-summary\">This function can be used to iterate over all the points which were\nfound in the pcopen query.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\">pcunshaded()</a><div class=\"related-summary\">Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcimport\">pcimport()</a><div class=\"related-summary\">Imports channel data from a point cloud inside a\npciterate or a pcunshaded loop.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value",
                    "radius"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "pcfarthest": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcfarthest\">pcfarthest</a></h1><span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Returns the distance to the farthest point found in the search\nperformed by pcopen.</p><ul><li><code>float pcfarthest(int handle)</code></li></ul>\n\n\n\n<p>Returns the distance to the farthest point found in the search performed\nby pcopen. If no points were found, the function will return a very\nlarge value (1.0\u00d710^37)</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic_pair": true
            }
        ]
    },
    "pcfilter": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcfilter\">pcfilter</a></h1><span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Filters the points found by <code>pcopen</code> using a simple reconstruction filter.</p><ul><li><code>int pcfilter(int handle, string channel_name, ...)</code></li><li><code>float pcfilter(int handle, string channel_name, ...)</code></li><li><code>vector pcfilter(int handle, string channel_name, ...)</code></li><li><code>vector4 pcfilter(int handle, string channel_name, ...)</code></li><li><code>matrix3 pcfilter(int handle, string channel_name, ...)</code></li><li><code>matrix pcfilter(int handle, string channel_name, ...)</code></li></ul>\n\n\n\n<p>Filters the points queued up by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a>\nusing a simple reconstruction filter.</p>\n<p>This function is roughly equivalent to:</p>\n<div class=\"code-container\">\n<code class=\"line\">float pcfilter(int handle; string channel)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float    sum, w, d;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float    value, result = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0while (pciterate(handle))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pcimport(handle, \"point.distance\", d);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pcimport(handle, channel, value);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w = 1 - smooth(0, radius, d);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum += w;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result += w * value;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0result /= sum;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return result;\n</code><code class=\"line\">}\n</code>\n</div>\n<p><code>pcfilter</code> takes the points that were opened by the point cloud and produces a filtered value. The following equation shows how the individual points are weighted.</p>\n<div class=\"code-container\">\n<code class=\"line\">w_i = 1-smooth(0, maxd*1.1, d_i);\n</code>\n</div>\n<p><code>maxd</code> is the farthest point, and <code>w_i</code> is the weight for a given point at distance (<code>d_i</code>). Points that are closer to the center will be weighted higher with that formula, rather than it being an average.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "handle",
                    "channel_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "pcfind": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcfind\">pcfind</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Returns a list of closest points from a file.</p><ul><li><code>int[] pcfind(int inputnum, string ptgroup, string Pchannel, vector P, float radius, int maxpoints)</code></li><li><code>int[] pcfind(int inputnum, string Pchannel, vector P, float radius, int maxpoints)</code></li><li><code>int[] pcfind(string filename, string ptgroup, string Pchannel, vector P, float radius, int maxpoints)</code></li><li><code>int[] pcfind(string filename, string Pchannel, vector P, float radius, int maxpoints)</code></li></ul>\n\n\n\n<p>These functions open a geometry file and return a list of points with the location <code>P</code> within <code>radius</code>, based on point positions found in <code>Pchannel</code>.  Only the <code>maxpoints</code> closest points within the given radius will be returned. The file name may use the <code>op:</code> syntax to reference SOP geometry in the OP contexts.  The <code>Pchannel</code> parameter indicates the attribute which contains the positions to be searched.</p>\n<p>The <code>ptgroup</code> is a point group that limits the points to search.  This is a SOP-style group pattern, so can be something like <code>0-10</code> or <code>@Cd.x&gt;0.5</code>.  A blank string is treated as matching all points.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Performing a proximity query:</p>\n<div class=\"code-container\">\n<code class=\"line\">int closept[] = pcfind(filename, \"P\", P, maxdistance, maxpoints);\n</code><code class=\"line\">P = 0;\n</code><code class=\"line\">foreach (int ptnum; closept)\n</code><code class=\"line\">{\n</code><code class=\"line\">vector closepos = point(filename, \"P\", ptnum);\n</code><code class=\"line\">P += closepos;\n</code><code class=\"line\">}\n</code><code class=\"line\">P /= len(closept);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nearpoint\">nearpoint()</a><div class=\"related-summary\">Finds the closest point in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nearpoints\">nearpoints()</a><div class=\"related-summary\">Finds the all the closest point in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind_radius\">pcfind_radius()</a><div class=\"related-summary\">Returns a list of closest points from a file taking into account their radii.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pgfind\">pgfind()</a><div class=\"related-summary\">Returns a list of closest points from a file.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "ptgroup",
                    "Pchannel",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "inputnum",
                    "Pchannel",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "ptgroup",
                    "Pchannel",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "Pchannel",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "pcfind_radius": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcfind_radius\">pcfind_radius</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Returns a list of closest points from a file taking into account their radii.</p><ul><li><code>int[] pcfind_radius(int inputnum, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)</code></li><li><code>int[] pcfind_radius(int inputnum, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)</code></li><li><code>int[] pcfind_radius(string filename, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)</code></li><li><code>int[] pcfind_radius(string filename, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)</code></li></ul>\n\n\n\n<p>These functions open a geometry file and return a list of points with the\nlocation <code>P</code> within <code>radius</code>, based on point positions found in\n<code>Pchannel</code>.  Each of the points will be expanded by their <code>RadChannel</code>\nattribute, which will be dilated by <code>radscale</code>.</p>\n<p>Using a radius channel allows intersection detection between spheres of varying radii.  In this case you cannot use only your own sphere radius, as the intersecting sphere may have a much larger radius so not be in your search window.  Because of this, it is also sensible to use a 0.0 <code>radius</code> with this function just find all the source spheres that your query position is inside of.</p>\n<p>Only the <code>maxpoints</code> closest points within the given radius\nwill be returned. The file name may use the <code>op:</code> syntax to reference SOP\ngeometry in the OP contexts.  The <code>Pchannel</code> parameter indicates the\nattribute which contains the positions to be searched.</p>\n<p>The <code>ptgroup</code> is a point group that limits the points to search.  This is a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../model/groups#manual\">SOP-style group pattern</a>, so can be something like <code>0-10</code> or <code>@Cd.x&gt;0.5</code>.  A blank string is treated as matching all points.</p>\n<p>NOTE:\nThe radius attribute and radius scale apply to the points being searched, not to the point you are doing the searching with!</p>\n<p>NOTE:\nIf the radius attribute does not exist, this becomes equivalent to <code>pcfind</code>.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Performing a proximity query:</p>\n<div class=\"code-container\">\n<code class=\"line\">int closept[] = pcfind_radius(filename, \"P\", \"pscale\", 1.0, P, maxdistance, maxpoints);\n</code><code class=\"line\">P = 0;\n</code><code class=\"line\">foreach (int ptnum; closept)\n</code><code class=\"line\">{\n</code><code class=\"line\">vector closepos = point(filename, \"P\", ptnum);\n</code><code class=\"line\">P += closepos;\n</code><code class=\"line\">}\n</code><code class=\"line\">P /= len(closept);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nearpoint\">nearpoint()</a><div class=\"related-summary\">Finds the closest point in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nearpoints\">nearpoints()</a><div class=\"related-summary\">Finds the all the closest point in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind\">pcfind()</a><div class=\"related-summary\">Returns a list of closest points from a file.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "Pchannel",
                    "RadChannel",
                    "radscale",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const float",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "inputnum",
                    "ptgroup",
                    "Pchannel",
                    "RadChannel",
                    "radscale",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string",
                    "const float",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "Pchannel",
                    "RadChannel",
                    "radscale",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const float",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "ptgroup",
                    "Pchannel",
                    "RadChannel",
                    "radscale",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const string",
                    "const float",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "pcgenerate": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcgenerate\">pcgenerate</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Generates a point cloud.</p><ul><li><code>int pcgenerate(string filename, int npoints)</code></li></ul>\n\n\n\n<p>This function returns a handle to the point cloud with the specified name or\ncreates a new point cloud with the specified name and number of points.\nInitially, the point cloud has no channels, but channels can be added using\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcexport\" title=\"Writes data to a point cloud inside a\npciterate or a pcunshaded loop.\">pcexport()</a> in a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a> loop.  Note that if pcgenerate() is called\nwith the name of a point cloud that already exists, that point cloud will not\nbe re-sized to contain the specified number of points.</p>\n<p>Once a position channel has been established, call <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> to query the\ngenerated point cloud.  Note that calling <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> will lock the specified\nposition channel.  Once a point cloud has been opened, it is considered to be\ngenerated.  Calling pcgenerate() with the name of a generated point cloud is\nsimilar to calling pcopen() and requesting 0 points: no points will be available\nin a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pciterate\" title=\"This function can be used to iterate over all the points which were\nfound in the pcopen query.\">pciterate()</a> loop.</p>\n<p>This function only stores a point cloud in RAM. To write points to disk, use <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcwrite\" title=\"Writes data to a point cloud file.\">pcwrite()</a>.</p>\n<p>NOTE:\nWe refer to the parameter as a filename to be consistent with <code>pcopen()</code>. The two functions share the same namespace. That is, if you call <code>pcgenerate(\"myfile.pc\", ...)</code>, you can then query <code>\"myfile.pc\"</code> by calling <code>pcopen(\"myfile.pc\", ...)</code> or <code>pcopenlod(\"myfile.pc\", ...)</code>.</p>\n<p>This works the other way as well. If you call <code>pcopen(\"myfile.pc\", ...)</code> and then call <code>pcgenerate(\"myfile.pc\", ...)</code>, the <code>pcgenerate()</code> call will use the point cloud that is already loaded into memory through the <code>pcopen()</code> call rather than creating a new point cloud.</p>\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n<code class=\"line\">vector position;\n</code><code class=\"line\">int ohandle, ghandle, rval;\n</code><code class=\"line\">\n</code><code class=\"line\">ghandle = pcgenerate(texturename, npoints);\n</code><code class=\"line\">while (pcunshaded(ghandle, \"P\"))\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Compute 'position'...\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0rval = pcexport(ghandle, \"P\", position);\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">ohandle = pcopen(texturename, \"P\", P, maxdistance, maxpoints);\n</code><code class=\"line\">while (pciterate(ohandle))\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0rval = pcimport(ohandle, \"P\", position);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Do something with 'position'...\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">pcclose(ohandle);\n</code><code class=\"line\">pcclose(ghandle);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcwrite\">pcwrite()</a><div class=\"related-summary\">Writes data to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfilter\">pcfilter()</a><div class=\"related-summary\">Filters the points found by pcopen using a simple reconstruction filter.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pciterate\">pciterate()</a><div class=\"related-summary\">This function can be used to iterate over all the points which were\nfound in the pcopen query.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\">pcunshaded()</a><div class=\"related-summary\">Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcimport\">pcimport()</a><div class=\"related-summary\">Imports channel data from a point cloud inside a\npciterate or a pcunshaded loop.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcexport\">pcexport()</a><div class=\"related-summary\">Writes data to a point cloud inside a\npciterate or a pcunshaded loop.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcclose\">pcclose()</a><div class=\"related-summary\">This function closes the handle associated with a pcopen\nfunction.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "npoints"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pcimport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimport\">pcimport</a></h1><span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Imports channel data from a point cloud inside a\n<code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>int pcimport(int handle, string channel_name, int &amp;value)</code></li><li><code>int pcimport(int handle, string channel_name, string &amp;value)</code></li><li><code>int pcimport(int handle, string channel_name, float &amp;value)</code></li><li><code>int pcimport(int handle, string channel_name, vector &amp;value)</code></li><li><code>int pcimport(int handle, string channel_name, vector4 &amp;value)</code></li><li><code>int pcimport(int handle, string channel_name, matrix3 &amp;value)</code></li><li><code>int pcimport(int handle, string channel_name, matrix &amp;value)</code></li></ul>\n\n\n\n<p>While looping using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pciterate\" title=\"This function can be used to iterate over all the points which were\nfound in the pcopen query.\">pciterate()</a> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a>, use these\nfunctions to import data from the point cloud file into the\n<code>value</code> variable.</p>\n<p>The function will return 1 if the import succeeded\nor 0 if the import failed (usually due to the given\nchannel name not existing).</p>\n<p>There are two special channel names you can import:</p>\n<p><code>point.number</code>:\nThe number of the point being processed.</p>\n<p><code>point.distance</code>:\nThe distance of the point being processed from the query point.\nThis is only available when iterating over unshaded points.</p>\n<p>This function is only valid while looping with <code>pciterate</code> or\n<code>pcunshaded</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pciterate\">pciterate()</a><div class=\"related-summary\">This function can be used to iterate over all the points which were\nfound in the pcopen query.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\">pcunshaded()</a><div class=\"related-summary\">Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcexport\">pcexport()</a><div class=\"related-summary\">Writes data to a point cloud inside a\npciterate or a pcunshaded loop.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pcimportbyidx3": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimportbyidx3\">pcimportbyidx3</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Imports channel data from a point cloud outside a <code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>matrix3 pcimportbyidx3(int handle, string channel_name, int idx)</code></li></ul>\n\n\n\n<p>After a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> and a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\" title=\"This node returns the number of points found by pcopen.\">pcnumfound()</a>, this can be used to extract\nspecific search results from the found points.</p>\n<p>This will return 0 if the channel doesn\u2019t exist.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\">pcnumfound()</a><div class=\"related-summary\">This node returns the number of points found by pcopen.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "idx"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            }
        ]
    },
    "pcimportbyidx4": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimportbyidx4\">pcimportbyidx4</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Imports channel data from a point cloud outside a <code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>matrix pcimportbyidx4(int handle, string channel_name, int idx)</code></li></ul>\n\n\n\n<p>After a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> and a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\" title=\"This node returns the number of points found by pcopen.\">pcnumfound()</a>, this can be used to extract specific search results from the found points.</p>\n<p>This will return 0 if the channel doesn\u2019t exist.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\">pcnumfound()</a><div class=\"related-summary\">This node returns the number of points found by pcopen.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "idx"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "pcimportbyidxf": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimportbyidxf\">pcimportbyidxf</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Imports channel data from a point cloud outside a <code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>float pcimportbyidxf(int handle, string channel_name, int idx)</code></li></ul>\n\n\n\n<p>After a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> and a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\" title=\"This node returns the number of points found by pcopen.\">pcnumfound()</a>, this can be used to extract specific search results from the found points.</p>\n<p>This will return 0 if the channel doesn\u2019t exist.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\">pcnumfound()</a><div class=\"related-summary\">This node returns the number of points found by pcopen.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "idx"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "pcimportbyidxi": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimportbyidxi\">pcimportbyidxi</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Imports channel data from a point cloud outside a <code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>int pcimportbyidxi(int handle, string channel_name, int idx)</code></li></ul>\n\n\n\n<p>After a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> and a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\" title=\"This node returns the number of points found by pcopen.\">pcnumfound()</a>, this can be used to extract specific search results from the found points.</p>\n<p>This will return 0 if the channel doesn\u2019t exist.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\">pcnumfound()</a><div class=\"related-summary\">This node returns the number of points found by pcopen.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "idx"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pcimportbyidxp": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimportbyidxp\">pcimportbyidxp</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Imports channel data from a point cloud outside a <code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>vector4 pcimportbyidxp(int handle, string channel_name, int idx)</code></li></ul>\n\n\n\n<p>After a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> and a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\" title=\"This node returns the number of points found by pcopen.\">pcnumfound()</a>, this can be used to extract specific search results from the found points.</p>\n<p>This will return 0 if the channel doesn\u2019t exist.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\">pcnumfound()</a><div class=\"related-summary\">This node returns the number of points found by pcopen.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "idx"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "pcimportbyidxs": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimportbyidxs\">pcimportbyidxs</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Imports channel data from a point cloud outside a <code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>string pcimportbyidxs(int handle, string channel_name, int idx)</code></li></ul>\n\n\n\n<p>After a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> and a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\" title=\"This node returns the number of points found by pcopen.\">pcnumfound()</a>, this can be used to extract specific search results from the found points.</p>\n<p>This will return 0 if the channel doesn\u2019t exist.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\">pcnumfound()</a><div class=\"related-summary\">This node returns the number of points found by pcopen.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "idx"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "pcimportbyidxv": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimportbyidxv\">pcimportbyidxv</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Imports channel data from a point cloud outside a <code>pciterate</code> or a <code>pcunshaded</code> loop.</p><ul><li><code>vector pcimportbyidxv(int handle, string channel_name, int idx)</code></li></ul>\n\n\n\n<p>After a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> and a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\" title=\"This node returns the number of points found by pcopen.\">pcnumfound()</a>, this can be used to extract specific search results from the found points.</p>\n<p>This will return 0 if the channel doesn\u2019t exist.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\">pcnumfound()</a><div class=\"related-summary\">This node returns the number of points found by pcopen.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name",
                    "idx"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "pciterate": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pciterate\">pciterate</a></h1><span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">This function can be used to iterate over all the points which were\nfound in the pcopen query.</p><ul><li><code>int pciterate(int handle)</code></li></ul>\n\n\n\n<p>This function can be used to iterate over all the points which were\nfound in a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> query. The first argument is the <code>handle</code>\nreturned by <code>pcopen</code>.\nThe function returns 1 while there are points left in the iteration loop,\nor 0 when there are no further points. This lets you use the function as\nthe condition in a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../statement\">while loop</a>.</p>\n<p>Warnings:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nIt is not possible to nest pcunshaded or pciterate loops for the same\nhandle. That is, for a single <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen</a> call, only one\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a> or <code>pciterate</code> loop may be entered.\n</li>\n<li class=\"bullet \">\nComputations involving derivatives inside <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded</a>\nloops may have slightly different results. If derivatives are required\nfor variables which aren\u2019t set by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimport\" title=\"Imports channel data from a point cloud inside a\npciterate or a pcunshaded loop.\">pcimport</a> it may be\nbetter to pre-compute the derivatives before the\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a> loop is entered.\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\">pcunshaded()</a><div class=\"related-summary\">Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcimport\">pcimport()</a><div class=\"related-summary\">Imports channel data from a point cloud inside a\npciterate or a pcunshaded loop.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pcnumfound": {
        "added": "12.1",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcnumfound\">pcnumfound</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.1</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">This node returns the number of points found by pcopen.</p><ul><li><code>int pcnumfound(int handle)</code></li></ul>\n\n\n<p>This node returns the number of points found by a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen</a> query.</p>\n<p>For example, if 10 points are being filtered, and 6 are within the\nsearch radius, <code>pcnumfound</code> will return 6.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">int pcnumfound(int handle)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the number of found points from the search performed by\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen</a>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic_pair": true
            }
        ]
    },
    "pcopen": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Returns a handle to a point cloud file.</p><ul><li><code>int pcopen(int inputnum, string Pchannel, vector P, float radius, int maxpoints)</code></li><li><code>int pcopen(string filename, string channel, int shaded, ...)</code></li><li><code>int pcopen(string filename, string Pchannel, vector P, string Nchannel, vector N, float radius, int maxpoints, ...)</code></li><li><code>int pcopen(string filename, string Pchannel, vector P, float radius, int maxpoints, ...)</code></li></ul>\n\n\n\n<p>This function opens a point cloud file (<code>.pc</code>) and queues up access to the\npoints contained in it.  You can then iterate over the points with\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pciterate\" title=\"This function can be used to iterate over all the points which were\nfound in the pcopen query.\">pciterate()</a>.</p>\n<p>The first two versions of this function queue up points centered around a\ncertain location <code>P</code> within <code>radius</code>, based on point positions found in\n<code>Pchannel</code>.  Only the <code>maxpoints</code> closest points within the given\nradius will be queued.  When using <code>pcopen()</code> with <code>pciterate()</code>, points will\nbe sorted from nearest to farthest.  The file name may use the <code>op:</code> syntax\nto reference SOP geometry in the OP contexts.  The <code>Pchannel</code> parameter\nindicates the channel in the texture which contains the positions to be\nsearched. <code>Pchannel</code> will be made read-only if it is not already. Any\nsubsequent attempts to use the channel with <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcexport\" title=\"Writes data to a point cloud inside a\npciterate or a pcunshaded loop.\">pcexport()</a> or\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a> will fail.  Optionally, the <code>Nchannel</code> specifies a\ndirection channel and the <code>N</code> vector specifies a search direction. Only\npoints which are pointed in the same direction (i.e. <code>dot(N, Npoint) &gt; 0</code>)\nwill be queued.</p>\n<p>In some cases, you may need to add additional channels to a point cloud.  You can do this by using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcexport\" title=\"Writes data to a point cloud inside a\npciterate or a pcunshaded loop.\">pcexport()</a> and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a>.  Often,\nyou will not need to add extra channel data to every point in the point cloud. For example, if only part of the point cloud is inside the camera\u2019s frustum.\nIn these cases, it is best to only add channel data to points returned by\na proximity query.  However, sometimes all points in a point cloud must\nreceive extra channel data before meaningful queries can be made. For example, when adding a position channel.  In these cases, the third version of this function can be used to queue up all shaded (<code>shaded</code> != 0) or unshaded (<code>shaded</code> == 0) points of a certain channel, <code>channel</code>.  If <code>channel</code> does not exist, all points will be queued.  This function, unlike the first two, does not lock <code>channel</code>.</p>\n<p>You can specify an additional string parameter <code>\"prefix\"</code>, with the next\nparameter being a channel prefix string, used to reference tiled block\nfiles.</p>\n<p>NOTE:\nThe preload option loads the entire point cloud into memory. Disabling this option will cause it to use a tile cache.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Performing a proximity query:</p>\n<div class=\"code-container\">\n<code class=\"line\">int handle = pcopen(texturename, \"P\", P, maxdistance, maxpoints);\n</code><code class=\"line\">while (pcunshaded(handle, \"irradiance\"))\n</code><code class=\"line\">{\n</code><code class=\"line\">pcimport(handle, \"P\", cloudP);\n</code><code class=\"line\">pcimport(handle, \"N\", cloudN);\n</code><code class=\"line\">ir = computeIrraciance(cloudP, cloudN);\n</code><code class=\"line\">pcexport(handle, \"irradiance\", ir);\n</code><code class=\"line\">}\n</code><code class=\"line\">pcfilter(handle, radius, \"irradiance\", ir);\n</code>\n</div>\n<p>Shading an entire channel:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector sample;\n</code><code class=\"line\">int rval, handle;\n</code><code class=\"line\">\n</code><code class=\"line\">handle = pcopen(texturename, \"P\", 0);\n</code><code class=\"line\">while (pcunshaded(handle, \"P\"))\n</code><code class=\"line\">{\n</code><code class=\"line\">sample = set(nrandom(\"qstrat\"), nrandom(\"qstrat\"), 0.0);\n</code><code class=\"line\">rval = sample_geometry(\n</code><code class=\"line\">sample, sample, Time,\n</code><code class=\"line\">\"scope\", getobjectname(),\n</code><code class=\"line\">\"pipeline\", \"displacement\",\n</code><code class=\"line\">\"P\", pos);\n</code><code class=\"line\">if (rval)\n</code><code class=\"line\">rval = pcexport(handle, \"P\", pos);\n</code><code class=\"line\">}\n</code><code class=\"line\">pcclose(handle);\n</code>\n</div>\n<p>Controlling the minimum dot product between the point normal and the normal passed to <code>pcopen()</code> for points to be filtered:</p>\n<div class=\"code-container\">\n<code class=\"line\">int handle = pcopen(\"test.pc\", \"P\", P, \"N\", N, 1e6, 100, \"ndot\", 0.8);\n</code>\n</div>\n<p>This will only return points where dot(N, Npoint) &gt; 0.8.</p>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcgenerate\">pcgenerate()</a><div class=\"related-summary\">Generates a point cloud.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcwrite\">pcwrite()</a><div class=\"related-summary\">Writes data to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfilter\">pcfilter()</a><div class=\"related-summary\">Filters the points found by pcopen using a simple reconstruction filter.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pciterate\">pciterate()</a><div class=\"related-summary\">This function can be used to iterate over all the points which were\nfound in the pcopen query.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\">pcunshaded()</a><div class=\"related-summary\">Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcimport\">pcimport()</a><div class=\"related-summary\">Imports channel data from a point cloud inside a\npciterate or a pcunshaded loop.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcclose\">pcclose()</a><div class=\"related-summary\">This function closes the handle associated with a pcopen\nfunction.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "Pchannel",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "channel",
                    "shaded"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "Pchannel",
                    "P",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "Pchannel",
                    "P",
                    "Nchannel",
                    "N",
                    "radius",
                    "maxpoints"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const string",
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "pcopenlod": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopenlod\">pcopenlod</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Returns a handle to a point cloud file.</p><ul><li><code>int pcopenlod(string filename, string Pchannel, vector P, int min_pts, ...)</code></li></ul>\n\n\n\n<p>This function opens a point cloud file (<code>.pc</code>) and queues up access to the\npoints contained in it.  You can then iterate over the points with\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\" title=\"Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.\">pcunshaded()</a> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pciterate\" title=\"This function can be used to iterate over all the points which were\nfound in the pcopen query.\">pciterate()</a> and add new data to the point cloud using\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcexport\" title=\"Writes data to a point cloud inside a\npciterate or a pcunshaded loop.\">pcexport()</a>.</p>\n<p>While this function is similar to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a>, the major difference is the points that it queues up may be aggregates of entire groups of points.  In\nother words, a single point may represent many points.  This allows you to\nperform queries at any desired level of detail without ignoring points in the\npoint cloud.  For example, you can perform a query in which points\nnear the query origin are queued up as usual, but points far from the origin\nare averaged.  This can lead to dramatic performance increases because entire\ngroups of points can be processed as if they are a single point.</p>\n<p>As in <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a>, <code>P</code> specifies the query origin and <code>Pchannel</code>\nspecifies the position channel.  During construction, the tree structure\nstarts out as a single bounding box that encompasses all the points in a\npoint cloud, and is recursively subdivided until there are fewer than\n<code>min_pts</code> points in a node - at which point subdivision stops and a leaf\nnode is created.  A good default for <code>min_pts</code> is 8.</p>\n<p>Queries are performed by descending the tree structure from the root node\nuntil some condition is met.  Conceptually, you start with a coarse query\nand refine it until you decide that it is detailed enough.  You use a\n<code>measure</code> to decide when the query has the desired level of detail.  Two\n<code>measure</code> values are supported: <code>distance</code> and <code>solidangle</code>.</p>\n\n<h2 class=\"label heading\" id=\"distance-queries\">\n            \n            Distance Queries\n        </h2>\n<div class=\"content\" id=\"distance-queries-body\">\n<p><code>distance</code> mode is provided for compatibility with <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> and does\nnot queue up aggregate points.  Distance queries take a threshold parameter\nthat indicates the radius within which to accept points.</p>\n<p>The <code>threshold</code> argument specifies the radius within which points are\naccepted - identical to the radius passed to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a>.  For example,\ncalling <code>pcopenlod</code>(\u2026, <code>\"measure\"</code>, <code>\"distance\"</code>, <code>\"threshold\"</code>, radius, \u2026)\nqueues up points that lie within the specified radius of the query origin.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"solid-angle-queries\">\n            \n            Solid Angle Queries\n        </h2>\n<div class=\"content\" id=\"solid-angle-queries-body\">\n<p>Solid angle queries prioritize points by how close they are to the query\npoint and also by the area of the point, so points that are close to the\nquery point and that have a large area are given a greater weight.  The\nquery process will tend to split points with a larger contribution by\nqueueing their children.</p>\n<p>The exact equation used to compute point contribution is the following:</p>\n<p>Ai / ||Pi - P||^2,</p>\n<p>where Ai is an aggregate area value, Pi is the closest point to P in the\naggregate box, and P is the query origin.  Calling <code>pcopenlod</code>(\u2026,\n<code>\"measure\"</code>, <code>\"solidangle\"</code>, <code>\"area\"</code>, <code>\"A\"</code>, \u2026) performs a solid-angle query\nin which the <code>A</code> channel is assumed to hold area values.</p>\n<p>There are two different ways to use the solid angle query - an unlimited\n(<code>threshold</code>) query which returns a different number of points depending on\nhow many points meet the given threshold, and a limited (<code>samples</code>) query\nwhich always returns the same number of points.  If a <code>samples</code> argument is\npresent, a limited query is assumed.</p>\n<p>Limited queries work by prioritizing rather than thresholding samples - so\nthat regardless of the total weight of the points being considered, the\nsame number of points are returned.  The algorithm works by iteratively\npicking the point that has the greatest contribution and splitting that\npoint until enough points have been split to meet the desired sample count.\nLimited queries are useful when you need a fixed performance or minimum\nquality level for the query.</p>\n<p>Threshold queries work by comparing the point contribution to a fixed\nthreshold - and accepting or rejecting the point based on this comparison.\nSince different query points lead to different point contributions, a\nvariable number of points will be queued up for threshold queries.\nThreshold queries are useful when it is acceptable to use a lower number of\npoints for query positions that are far from the point cloud.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"aggregation\">\n            \n            Aggregation\n        </h2>\n<div class=\"content\" id=\"aggregation-body\">\n<p>Additional string parameters indicate how point values are aggregated.  Each\nchannel can have a different aggregation mode: <code>mean</code>, <code>sum</code>, or\n<code>weighted</code>.  Calling <code>pcopenlod</code>(\u2026, <code>aggregate:P</code>, <code>sum</code>) will aggregate\nthe values in channel <code>P</code> by summing them.  Calling <code>pcopenlod</code>(\u2026,\n<code>aggregate:A</code>, <code>weighted</code>, <code>weight</code>, <code>W</code>) will aggregate the values in\nchannel <code>A</code> using a weighted mean with weights from channel <code>W</code>.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"example-proximity-query\">\n            \n            Example: Proximity Query\n        </h2>\n<div class=\"content\" id=\"example-proximity-query-body\">\n<div class=\"code-container\">\n<code class=\"line\">int handle = pcopenlod(texturename, \"P\", P, 8,\n</code><code class=\"line\">\"measure\", \"distance\", \"threshold\", 2.0,\n</code><code class=\"line\">\"aggregate:P\", \"mean\",\n</code><code class=\"line\">\"aggregate:value\", \"sum\");\n</code><code class=\"line\">Cf = 0;\n</code><code class=\"line\">while (pciterate(handle))\n</code><code class=\"line\">{\n</code><code class=\"line\">pcimport(handle, \"value\", valueSum);\n</code><code class=\"line\">Cf += valueSum;\n</code><code class=\"line\">}\n</code><code class=\"line\">pcclose(handle);\n</code>\n</div>\n</div>\n\n\n<h2 class=\"label heading\" id=\"example-threshold-solid-angle-query\">\n            \n            Example: Threshold Solid-angle Query\n        </h2>\n<div class=\"content\" id=\"example-threshold-solid-angle-query-body\">\n<div class=\"code-container\">\n<code class=\"line\">handle = pcopenlod(texturename, \"P\", P, 8,\n</code><code class=\"line\">\"measure\", \"solidangle\", \"area\", \"A\", \"threshold\", 0.01,\n</code><code class=\"line\">\"aggregate:A\", \"sum\",\n</code><code class=\"line\">\"aggregate:irradiance\", \"weighted\", \"weight\", \"A\",\n</code><code class=\"line\">\"aggregate:P\", \"mean\");\n</code><code class=\"line\">Cf = 0;\n</code><code class=\"line\">while (pciterate(handle))\n</code><code class=\"line\">{\n</code><code class=\"line\">pcimport(handle, \"irradiance\", irradiance);\n</code><code class=\"line\">Cf += irradiance;\n</code><code class=\"line\">}\n</code><code class=\"line\">pcclose(handle);\n</code>\n</div>\n</div>\n\n\n<h2 class=\"label heading\" id=\"example-limited-solid-angle-query\">\n            \n            Example: Limited Solid-angle Query\n        </h2>\n<div class=\"content\" id=\"example-limited-solid-angle-query-body\">\n<div class=\"code-container\">\n<code class=\"line\">handle = pcopenlod(texturename, \"P\", P, 8,\n</code><code class=\"line\">\"measure\", \"solidangle\", \"area\", \"A\", \"samples\", 4,\n</code><code class=\"line\">\"aggregate:A\", \"sum\",\n</code><code class=\"line\">\"aggregate:irradiance\", \"weighted\", \"weight\", \"A\",\n</code><code class=\"line\">\"aggregate:P\", \"mean\");\n</code><code class=\"line\">Cf = 0;\n</code><code class=\"line\">while (pciterate(handle))\n</code><code class=\"line\">{\n</code><code class=\"line\">pcimport(handle, \"irradiance\", irradiance);\n</code><code class=\"line\">Cf += irradiance;\n</code><code class=\"line\">}\n</code><code class=\"line\">pcclose(handle);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcgenerate\">pcgenerate()</a><div class=\"related-summary\">Generates a point cloud.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcwrite\">pcwrite()</a><div class=\"related-summary\">Writes data to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfilter\">pcfilter()</a><div class=\"related-summary\">Filters the points found by pcopen using a simple reconstruction filter.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pciterate\">pciterate()</a><div class=\"related-summary\">This function can be used to iterate over all the points which were\nfound in the pcopen query.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\">pcunshaded()</a><div class=\"related-summary\">Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcimport\">pcimport()</a><div class=\"related-summary\">Imports channel data from a point cloud inside a\npciterate or a pcunshaded loop.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcclose\">pcclose()</a><div class=\"related-summary\">This function closes the handle associated with a pcopen\nfunction.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcsampleleaf\">pcsampleleaf()</a><div class=\"related-summary\">Changes the current iteration point to a leaf descendant of the current aggregate point.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "Pchannel",
                    "P",
                    "min_pts"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "pcsampleleaf": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcsampleleaf\">pcsampleleaf</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Changes the current iteration point to a leaf descendant of the current aggregate point.</p><ul><li><code>void pcsampleleaf(int handle, float sample)</code></li></ul>\n\n\n\n<p>This function can only be used with the pcopenlod() function, and then only\nwithin a pciterate() loop.  It replaces the current iteration point with an\nimportance sampled leaf descendent of that point.  The weighting used to\nselect the leaf point is the \"area\" channel provided to the pcopenlod()\nfunction\u2019s \"measure\" parameter, or a uniform weight if no area channel\nwas specified when opening the point cloud.  The sample parameter is\nexpected to be a uniform random value between 0 and 1.</p>\n<p>If the current iteration point is already a leaf point or the point cloud\nwas not opened with pcopenlod(), pcsampleleaf() has no effect.</p>\n<p>This function is useful when aggregate point information cannot be used in\na meaningful way, and provides a mechanism to access the information\ncontained in child nodes in the point tree.  For example, it wouldn\u2019t make\nsense to trace shadow rays from an averaged point position, but it is\nuseful to choose one of the child points and then send the shadow ray to\nthat point.</p>\n\n<h2 class=\"label heading\" id=\"example-shadow-rays\">\n            \n            Example: Shadow Rays\n        </h2>\n<div class=\"content\" id=\"example-shadow-rays-body\">\n<div class=\"code-container\">\n<code class=\"line\">// Open a point cloud and retrieve a single aggregate point representing the\n</code><code class=\"line\">// entire cloud\n</code><code class=\"line\">string texturename = \"points.pc\";\n</code><code class=\"line\">int handle = pcopenlod(texturename, \"P\", P, 8,\n</code><code class=\"line\">\"measure\", \"solidangle\",\n</code><code class=\"line\">\"area\", \"A\",\n</code><code class=\"line\">\"samples\", 1,\n</code><code class=\"line\">\"aggregate:A\", \"sum\",\n</code><code class=\"line\">\"aggregate:P\", \"mean\");\n</code><code class=\"line\">\n</code><code class=\"line\">Cf = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">// This loop will iterate only once\n</code><code class=\"line\">while (pciterate(handle))\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Query A from the averaged point\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float        ptarea;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0pcimport(handle, \"A\", ptarea);\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0pcsampleleaf(handle, nrandom());\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Query P from a sampled leaf point\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector        pos;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0pcimport(handle, \"P\", pos);\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (trace(pos, P-pos, Time))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cf += ptarea / length2(P-pos);\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopenlod\">pcopenlod()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pciterate\">pciterate()</a><div class=\"related-summary\">This function can be used to iterate over all the points which were\nfound in the pcopen query.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "sample"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "pcsize": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcsize\">pcsize</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\"></p><ul><li><code>int pcsize(int handle)</code></li></ul>\n\n\n\n<p>Returns the total number of points in the point cloud specified by <code>handle</code>, where <code>handle</code> was returned by a prior call to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic_pair": true
            }
        ]
    },
    "pcunshaded": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcunshaded\">pcunshaded</a></h1><span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Iterate over all of the points of a read-write channel which haven\u2019t\nhad any data written to the channel yet.</p><ul><li><code>int pcunshaded(int handle, string channel_name)</code></li></ul>\n\n\n\n<p>Like <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pciterate\" title=\"This function can be used to iterate over all the points which were\nfound in the pcopen query.\">pciterate()</a>, this function can be used to iterate over\npoints which were found in a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen()</a> query. The first argument is\nthe <code>handle</code> returned by <code>pcopen</code>.</p>\n<p>However, where <code>pciterate</code> iterates over all the points, this function\nonly iterates over points where the channel in <code>channel_name</code> has\nnot yet been written to.</p>\n<p>The function returns 1 while there are points left in the iteration loop,\nor 0 when there are no further points. This lets you use the function as\nthe condition in a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../statement\">while loop</a>.</p>\n<p>Warnings:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nThis function will not work correctly when used in multi-threaded OPs.\nIt is not possible to nest <code>pcunshaded</code> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pciterate\" title=\"This function can be used to iterate over all the points which were\nfound in the pcopen query.\">pciterate</a>\nloops for the same handle. That is, for a single <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcopen\" title=\"Returns a handle to a point cloud file.\">pcopen</a>\ncall, only one <code>pcunshaded</code> or <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pciterate\" title=\"This function can be used to iterate over all the points which were\nfound in the pcopen query.\">pciterate</a> loop may be\nentered.\n</li>\n<li class=\"bullet \">\nComputations involving derivatives inside <code>pcunshaded</code> loops may have\nslightly different results. If derivatives are required for variables\nwhich aren\u2019t set by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcimport\" title=\"Imports channel data from a point cloud inside a\npciterate or a pcunshaded loop.\">pcimport</a> it may be better to\npre-compute the derivatives before the <code>pcunshaded</code> loop is entered.\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pciterate\">pciterate()</a><div class=\"related-summary\">This function can be used to iterate over all the points which were\nfound in the pcopen query.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcimport\">pcimport()</a><div class=\"related-summary\">Imports channel data from a point cloud inside a\npciterate or a pcunshaded loop.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcexport\">pcexport()</a><div class=\"related-summary\">Writes data to a point cloud inside a\npciterate or a pcunshaded loop.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "channel_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pcwrite": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pcwrite\">pcwrite</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Writes data to a point cloud file.</p><ul><li><code>int pcwrite(string filename, ...)</code></li></ul>\n\n\n\n<p>This function writes data for the current shading point out to a point cloud file.</p>\n<p>The first argument is the name of the file to write to. You can read the resulting file into a geometry network with the <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/file\" title=\"Reads, writes, or caches geometry on disk.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/COMMON/file.svg\">[Image \ud83d\udd17]</a>File surface node</a>. Houdini expects point cloud files to use the <code>.pc</code> extension (Houdini will use the extension to determine how to import the file).</p>\n<p>Subsequent arguments specify one or more pairs of a channel name (a string naming the attribute you're saving, such as <code>\"P\"</code>, <code>\"N\"</code>, <code>\"v\"</code>, <code>\"area\"</code>, <code>\"u\"</code>, etc.) and value (the value you wish to store).</p>\n<div class=\"code-container\">\n<code class=\"line\">pcwrite(\"out.pc\", \"P\", P, \"N\", N)\n</code>\n</div>\n<p>To write a variable as a vector type instead of a triple, append <code>:vector</code> to the channel name.</p>\n<div class=\"code-container\">\n<code class=\"line\">pcwrite(\"out.pc\", \"P\", P, \"N:vector\", N)\n</code>\n</div>\n<p>In micropolygon rendering, points are interpolated with neighbor points so that duplicate vertices on corners and edges are eliminated in the point cloud.  If you want to disable this behavior, use the <code>\"interpolate\"</code> argument described below.</p>\n\n<h2 class=\"label heading\" id=\"options\">\n            \n            Options\n        </h2>\n<div class=\"content\" id=\"options-body\">\n\n<p>\n<code>\"interpolate\"</code>\n\n<div class=\"content\">\n<p>When you pass this argument a value of <code>1</code> (the default), one interpolated point is written representing the four corners of a micropolygon. This prevents writing out overlapping values.</p>\n<div class=\"code-container\">\n<code class=\"line\">pcwrite(\"out.pc\", \"P\", P, \"interpolate\", 1)\n</code>\n</div>\n<p>Using a value of <code>0</code> will cause interpolation to be disabled, which can be useful when writing points that are not based on <code>P</code>. Interpolation will have no effect in ray tracing mode.</p>\n<p>(Note that this means you can\u2019t use <code>interpolate</code> as the name of a data channel.)</p>\n</div>\n</p>\n<p>\n<code>\"countphotons\"</code>\n\n<div class=\"content\">\n<p>For photon generation modes, add the number of points stored\n    to the total number of photons, for the purposes of progress reporting and termination\n    of photon map generation.</p>\n</div>\n</p>\n<p>\n<code>\"mkdir\"</code>\n\n<div class=\"content\">\n<p>When you pass an argument of <code>1</code>, the function will automatically create missing sub-directories/paths.  The default value is <code>0</code>.</p>\n</div>\n</p>\n\n</div>\n\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n<code class=\"line\">surface\n</code><code class=\"line\">dumpsomepoints(string fname = \"points.$F4.pc\"; int do_cull = 0; float keepamt = 0.05)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector    nn = normalize(frontface(N, I));\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int       rval=0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float     A = area(P,\"smooth\",0);  // area without smoothed derivs\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if( !do_cull  ||  do_cull &amp; (nrandom()&lt;keepamt) )\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if( do_cull &amp;&amp; keepamt &gt; 0 )\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A = A/keepamt;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rval = pcwrite(fname, \"interpolate\", 1,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"P\", ptransform(\"space:camera\",\"space:world\", P),\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"N\", ntransform(\"space:camera\",\"space:world\", normalize(N)),\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"area\", A);  // output an \"area\" channel in pc\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0Cf =abs(nn)*rval;\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcopen\">pcopen()</a><div class=\"related-summary\">Returns a handle to a point cloud file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcexport\">pcexport()</a><div class=\"related-summary\">Writes data to a point cloud inside a\npciterate or a pcunshaded loop.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "filename"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "pgfind": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pgfind\">pgfind</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">pc</span></span></span><p class=\"summary\">Returns a list of closest points from a file.</p><ul><li><code>int[] pgfind(int inputnum, string ptgroup, vector P, float radius, int maxpoints, float divsize)</code></li><li><code>int[] pgfind(int inputnum, vector P, float radius, int maxpoints, float divsize)</code></li><li><code>int[] pgfind(string filename, string ptgroup, vector P, float radius, int maxpoints, float divsize)</code></li><li><code>int[] pgfind(string filename, vector P, float radius, int maxpoints, float divsize)</code></li></ul>\n\n\n\n<p>These functions are very similar to the <code>pcfind</code> functions.  The difference is that they use a grid-based acceleration structure.  This can provide faster initialization and lookups, provided the right grid size tuning parameter is used.</p>\n<p>If you are searching a point cloud using an near-constant search radius, that radius can be used as the division size.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The division size must be not vary per point.</p>\n</div>\n</div>\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The division size is clamped above 3.0\u00d710<sup>5</sup>.</p>\n</div>\n</div>\n</div>\n<p>The <code>ptgroup</code> is a point group that limits the points to search.  This is a SOP-style group pattern, so can be something like <code>0-10</code> or <code>@Cd.x&gt;0.5</code>.  A blank string is treated as matching all points.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind\">pcfind()</a><div class=\"related-summary\">Returns a list of closest points from a file.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind_radius\">pcfind_radius()</a><div class=\"related-summary\">Returns a list of closest points from a file taking into account their radii.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "ptgroup",
                    "P",
                    "radius",
                    "maxpoints",
                    "divsize"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const float",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "inputnum",
                    "P",
                    "radius",
                    "maxpoints",
                    "divsize"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const float",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "ptgroup",
                    "P",
                    "radius",
                    "maxpoints",
                    "divsize"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const float",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "P",
                    "radius",
                    "maxpoints",
                    "divsize"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "phong": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/phong\">phong</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the illumination for specular highlights using different lighting models.</p><ul><li><code>vector phong(vector nml, vector V, float shinyness, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>bsdf phong(float exponent, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf phong(vector nml, float exponent, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p><code>phong</code>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/blinn\" title=\"Returns the illumination for specular highlights using the Blinn model.\">blinn</a>, and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/specular\" title=\"Returns the illumination for specular highlights using different lighting models.\">specular</a> return the\nillumination for specular highlights using different lighting models.</p>\n<p><code>V</code> represents the normalized vector from the surface to the eye\n(-normalize(I)). <code>shinyness</code> is the Phong exponent (typically around\n20 or higher). <code>roughness</code> represents the surface roughness (typically\n0 to 1).</p>\n<p>You can optionally specify a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#lightmask\">light mask</a>.</p>\n\n<h2 class=\"label heading\" id=\"bsdf-version\">\n            \n            BSDF version\n        </h2>\n<div class=\"content\" id=\"bsdf-version-body\">\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">bsdf phong(float exponent)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">bsdf phong(vector nml, float exponent)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../pbr\">writing a PBR shader</a> for information on BSDFs.</p>\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/phong.png\">[Image \ud83d\udd17]\n</a></p>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ashikhmin\">ashikhmin()</a><div class=\"related-summary\">Returns a specular BSDF using the Ashikhmin shading model</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phonglobe\">phonglobe()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "exponent"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "exponent"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "V",
                    "shinyness"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "phongBRDF": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/phongBRDF\">phongBRDF</a></h1><p class=\"summary\"></p><ul><li><code>float phongBRDF(vector L, vector N, vector V, float rough)</code></li></ul>\n\n\n\n<p><a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\" title=\"Returns the computed BRDFs for the different lighting models used in VEX shading.\">specularBRDF()</a>, <code>phongBRDF</code>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/blinnBRDF\">blinnBRDF()</a>,\nand <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/diffuseBRDF\">diffuseBRDF()</a> return the computed BRDF for the\ndifferent lighting models used in VEX shading. You can use them in\ncustom <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> loops to replicate the lighting models of the\ncorresponding VEX lighting functions.</p>\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\" title=\"Returns the computed BRDFs for the different lighting models used in VEX shading.\">specularBRDF()</a> for some example code.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\">specularBRDF()</a><div class=\"related-summary\">Returns the computed BRDFs for the different lighting models used in VEX shading.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/blinnBRDF\">blinnBRDF()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/diffuseBRDF\">diffuseBRDF()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/illuminance\">illuminance()</a><div class=\"related-summary\">Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "L",
                    "N",
                    "V",
                    "rough"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "phonglobe": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/phonglobe\">phonglobe</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\"></p><ul><li><code>bsdf phonglobe(vector dir, float exponent, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf phonglobe(vector dir, float exponentx, float exponenty, vector framex, vector framey, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf phonglobe(vector nml, vector dir, float exponent, ...)</code></li><li><code>bsdf phonglobe(vector nml, vector dir, float exponentx, float exponenty, vector framex, vector framey, ...)</code></li></ul>\n\n\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/phonglobe.png\">[Image \ud83d\udd17]\n</a></p>\n<p>A phong (blurred) reflection along a given direction vector. This will produce the same result as <code>phong()</code> when the direction vector is the reflection vector, but with this function you can also gather illumination from other directions (such as transmission).</p>\n<p>It is possible to create anisotropic phong lobes by providing x and y exponents and tangent vectors.</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>dir</code> \u2013 the direction of specularity.\n</li>\n<li class=\"bullet \">\n<code>nml</code> \u2013 optional normal to specify the hemisphere for reflection directions.\n</li>\n<li class=\"bullet \">\n<code>exponent</code> \u2013 phong exponent.\n</li>\n<li class=\"bullet \">\n<code>exponentx</code> \u2013 phong exponent along the <code>framex</code> vector.\n</li>\n<li class=\"bullet \">\n<code>exponenty</code> \u2013 phong exponent along the <code>framey</code> vector.\n</li>\n<li class=\"bullet \">\n<code>framex</code> \u2013 highlight X direction\n</li>\n<li class=\"bullet \">\n<code>framey</code> \u2013 highlight Y direction\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phong\">phong()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ashikhmin\">ashikhmin()</a><div class=\"related-summary\">Returns a specular BSDF using the Ashikhmin shading model</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "dir",
                    "exponentx",
                    "exponenty",
                    "framex",
                    "framey"
                ],
                "args": [
                    "const vector",
                    "const float",
                    "const float",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "dir",
                    "exponent"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "dir",
                    "exponentx",
                    "exponenty",
                    "framex",
                    "framey"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float",
                    "const float",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "dir",
                    "exponent"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "photonmap": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/photonmap\">photonmap</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">photon</span></span></span><p class=\"summary\">The photonmap function will evaluate a photon map and return the\nresulting color information.</p><ul><li><code>void photonmap(string mapname, vector P, vector N, vector &amp;clr, float &amp;area, ...)</code></li><li><code>vector photonmap(string mapname, vector P, vector N, ...)</code></li></ul>\n\n\n\n<p>The photonmap function will evaluate a photon map and return the\nresulting color information.</p>\n<p>You can specify additional keyword,value argument pairs to set the\nbehavior of the evaluation. These arguments must be defined at load\ntime (literals or parameters).</p>\n<p>To specify one of the additional arguments, pass the keyword as a\nstring, with the next argument being the value for the keyword. For\nexample <code>..., \"wrap\", \"clamp\", \"border\", {.1,1,1})</code>.</p>\n\n<tr>\n</tr>\n<th>\n     Keyword\n    \n</th>\n<th>\n     Value\n    \n</th>\n<tr>\n</tr>\n<td>\n</td>\n<p><code>nphotons</code>\ntd&gt;&gt;\nSpecifies the number of photons to use in the filtering\nprocess. This specifies the maximum number of photons which\nwill be filtered to produce the final color.</p>\n<p>The default is 50 photons.</p>\n<tr>\n</tr>\n<td>\n</td>\n<p><code>type</code>\ntd&gt;&gt;\nThis parameter specifies how the photons should be\ninterpreted. There are two possibilities for the type of\nphoton filtering:</p>\n<p><code>diffuse</code> (default):\nEach photon will be scaled by the Lambertian cosine\nlaw.\n<code>irradiance</code> :\nThe raw energy of each photon will be used (without any\nfiltering).\ntr&gt;&gt;\ntd&gt;&gt;\n<code>error</code>\ntd&gt;&gt;\nSpecifies the \"accuracy\" for the lookup of photons in the\nphoton map. This parameter determines the search radius to\nfind photons in the map. Larger numbers will result in less\naccurate evaluations (i.e. smaller areas of the map will be\nscanned), while smaller number will result in larger areas\nof the map being scanned. The cost of filtering goes up as\nthe error tolerance is decreased (meaning renders will take\nlonger).</p>\n<p>The default 0.001.</p>\n<tr>\n</tr>\n<td>\n</td>\n<p><code>filter</code>\ntd&gt;&gt;\nSpecifies the \"filter\" for computing the irradiance from\nphotons. When evaluating photon contributions, the incoming\nradiance is divided by the area that the photons cover (to\ndetermine the flux). The area can be computed in three\ndifferent fashions:</p>\n<p><code>sphere</code> (default):\nThe minimum bounding sphere of all photons will be used\nto estimate the area. This estimator will result in soft\nblobby looking photon evaluation. It can be inaccurate\nnear edges of primitives.\n<code>volume</code>:\nLike sphere, but uses the volume of the minimum bounding\nsphere rather than area to normalize photon tracing\nresults.  When using volume filtering it is usually\nnecessary to divide the photon lookup result by the volume\ndensity to correct for the density-weighted photon\ndistribution that occurs in volumes.</p>\n<p>When using volume filtering, the normal passed to the\nphotonmap function is ignored.\n<code>convex</code> :\nThe convex hull of all photons is used to estimate the\narea. This estimator will result in slightly \"sharper\"\nedges in the photon evaluation, and can be more accurate\nnear edges of primitives. However, since there are\nsharper edges, this estimator can produce very noisy\nevaluations.\n<code>direct</code> :\nThis filter should be used for photon maps that have been\nprefiltered (for example, for maps that have already been\nfiltered by the pcfilter utility).  It will cause the\nphoton energies to be averaged without area estimation.\nExample:</p>\n<div class=\"code-container\">\n<code class=\"line\">Cf = photonmap(map, P, normalize(frontface(N, I)),\n</code><code class=\"line\">\"nphotons\", 100,\n</code><code class=\"line\">\"type\", \"diffuse\",\n</code><code class=\"line\">\"error\", 0.05,\n</code><code class=\"line\">\"filter\", \"convex);\n</code>\n</div><div class=\"code-container\">\n<code class=\"line\">vector        clr;\n</code><code class=\"line\">float        area;\n</code><code class=\"line\">photonmap(map, P, normalize(frontface(N, I)), clr, area,\n</code><code class=\"line\">\"nphotons\", 100,\n</code><code class=\"line\">\"type\", \"diffuse\",\n</code><code class=\"line\">\"error\", 0.05,\n</code><code class=\"line\">\"filter\", \"convex);\n</code><code class=\"line\">Cf = clr;\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "mapname",
                    "P",
                    "N"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "mapname",
                    "P",
                    "N",
                    "clr",
                    "area"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "planeindex": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/planeindex\">planeindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the index of the plane specified by the parameter, starting\nat zero.</p><ul><li><code>int planeindex(string planename)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the index of the plane specified by the parameter, starting at\nzero.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "planename"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "planename": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/planename\">planename</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the name of the plane specified by the index (e.</p><ul><li><code>string planename(int planeindex)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the name of the plane specified by the index (e.g. \"C\", \"A\").</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "planeindex"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "planepointdistance": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/planepointdistance\">planepointdistance</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span></span><p class=\"summary\">Computes the distance and closest point of a point to an infinite plane.</p><ul><li><code>float planepointdistance(vector plane_pos, vector plane_normal, vector point_pos, vector &amp;intersect_pos)</code></li></ul>\n\n\n\n<p>Given a 3D point <code>point_pos</code>, and a 3D plane with <code>plane_normal</code> normal vector passing through a 3D point <code>plane_pos</code>, return the closest distance and closest position between the plane and the point.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "plane_pos",
                    "plane_normal",
                    "point_pos",
                    "intersect_pos"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "planesize": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/planesize\">planesize</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the number of components in the plane (1 for scalar planes\nand up to 4 for vector planes).</p><ul><li><code>int planesize(int planeindex)</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the number of components in the plane (1 for scalar planes and\nup to 4 for vector planes). Returns 0 if the index is out of range.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "planeindex"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "planesphereintersect": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/planesphereintersect\">planesphereintersect</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span></span><p class=\"summary\">Computes the intersection of a 3D sphere and an infinite 3D plane.</p><ul><li><code>int planesphereintersect(vector plane_pos, vector plane_normal, vector sphere_pos, float sphere_radius, vector &amp;intersect_pos, float &amp;intersect_radius, float &amp;intersect_distance)</code></li></ul>\n\n\n\n<p>Given a 3D sphere centered at <code>sphere_pos</code> with a <code>sphere_radius</code> radius, and a 3D plane with <code>plane_normal</code> normal vector passing through a 3D point <code>plane_pos</code>, return 1 if there is an intersection or 0 if there isn\u2019t.</p>\n<p>The intersection is most often a 2D circle on the intersecting plane centered at <code>intersect_pos</code> with a <code>intersect_radius</code> radius. It can also be a single point, in which case <code>intersect radius</code> is set to 0.\nThe distance between the <code>sphere_pos</code> and the <code>intersect_pos</code> is returned even when there is no intersection.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "plane_pos",
                    "plane_normal",
                    "sphere_pos",
                    "sphere_radius",
                    "intersect_pos",
                    "intersect_radius",
                    "intersect_distance"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float",
                    "vector",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pluralize": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pluralize\">pluralize</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Converts an English noun to its plural.</p><ul><li><code>string pluralize(string noun)</code></li></ul>\n\n\n\n<p>The English language is full of nonstandard rules for pluralizing nouns.  This function will properly create the plural ending for the input string.  Only the end of the input string is used.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">string boxes = pluralize(\"box\");\n</code><code class=\"line\">string women = pluralize(\"woman\");\n</code><code class=\"line\">string geometries = pluralize(\"geometry\");\n</code><code class=\"line\">\n</code><code class=\"line\">// Returns the string \"Pluralize the last words\"\n</code><code class=\"line\">string phrase = pluralize(\"Pluralize the last word\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "noun"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "pnoise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pnoise\">pnoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</p><ul><li><code>float pnoise(float x, int px)</code></li><li><code>float pnoise(float x, float y, int px, int py)</code></li><li><code>float pnoise(vector xyz, int px, int py, int pz)</code></li><li><code>float pnoise(vector pos, vector period)</code></li><li><code>float pnoise(vector4 xyzt, int px, int py, int pz, int pt)</code></li><li><code>float pnoise(vector4 xyzt, vector4 p)</code></li><li><code>vector pnoise(float x, int px)</code></li><li><code>vector pnoise(float x, float y, int px, int py)</code></li><li><code>vector pnoise(vector xyz, int px, int py, int pz)</code></li><li><code>vector pnoise(vector pos, vector period)</code></li><li><code>vector pnoise(vector4 xyzt, int px, int py, int pz, int pt)</code></li><li><code>vector pnoise(vector4 xyzt, vector4 p)</code></li></ul>\n\n\n\n<p>There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</p>\n<p>NOTE:\nThis function generates periodic noise. Use the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/noise\" title=\"There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.\">noise</a>\nfunction to generate non-periodic Perlin noise.</p>\n<p>The various functions return the noise value at a 4D (vector4 argument),\n3D (vector argument), 2D (two float arguments) or 1D (float argument)\nposition. You can get a random float value or a vector of three random\nvalues.</p>\n<p>The \"p\" int or vector arguments specify the range of periodicity. For\nexample, if you're making a 2D image and you want it to tile:</p>\n<div class=\"code-container\">\n<code class=\"line\">clr = pnoise(X * 4, Y * 5, _4, 5_)\n</code>\n</div>\n<p>In this example, X is in the range 0-4, Y is in the range 0-5, and the\nnoise is periodic within that segment.</p>\n<p>NOTE:\nIf a period argument is 0, VEX treats that as <em>no</em> periodicity. Use\nthis to make the noise periodic in one dimension but not another.</p>\n<p>The distribution of the noise depends on the dimension, with higher\ndimensions approaching a Gaussian distribution of noise values.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/noise\">noise</a><div class=\"related-summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x",
                    "y",
                    "px",
                    "py"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x",
                    "px"
                ],
                "args": [
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyzt",
                    "px",
                    "py",
                    "pz",
                    "pt"
                ],
                "args": [
                    "const vector4",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyzt",
                    "p"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyz",
                    "px",
                    "py",
                    "pz"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos",
                    "period"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x",
                    "y",
                    "px",
                    "py"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "x",
                    "px"
                ],
                "args": [
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyzt",
                    "px",
                    "py",
                    "pz",
                    "pt"
                ],
                "args": [
                    "const vector4",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyzt",
                    "p"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyz",
                    "px",
                    "py",
                    "pz"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "pos",
                    "period"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            }
        ]
    },
    "point": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/point\">point</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a point attribute value from a geometry.</p><ul><li><code>int point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>int point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>string point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>string point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>float point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>float point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>vector2 point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>vector2 point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>vector point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>vector point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>vector4 point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>vector4 point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>matrix2 point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>matrix2 point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>matrix3 point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>matrix3 point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>matrix point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>matrix point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>int[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>int[] point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>string[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>string[] point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>float[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>float[] point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>vector2[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>vector2[] point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>vector[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>vector[] point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>vector4[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>vector4[] point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>matrix2[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>matrix2[] point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>matrix3[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>matrix3[] point(string geometry, string attribute_name, int pointnumber)</code></li><li><code>matrix[] point(int opinput, string attribute_name, int pointnumber)</code></li><li><code>matrix[] point(string geometry, string attribute_name, int pointnumber)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if importing the attribute failed, the value of the attribute on success.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n<p>\n<code>pointnumber</code>\n\n<div class=\"content\">\n<p>The point number.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">vector        pos;\n</code><code class=\"line\">// Get the position of point 3 in \"defgeo.bgeo\"\n</code><code class=\"line\">pos = point(\"defgeo.bgeo\", \"P\", 3);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pointattrib\">pointattrib</a><div class=\"related-summary\">Imports a point attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setpointattrib\">setpointattrib</a><div class=\"related-summary\">Sets a point attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/haspointattrib\">haspointattrib</a><div class=\"related-summary\">Returns if a geometry point attribute exists.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pointattribsize\">pointattribsize</a><div class=\"related-summary\">Returns the size of a geometry point attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pointattribtype\">pointattribtype</a><div class=\"related-summary\">Returns the type of a geometry point attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pointattribtypeinfo\">pointattribtypeinfo</a><div class=\"related-summary\">Returns the type info of a geometry attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addpointattrib\">addpointattrib</a><div class=\"related-summary\">Adds an attribute to a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/attrib\">attrib</a><div class=\"related-summary\">Reads an attribute value from geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getattrib\">getattrib</a><div class=\"related-summary\">Reads an attribute value from geometry, with validity check.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertex\">vertex</a><div class=\"related-summary\">Imports a vertex attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/prim\">prim</a><div class=\"related-summary\">Imports a primitive attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detail\">detail</a><div class=\"related-summary\">Imports a detail attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "pointattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointattrib\">pointattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a point attribute value from a geometry.</p><ul><li><code>int pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>int pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>string pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>string pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>float pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>float pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector2 pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector2 pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector4 pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector4 pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix2 pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix2 pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix3 pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix3 pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>int[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>int[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>string[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>string[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>float[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>float[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector2[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector2[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector4[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>vector4[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix2[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix2[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix3[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix3[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix[] pointattrib(int opinput, string attribute_name, int pointnumber, int &amp;success)</code></li><li><code>matrix[] pointattrib(string geometry, string attribute_name, int pointnumber, int &amp;success)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if importing the attribute failed, the value of the attribute on success.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n<p><code>number</code>:\nThe point number.</p>\n<p><code>success</code>:\nSet to 1 if the import was successful, 0 if it failed due to no\nmatching attribute or invalid number.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/point\">point</a><div class=\"related-summary\">Imports a point attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "pointnumber",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "pointattribsize": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointattribsize\">pointattribsize</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the size of a geometry point attribute.</p><ul><li><code>int pointattribsize(int opinput, string attribute_name)</code></li><li><code>int pointattribsize(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Otherwise, it is the tuple size of the attribute.  A vector, for example, has size 3.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        size;\n</code><code class=\"line\">// Get the size of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">size = pointattribsize(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pointattribtype": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointattribtype\">pointattribtype</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type of a geometry point attribute.</p><ul><li><code>int pointattribtype(int opinput, string attribute_name)</code></li><li><code>int pointattribtype(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the attribute can\u2019t be found.</p>\n<p>Otherwise:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>-1</code>: Unknown or not found type.\n</li>\n<li class=\"bullet \">\n<code>0</code>: Integer type\n</li>\n<li class=\"bullet \">\n<code>1</code>: Float type\n</li>\n<li class=\"bullet \">\n<code>2</code>: String type\n</li>\n<li class=\"bullet \">\n<code>3</code>: Integer Array type\n</li>\n<li class=\"bullet \">\n<code>4</code>: Float Array type\n</li>\n<li class=\"bullet \">\n<code>5</code>: String Array type\n</li>\n</ul>\n<p>Note that vectors are considered float type!</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        type;\n</code><code class=\"line\">// Get the type of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">type = pointattribtype(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pointattribtypeinfo": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointattribtypeinfo\">pointattribtypeinfo</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type info of a geometry attribute.</p><ul><li><code>string pointattribtypeinfo(int opinput, string attribute_name)</code></li><li><code>string pointattribtypeinfo(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>\"\"</code> if the attribute can\u2019t be found.</p>\n<p>Otherwise:\n<code>none</code>:\nNo transformations should be applied.\n<code>point</code>:\nScales, rotations, and translations should be applied.\n<code>hpoint</code>:\nA four-vector with scales, rotations, and translations applied.\n<code>vector</code>:\nScales and rotations should be applied.\n<code>normal</code>:\nScales and rotations should be applied.  Scales are applied with inverse-transpose.\n<code>color</code>:\nNo transformations.\n<code>matrix</code>:\nA 4\u00d74 matrix with scale, rotations, and translations applied.\n<code>quaternion</code>:\nA four-vector with rotations applied.\n<code>indexpair</code>:\nNo transformations.\n<code>integer</code>:\nInteger values that do not blend when points are averaged.\n<code>integer-blend</code>:\nInteger values that blend when points are averaged.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>attribute_name</code>:\nThe name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "pointedge": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointedge\">pointedge</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds and returns a half-edge with the given endpoints.</p><ul><li><code>int pointedge(int opinput, int point1, int point2)</code></li><li><code>int pointedge(string geometry, int point1, int point2)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if no such half-edge exists. Otherwise returns the number of a half-edge that either has <code>point1</code> as source or has <code>point2</code> as desination, or the other way around.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>point1</code>, <code>point2</code>\nThe point numbers in the geometry for the two endpoints of the returned half-edge.  <code>0</code> is the first point.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int edge_count = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">// Determine if there is an edge between points 23 and 25:\n</code><code class=\"line\">int h0 = pointedge(\"defgeo.bgeo\", 23, 25);\n</code><code class=\"line\">if (h0 != -1)\n</code><code class=\"line\">{\n</code><code class=\"line\">// Edge exists!\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "point1",
                    "point2"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "point1",
                    "point2"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pointhedge": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointhedge\">pointhedge</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds and returns a half-edge with a given source point or with given source and destination points.</p><ul><li><code>int pointhedge(int opinput, int point)</code></li><li><code>int pointhedge(int opinput, int srcpoint, int dstpoint)</code></li><li><code>int pointhedge(string geometry, int point)</code></li><li><code>int pointhedge(string geometry, int srcpoint, int dstpoint)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if no such half-edge exists. Otherwise returns the number of a half-edge that has <code>point</code> as source or has <code>srcpoint</code> as source and <code>dstpoint</code> as destination. In the former case, using <code>op:pointhedgenext</code> one can enumerate over all the half-edges that have <code>point</code> as source.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>point</code>\nThe point number in the geometry for the source point of the returned half-edge.  <code>0</code> is the first point.</p>\n<p><code>srcpoint</code>, <code>dstpoint</code>:\nThe point numbers in the geometry for source and destination of returned half-edge.  <code>0</code> is the first point.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int edge_count = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">// Count number of *edges* (not half-edges) incident to point number 23.\n</code><code class=\"line\">int hout = pointhedge(\"defgeo.bgeo\", 23);\n</code><code class=\"line\">while ( hout != -1 )\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (hedge_isprimary(\"defgeo.bgeo\", hout))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0edge_count++;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int hin = hedge_prev(\"defgeo.bgeo\", hout);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (hedge_isprimary(\"defgeo.bgeo\", hin))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0edge_count++;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0hout = pointhedgenext(\"defgeo\", hout);\n</code><code class=\"line\">};\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "point"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "srcpoint",
                    "dstpoint"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "point"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "srcpoint",
                    "dstpoint"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pointhedgenext": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointhedgenext\">pointhedgenext</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the <strong>next</strong> half-edge with the same source as a given half-edge.</p><ul><li><code>int pointhedgenext(int opinput, int hedge)</code></li><li><code>int pointhedgenext(string geometry, int hedge)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>hedge</code> is invalid or the there are no more shared vertices with the source vertex of this hedge (same as <code>op:vertexnext</code>). Otherwise returns the next half-edge that has the same source as <code>hedge</code>. Successive calls to this function iterate over all outgoing half-edges out of the same point.</p>\n<p>NOTE:\nThe iteration order does not necessarily agree with the order of the edges around a point in a manifold setting.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>point</code>:\nThe point number in the geometry.  <code>0</code> is the first point.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int edge_count = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">// Count number of *edges* (not half-edges) incident to point number 23.\n</code><code class=\"line\">int hout = pointhedge(\"defgeo.bgeo\", 23);\n</code><code class=\"line\">while ( hout != -1 )\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (hedge_isprimary(\"defgeo.bgeo\", hout))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0edge_count++;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int hin = hedge_prev(\"defgeo.bgeo\", hout);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (hedge_isprimary(\"defgeo.bgeo\", hin))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0edge_count++;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0hout = pointhedgenext(\"defgeo\", hout);\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "hedge"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "hedge"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pointname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointname\">pointname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the point plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string pointname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the point plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"P\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "pointprims": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointprims\">pointprims</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the list of primitives containing a point.</p><ul><li><code>int[] pointprims(int opinput, int ptnum)</code></li><li><code>int[] pointprims(string geometry, int ptnum)</code></li></ul>\n\n\n\n<p>Returns an empty array if failed to find the point or there are no primitives owning it.</p>\n<p>This function returns an array of primitives that contain the given point.  The order should not be relied on, but will be consistent.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>ptnum</code>:\nThe point number to get a primitive from.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "ptnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "ptnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "pointvertex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointvertex\">pointvertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns a linear vertex number of a point in a geometry.</p><ul><li><code>int pointvertex(int opinput, int pointindex)</code></li><li><code>int pointvertex(string geometry, int pointindex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if no vertices share this point.  Otherwise returns\nthe linear vertex number of the first vertex to share this point.\n<code>vertexnext</code> can be used then to iterate over all shared vertices.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini,\nthis may be \"op:full_path_to_sop\" to reference a SOP.</p>\n<p><code>pointindex</code>:\nThe point number.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        vtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the linear vertex  of point 3\n</code><code class=\"line\">vtx = pointvertex(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "pointindex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "pointindex"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "pointvertices": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pointvertices\">pointvertices</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the list of vertices connected to a point.</p><ul><li><code>int[] pointvertices(int opinput, int ptnum)</code></li><li><code>int[] pointvertices(string geometry, int ptnum)</code></li></ul>\n\n\n\n<p>Returns an empty array if failed to find the point or there are no vertices wired to it.</p>\n<p>This function returns an array of vertices that are wired to the given point.  The order should not be relied on, but will be consistent.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>ptnum</code>\n\n<div class=\"content\">\n<p>The point number to get a vertex from.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "ptnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "ptnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "polardecomp": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/polardecomp\">polardecomp</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Computes the polar decomposition of a matrix.</p><ul><li><code>matrix3 polardecomp(matrix3 transform)</code></li></ul>\n\n\n\n<p>Computes the polar decomposition of a 3\u00d73 matrix.  This is the orthogonal\nmatrix that best matches the given transform.  This is very useful\nfor shape matching or blending of transforms.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "transform"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            }
        ]
    },
    "pop": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pop\">pop</a></h1><p class=\"summary\">Removes the last element of an array and returns it.</p><ul><li><code>int pop(int[] &amp;array)</code></li><li><code>int pop(int[] &amp;array, int index)</code></li><li><code>string pop(string[] &amp;array)</code></li><li><code>string pop(string[] &amp;array, int index)</code></li><li><code>float pop(float[] &amp;array)</code></li><li><code>float pop(float[] &amp;array, int index)</code></li><li><code>vector2 pop(vector2[] &amp;array)</code></li><li><code>vector2 pop(vector2[] &amp;array, int index)</code></li><li><code>vector pop(vector[] &amp;array)</code></li><li><code>vector pop(vector[] &amp;array, int index)</code></li><li><code>vector4 pop(vector4[] &amp;array)</code></li><li><code>vector4 pop(vector4[] &amp;array, int index)</code></li><li><code>matrix2 pop(matrix2[] &amp;array)</code></li><li><code>matrix2 pop(matrix2[] &amp;array, int index)</code></li><li><code>matrix3 pop(matrix3[] &amp;array)</code></li><li><code>matrix3 pop(matrix3[] &amp;array, int index)</code></li><li><code>matrix pop(matrix[] &amp;array)</code></li><li><code>matrix pop(matrix[] &amp;array, int index)</code></li><li><code>light pop(light[] &amp;array)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>light pop(light[] &amp;array, int index)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>material pop(material[] &amp;array)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>material pop(material[] &amp;array, int index)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf pop(bsdf[] &amp;array)</code></li><li><code>bsdf pop(bsdf[] &amp;array, int index)</code></li></ul>\n\n\n\n<p>Reduces the size of the array by 1.</p>\n<p>If the index is provided, it will be removed rather than the last value.\nA negative index value will count from the end of the array, so a value\nof -1 will remove the last value, -2 the penultimate, and so forth.</p>\n<p>This is equivalent to the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">type pop(arraytype a)\n</code><code class=\"line\">{\n</code><code class=\"line\">int     len = len(a);   // Find the array length\n</code><code class=\"line\">type    value = a[len-1];       // Extract the last component\n</code><code class=\"line\">resize(a, len-1);               // Resize the array\n</code><code class=\"line\">return value;                   // Return the value\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/append\">append()</a><div class=\"related-summary\">Adds an item to an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/len\">len()</a><div class=\"related-summary\">Returns the length of an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/push\">push()</a><div class=\"related-summary\">Adds an item to an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize()</a><div class=\"related-summary\">Sets the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export matrix2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export matrix3[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export matrix[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export bsdf[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "bsdf"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export light[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "light"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export material[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "material"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export bsdf[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "bsdf"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export light[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "light"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export material[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "material"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export float[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export vector4[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export string[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export vector2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "export vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export vector[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector"
            }
        ]
    },
    "pow": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/pow\">pow</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Raises the first argument to the power of the second argument.</p><ul><li><code>float pow(float value, float power)</code></li><li><code>vector2 pow(vector2 value, float power)</code></li><li><code>vector pow(vector value, float power)</code></li><li><code>vector4 pow(vector4 value, float power)</code></li></ul>\n\n\n\n<p>Raises the first argument to the power of the second argument.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value",
                    "power"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value",
                    "power"
                ],
                "args": [
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value",
                    "power"
                ],
                "args": [
                    "const vector2",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value",
                    "power"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "predicate_incircle": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/predicate_incircle\">predicate_incircle</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span></span><p class=\"summary\">Determines if a point is inside or outside a triangle circumcircle.</p><ul><li><code>float predicate_incircle(vector2 a, vector2 b, vector2 c, vector2 d)</code></li></ul>\n\n\n\n<p>Given 3 points <code>a</code>, <code>b</code>, and <code>c</code> on the plane, return a positive value if <code>d</code> is inside\nthe circumcircle of the triangle <code>abc</code>, a negative value if <code>d</code> is outside, and zero\nif <code>d</code> is exactly on the circumcircle.</p>\n<p>More precisely, this function computes the determinant of the matrix:</p>\n<div class=\"code-container\">\n[a_x a_y a^2 1; b_x b_y b^2 1; c_x c_y c^2 1; d_x d_y d^2 1]\n</div>\n<p>\u2026with a guaranteed\ncorrect sign, where <code>a^2</code>, <code>b^2</code>, <code>c^2</code>, and <code>d^2</code> are the squared lengths of the\nrespective input vectors.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "b",
                    "c",
                    "d"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "predicate_insphere": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/predicate_insphere\">predicate_insphere</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span></span><p class=\"summary\">Determines if a point is inside or outside a tetrahedron circumsphere.</p><ul><li><code>float predicate_insphere(vector a, vector b, vector c, vector d, vector e)</code></li></ul>\n\n\n\n<p>Given 4 points <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> in 3D space, return a positive value if <code>e</code> is inside\nthe circumsphere of the tetrahedron <code>abcd</code>, a negative value if <code>e</code> is outside, and zero\nif <code>e</code> lies exactly on the circumsphere.</p>\n<p>More precisely, this function computes the determinant of the matrix</p>\n<div class=\"code-container\">\n[a_x a_y a_z a^2 1; b_x b_y b_z b^2 1; c_x c_y c_z c^2 1; d_x d_y d_z d^2 1; e_x\ne_y e_z e^2 1]\n</div>\n<p>\u2026with a guaranteed\ncorrect sign, where <code>a^2</code>, <code>b^2</code>, <code>c^2</code>, <code>d^2</code> and <code>e^2</code> are the squared lengths of the\ncorresponding input vectors.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "b",
                    "c",
                    "d",
                    "e"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "predicate_orient2d": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/predicate_orient2d\">predicate_orient2d</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span></span><p class=\"summary\">Determines the orientation of a point with respect to a line.</p><ul><li><code>float predicate_orient2d(vector2 a, vector2 b, vector2 c)</code></li></ul>\n\n\n\n<p>Given 2 points <code>a</code> and <code>b</code> in the plane, return a positive value if <code>c</code> is on the left\nof the segment <code>(a,b)</code>, a negative value if it is on the right of the segment, and\nzero if <code>a</code>, <code>b</code> and <code>c</code> are colinear.</p>\n<p>More precisely, this function computes the determinant of the matrix:</p>\n<div class=\"code-container\">\n[a_x a_y 1; b_x b_y 1; c_x c_y 1]\n</div>\n<p>\u2026with a guaranteed correct sign.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "b",
                    "c"
                ],
                "args": [
                    "const vector2",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "predicate_orient3d": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/predicate_orient3d\">predicate_orient3d</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span></span><p class=\"summary\">Determines the orientation of a point with respect to a plane.</p><ul><li><code>float predicate_orient3d(vector a, vector b, vector c, vector d)</code></li></ul>\n\n\n\n<p>Given 3 points <code>a</code>, <code>b</code> and <code>c</code> in space, return a negative value if <code>d</code> is behind the\nplane defined by the triangle <code>abc</code> (with right hand rule winding order), a positive value if its in front of\nthe plane, and zero if points <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> are coplanar.</p>\n<p>More precisely, this function computes the determinant of the matrix:</p>\n<div class=\"code-container\">\n[a_x a_y a_z 1; b_x b_y b_z 1; c_x c_y c_z 1; d_x d_y d_z 1]\n</div>\n<p>\u2026with a guaranteed correct sign.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "b",
                    "c",
                    "d"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "prim": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/prim\">prim</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a primitive attribute value from a geometry.</p><ul><li><code>int prim(int opinput, string attribute_name, int prim)</code></li><li><code>int prim(string geometry, string attribute_name, int prim)</code></li><li><code>string prim(int opinput, string attribute_name, int prim)</code></li><li><code>string prim(string geometry, string attribute_name, int prim)</code></li><li><code>float prim(int opinput, string attribute_name, int prim)</code></li><li><code>float prim(string geometry, string attribute_name, int prim)</code></li><li><code>vector2 prim(int opinput, string attribute_name, int prim)</code></li><li><code>vector2 prim(string geometry, string attribute_name, int prim)</code></li><li><code>vector prim(int opinput, string attribute_name, int prim)</code></li><li><code>vector prim(string geometry, string attribute_name, int prim)</code></li><li><code>vector4 prim(int opinput, string attribute_name, int prim)</code></li><li><code>vector4 prim(string geometry, string attribute_name, int prim)</code></li><li><code>matrix2 prim(int opinput, string attribute_name, int prim)</code></li><li><code>matrix2 prim(string geometry, string attribute_name, int prim)</code></li><li><code>matrix3 prim(int opinput, string attribute_name, int prim)</code></li><li><code>matrix3 prim(string geometry, string attribute_name, int prim)</code></li><li><code>matrix prim(int opinput, string attribute_name, int prim)</code></li><li><code>matrix prim(string geometry, string attribute_name, int prim)</code></li><li><code>int[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>int[] prim(string geometry, string attribute_name, int prim)</code></li><li><code>string[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>string[] prim(string geometry, string attribute_name, int prim)</code></li><li><code>float[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>float[] prim(string geometry, string attribute_name, int prim)</code></li><li><code>vector2[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>vector2[] prim(string geometry, string attribute_name, int prim)</code></li><li><code>vector[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>vector[] prim(string geometry, string attribute_name, int prim)</code></li><li><code>vector4[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>vector4[] prim(string geometry, string attribute_name, int prim)</code></li><li><code>matrix2[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>matrix2[] prim(string geometry, string attribute_name, int prim)</code></li><li><code>matrix3[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>matrix3[] prim(string geometry, string attribute_name, int prim)</code></li><li><code>matrix[] prim(int opinput, string attribute_name, int prim)</code></li><li><code>matrix[] prim(string geometry, string attribute_name, int prim)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if importing the attribute failed, the value of the attribute on success.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">vector        clr;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the value of the \"Cd\" attribute for primitive 7\n</code><code class=\"line\">// in the SOP specified by the path \"/obj/geo1/color1\" (Houdini\n</code><code class=\"line\">// only)\n</code><code class=\"line\">clr = prim(\"op:/obj/geo1/color1\", \"Cd\", 7);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/primattrib\">primattrib</a><div class=\"related-summary\">Imports a primitive attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setprimattrib\">setprimattrib</a><div class=\"related-summary\">Sets a primitive attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hasprimattrib\">hasprimattrib</a><div class=\"related-summary\">Returns if a geometry prim attribute exists.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/primattribsize\">primattribsize</a><div class=\"related-summary\">Returns the size of a geometry prim attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/primattribtype\">primattribtype</a><div class=\"related-summary\">Returns the type of a geometry prim attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/primattribtypeinfo\">primattribtypeinfo</a><div class=\"related-summary\">Returns the type info of a geometry attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addprimattrib\">addprimattrib</a><div class=\"related-summary\">Adds an attribute to a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/attrib\">attrib</a><div class=\"related-summary\">Reads an attribute value from geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getattrib\">getattrib</a><div class=\"related-summary\">Reads an attribute value from geometry, with validity check.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/point\">point</a><div class=\"related-summary\">Imports a point attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertex\">vertex</a><div class=\"related-summary\">Imports a vertex attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detail\">detail</a><div class=\"related-summary\">Imports a detail attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "prim_attribute": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/prim_attribute\">prim_attribute</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Copies the value of a primitive attribute at a certain parametric (u, v) position into a variable.</p><ul><li><code>int prim_attribute(string filename, int &amp;adata, string att, int pn, float u, float v)</code></li><li><code>int prim_attribute(string filename, int &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, float &amp;adata, string att, int pn, float u, float v)</code></li><li><code>int prim_attribute(string filename, float &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, vector2 &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, vector &amp;adata, string att, int pn, float u, float v)</code></li><li><code>int prim_attribute(string filename, vector &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, vector4 &amp;adata, string att, int pn, float u, float v)</code></li><li><code>int prim_attribute(string filename, vector4 &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, matrix2 &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, matrix3 &amp;adata, string att, int pn, float u, float v)</code></li><li><code>int prim_attribute(string filename, matrix3 &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, matrix &amp;adata, string att, int pn, float u, float v)</code></li><li><code>int prim_attribute(string filename, matrix &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, int[] &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string path, float[] &amp;value, string attribute, int prim_number, float u, float v)</code></li><li><code>int prim_attribute(string filename, float[] &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, vector2[] &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, vector[] &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, vector4[] &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, matrix2[] &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, matrix3[] &amp;adata, string att, int pn, vector uv)</code></li><li><code>int prim_attribute(string filename, matrix[] &amp;adata, string att, int pn, vector uv)</code></li></ul>\n\n\n\n<p>Evaluates the attribute string <code>att</code> for primitive <code>pn</code> at the\nparametric location <code>u</code>, <code>v</code>. The result is stored in <code>adata</code>,\nwhich can be one of several different forms. In either case, if the\nattribute data is of a smaller size than <code>adata</code> an error of 0 is\nreturned. For example if attribute <code>\"Cd\"</code> is a vector, <code>adata</code> cannot\nbe a matrix or any another structure which can store more than 3 values.</p>\n<p>Returns <code>1</code> for successful completion, or <code>0</code> for an error.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "matrix2",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "matrix3",
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "matrix3",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "matrix",
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "matrix",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "float",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "int",
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "vector4",
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "vector4",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "vector2",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "vector",
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "vector",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "matrix2[]",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "matrix3[]",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "matrix[]",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "path",
                    "value",
                    "attribute",
                    "prim_number",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float[]",
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "float[]",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "int[]",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "vector4[]",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "vector2[]",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "adata",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "vector[]",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "prim_normal": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/prim_normal\">prim_normal</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the normal of the primitive (prim_number) at parametric location u, v.</p><ul><li><code>vector prim_normal(int input, int prim_number, float u, float v)</code></li><li><code>vector prim_normal(int input, int prim_number, float u, float v, float w)</code></li><li><code>vector prim_normal(int input, int prim_number, vector uvw)</code></li><li><code>vector prim_normal(string filename, int prim_number, float u, float v)</code></li><li><code>vector prim_normal(string filename, int prim_number, float u, float v, float w)</code></li><li><code>vector prim_normal(string filename, int prim_number, vector uvw)</code></li></ul>\n\n\n\n<p>Returns the normal of the primitive (prim_number) at parametric location\n<code>u</code>, <code>v</code>, <code>w</code>.  When <code>w</code> is not given, it is treated as zero.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "prim_number",
                    "u",
                    "v"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "prim_number",
                    "u",
                    "v",
                    "w"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "prim_number",
                    "uvw"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "prim_number",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "prim_number",
                    "u",
                    "v",
                    "w"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "prim_number",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "primarclen": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primarclen\">primarclen</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Evaluates an the length of an arc on curves using parametric uv coordinates.</p><ul><li><code>float primarclen(string filename, vector2 uv0, vector2 uv1, int pn)</code></li></ul>\n\n\n\n<p>Evaluates the arclen or curve length for primitive <code>pn</code> from the parametric location <code>uv0</code> to parametric location &lt;uv1&gt;. The arclength primitive intrinsic attribute can also be queried to get the whole curve length.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "pn"
                ],
                "args": [
                    "const string",
                    "const vector2",
                    "const vector2",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "primattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primattrib\">primattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a primitive attribute value from a geometry.</p><ul><li><code>int primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>int primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>string primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>string primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>float primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>float primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector2 primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector2 primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector4 primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector4 primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix2 primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix2 primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix3 primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix3 primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>int[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>int[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>string[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>string[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>float[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>float[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector2[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector2[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector4[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>vector4[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix2[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix2[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix3[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix3[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix[] primattrib(int opinput, string attribute_name, int prim, int &amp;success)</code></li><li><code>matrix[] primattrib(string geometry, string attribute_name, int prim, int &amp;success)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if importing the attribute failed, the value of the attribute on success.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>success</code>\n\n<div class=\"content\">\n<p>Set to 1 if the import was successful, 0 if it failed due to no\n    matching attribute or invalid number.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/prim\">prim</a><div class=\"related-summary\">Imports a primitive attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "primattribsize": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primattribsize\">primattribsize</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the size of a geometry prim attribute.</p><ul><li><code>int primattribsize(int opinput, string attribute_name)</code></li><li><code>int primattribsize(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Otherwise, it is the tuple size of the attribute.  A vector, for example, has size 3.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        size;\n</code><code class=\"line\">// Get the size of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">size = primattribsize(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "primattribtype": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primattribtype\">primattribtype</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type of a geometry prim attribute.</p><ul><li><code>int primattribtype(int opinput, string attribute_name)</code></li><li><code>int primattribtype(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the attribute can\u2019t be found.</p>\n<p>Otherwise:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>-1</code>: Unknown or not found type.\n</li>\n<li class=\"bullet \">\n<code>0</code>: Integer type\n</li>\n<li class=\"bullet \">\n<code>1</code>: Float type\n</li>\n<li class=\"bullet \">\n<code>2</code>: String type\n</li>\n<li class=\"bullet \">\n<code>3</code>: Integer Array type\n</li>\n<li class=\"bullet \">\n<code>4</code>: Float Array type\n</li>\n<li class=\"bullet \">\n<code>5</code>: String Array type\n</li>\n</ul>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>Vectors are considered float type.</p>\n</div>\n</div>\n</div>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        type;\n</code><code class=\"line\">// Get the type of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">type = primattribtype(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "primattribtypeinfo": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primattribtypeinfo\">primattribtypeinfo</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type info of a geometry attribute.</p><ul><li><code>string primattribtypeinfo(int opinput, string attribute_name)</code></li><li><code>string primattribtypeinfo(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>\"\"</code> if the attribute can\u2019t be found.</p>\n\n<p>\nOtherwise:\n<code>none</code>\n\n<div class=\"content\">\n<p>No transformations should be applied.</p>\n</div>\n</p>\n<p>\n<code>point</code>\n\n<div class=\"content\">\n<p>Scales, rotations, and translations should be applied.</p>\n</div>\n</p>\n<p>\n<code>hpoint</code>\n\n<div class=\"content\">\n<p>A four-vector with scales, rotations, and translations applied.</p>\n</div>\n</p>\n<p>\n<code>vector</code>\n\n<div class=\"content\">\n<p>Scales and rotations should be applied.</p>\n</div>\n</p>\n<p>\n<code>normal</code>\n\n<div class=\"content\">\n<p>Scales and rotations should be applied.  Scales are applied with inverse-transpose.</p>\n</div>\n</p>\n<p>\n<code>color</code>\n\n<div class=\"content\">\n<p>No transformations.</p>\n</div>\n</p>\n<p>\n<code>matrix</code>\n\n<div class=\"content\">\n<p>A 4\u00d74 matrix with scale, rotations, and translations applied.</p>\n</div>\n</p>\n<p>\n<code>quaternion</code>\n\n<div class=\"content\">\n<p>A four-vector with rotations applied.</p>\n</div>\n</p>\n<p>\n<code>indexpair</code>\n\n<div class=\"content\">\n<p>No transformations.</p>\n</div>\n</p>\n<p>\n<code>integer</code>\n\n<div class=\"content\">\n<p>Integer values that do not blend when points are averaged.</p>\n</div>\n</p>\n<p>\n<code>integer-blend</code>\n\n<div class=\"content\">\n<p>Integer values that blend when points are averaged.</p>\n</div>\n</p>\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "primduv": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primduv\">primduv</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Evaluates position derivative on a primitive at a certain parametric (u, v) position into a variable.</p><ul><li><code>vector primduv(string filename, int pn, vector2 uv, int du, int dv)</code></li></ul>\n\n\n\n<p>Evaluates the <code>du</code> and <code>dv</code> derivative for primitive <code>pn</code> at the parametric location <code>uv</code>.</p>\n<p><code>du</code> and <code>dv</code> represents the derivative order to query.\nOn a curve, the curve direction is given by <code>du==1</code>.\nOn a curve, the curve curvature is given by <code>du==2</code>.</p>\n<p>This only works on Nurbs and Bezier curve primitives.</p>\n<p><code>du</code> is currently ignored as it is meant to work with parametric surfaces.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "pn",
                    "uv",
                    "du",
                    "dv"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector2",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "vector"
            }
        ]
    },
    "primfind": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primfind\">primfind</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns a list of primitives potentially intersecting a given bounding box.</p><ul><li><code>int[] primfind(int opinput, string group, vector min, vector max)</code></li><li><code>int[] primfind(int opinput, vector min, vector max)</code></li><li><code>int[] primfind(string geometry, string group, vector min, vector max)</code></li><li><code>int[] primfind(string geometry, vector min, vector max)</code></li></ul>\n\n\n\n<p>Find all the primitives that may possibly overlap the given bounding box.</p>\n<p>More precisely, these functions return the primitive numbers of primitives whose\nbounding box intersects the given bounding box.  Parameters <code>min</code> and <code>max</code> define the\nlimits of the given bounding box.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>These functions are intended to be used as an optimization to finding primitives\n    in a particular area for processing.  For instance, to find all the curves\n    from one input intersecting polygons on another input, we may naively iterate\n    over all polygons for each curve to determine their intersection.  To speed this\n    process, we may find which primitives may intersect a particular curve using\n    these functions, and iterate solely over the potentially intersecting\n    primitives.  This significantly improves performance since <code>primfind</code> uses an\n    underlying tree structure to speed up search.</p>\n</div>\n</div>\n</div>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>min</code>\n\n<div class=\"content\">\n<p>Minimum coordinates of the query bounding box.</p>\n</div>\n</p>\n<p>\n<code>max</code>\n\n<div class=\"content\">\n<p>Maximum coordinates of the query bounding box.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Remove primitives that may be intersecting the unit box centered at the origin:</p>\n<div class=\"code-container\">\n<code class=\"line\">int prims[] = primfind(geometry, {-0.5, -0.5, -0.5}, {0.5, 0.5, 0.5});\n</code><code class=\"line\">foreach ( int prim; prims )\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0removeprim(\"primitives.bgeo\", prim, 1);\n</code><code class=\"line\">}\n</code>\n</div>\n<p>Alternatively, we can use a query bounding box from an auxiliary source:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector min, max;\n</code><code class=\"line\">getbbox(\"bbox.bgeo\", min, max);\n</code><code class=\"line\">int prims[] = primfind(geometry, min, max);\n</code><code class=\"line\">foreach ( int prim; prims )\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0removeprim(\"primitives.bgeo\", prim, 1);\n</code><code class=\"line\">}\n</code>\n</div>\n<p>To see the performance benefit of <code>primfind</code>, compare it to the following equivalent\nimplementation of the function above:</p>\n<div class=\"code-container\">\n$!vex\nfloat tol = 1e-5;\nvector min, max;\ngetbbox(\"bbox.bgeo\",min,max);\nint n = nprimitives(0);\nfor ( int prim = 0; prim &lt; n; ++prim )\n{\n    int verts[] = primvertices(\"primitives.bgeo\", prim);\n\n    // compute primitive bounding box and store it in prim_min and prim_max\n    vector vert_pos = point(\"primitives.bgeo\", \"P\", vertexpoint(\"primitives.bgeo\", verts[0]));\n    vector prim_min = vert_pos, prim_max = vert_pos;\n    for ( int v = 1; v &lt; len(verts); ++v )\n    {\n        vert_pos = point(\"primitives.bgeo\", \"P\", vertexpoint(\"primitives.bgeo\", verts[v]));\n        prim_min = min(prim_min, vert_pos);\n        prim_max = max(prim_max, vert_pos);\n    }\n\n    // bounding box intersection test\n    if ( prim_max.x - min.x &lt; -tol ) continue;\n    if ( prim_max.y - min.y &lt; -tol ) continue;\n    if ( prim_max.z - min.z &lt; -tol ) continue;\n    if ( prim_min.x - max.x &gt; tol ) continue;\n    if ( prim_min.y - max.y &gt; tol ) continue;\n    if ( prim_min.z - max.z &gt; tol ) continue;\n    removeprim(\"primitives.bgeo\", prim, 1);\n}\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getbbox\">getbbox()</a><div class=\"related-summary\">Sets two vectors to the minimum and maximum corners of the bounding box for the geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pcfind\">pcfind()</a><div class=\"related-summary\">Returns a list of closest points from a file.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "group",
                    "min",
                    "max"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "min",
                    "max"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "group",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "primhedge": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primhedge\">primhedge</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns <strong>one</strong> of the half-edges contained in a primitive.</p><ul><li><code>int primhedge(int opinput, int prim)</code></li><li><code>int primhedge(string geometry, int prim)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if <code>prim</code> is invalid. Otherwise returns the number of an arbitrary half-edge that contained in <code>prim</code>.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>prim</code>:\nThe primitive number in the geometry.  <code>0</code> is the first primitive.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "primintrinsic": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primintrinsic\">primintrinsic</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a primitive intrinsic from a geometry.</p><ul><li><code>int primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>int primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>string primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>string primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>float primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>float primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>vector2 primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>vector2 primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>vector primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>vector primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>vector4 primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>vector4 primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>matrix2 primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>matrix2 primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>matrix3 primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>matrix3 primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>matrix primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>matrix primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>int[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>int[] primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>string[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>string[] primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>float[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>float[] primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>vector2[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>vector2[] primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>vector[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>vector[] primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>vector4[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>vector4[] primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>matrix2[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>matrix2[] primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>matrix3[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>matrix3[] primintrinsic(string geometry, string intrinsic, int prim)</code></li><li><code>matrix[] primintrinsic(int opinput, string intrinsic, int prim)</code></li><li><code>matrix[] primintrinsic(string geometry, string intrinsic, int prim)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if reading the intrinsic failed, or the value of the intrinsic if reading it succeeded.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>opinput</code>:\nThe number of the input to reference.  The first input is number <code>0</code>, the second is <code>1</code>, etc.</p>\n<p><code>intrinsic</code>:\nThe name of the intrinsic (e.g. <code>transform</code>, <code>closed</code>, or <code>typeid</code>).</p>\n<p><code>prim</code>:\nThe primitive number.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "intrinsic",
                    "prim"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "primpoint": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primpoint\">primpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Converts a primitive/vertex pair into a point number.</p><ul><li><code>int primpoint(int opinput, int primnum, int vertex)</code></li><li><code>int primpoint(string geometry, int primnum, int vertex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if failed to find the corresponding point.</p>\n<p>This function looks at the vertexth vertex on the given primitive.\n0 for vertex means the first vertex on the primitive.  It returns the\npoint number that that vertex is wired to.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>primnum</code>:\nThe primitive number to get a vertex from.</p>\n<p><code>vertex</code>:\nThe vertex number inside of a primitive.  0 is the first vertex.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primnum",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "primnum",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "primpoints": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primpoints\">primpoints</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the list of points on a primitive.</p><ul><li><code>int[] primpoints(int opinput, int primnum)</code></li><li><code>int[] primpoints(string geometry, int primnum)</code></li></ul>\n\n\n\n<p>Returns an empty array if failed to find the primitive.</p>\n<p>This function returns an array of points, in the same order as stored on the primitive itself.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>primnum</code>\n\n<div class=\"content\">\n<p>The primitive number to get the points of.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "primnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "primuv": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primuv\">primuv</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Evaluates an attribute on a primitive at a certain parametric (u, v) position into a variable.</p><ul><li><code>int primuv(int input, string att, int pn, vector uv)</code></li><li><code>int primuv(string filename, string att, int pn, vector uv)</code></li><li><code>float primuv(int input, string att, int pn, vector uv)</code></li><li><code>float primuv(string filename, string att, int pn, vector uv)</code></li><li><code>vector2 primuv(int input, string att, int pn, vector uv)</code></li><li><code>vector2 primuv(string filename, string att, int pn, vector uv)</code></li><li><code>vector primuv(int input, string att, int pn, vector uv)</code></li><li><code>vector primuv(string filename, string att, int pn, vector uv)</code></li><li><code>vector4 primuv(int input, string att, int pn, vector uv)</code></li><li><code>vector4 primuv(string filename, string att, int pn, vector uv)</code></li><li><code>matrix2 primuv(int input, string att, int pn, vector uv)</code></li><li><code>matrix2 primuv(string filename, string att, int pn, vector uv)</code></li><li><code>matrix3 primuv(int input, string att, int pn, vector uv)</code></li><li><code>matrix3 primuv(string filename, string att, int pn, vector uv)</code></li><li><code>matrix primuv(int input, string att, int pn, vector uv)</code></li><li><code>matrix primuv(string filename, string att, int pn, vector uv)</code></li><li><code>int[] primuv(int input, string att, int pn, vector uv)</code></li><li><code>int[] primuv(string filename, string att, int pn, vector uv)</code></li><li><code>float[] primuv(int input, string att, int pn, vector uv)</code></li><li><code>float[] primuv(string filename, string att, int pn, vector uv)</code></li><li><code>vector2[] primuv(int input, string att, int pn, vector uv)</code></li><li><code>vector2[] primuv(string filename, string att, int pn, vector uv)</code></li><li><code>vector[] primuv(int input, string att, int pn, vector uv)</code></li><li><code>vector[] primuv(string filename, string att, int pn, vector uv)</code></li><li><code>vector4[] primuv(int input, string att, int pn, vector uv)</code></li><li><code>vector4[] primuv(string filename, string att, int pn, vector uv)</code></li><li><code>matrix2[] primuv(int input, string att, int pn, vector uv)</code></li><li><code>matrix2[] primuv(string filename, string att, int pn, vector uv)</code></li><li><code>matrix3[] primuv(int input, string att, int pn, vector uv)</code></li><li><code>matrix3[] primuv(string filename, string att, int pn, vector uv)</code></li><li><code>matrix[] primuv(int input, string att, int pn, vector uv)</code></li><li><code>matrix[] primuv(string filename, string att, int pn, vector uv)</code></li></ul>\n\n\n\n<p>Evaluates the attribute <code>att</code> for primitive <code>pn</code> at the parametric location <code>u</code>, <code>v</code>.</p>\n<p>The attribute can be a primitive, vertex, or point attribute.  In the latter cases the value is interpolated according to the u and v values.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "pn",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector[]"
            }
        ]
    },
    "primuvconvert": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primuvconvert\">primuvconvert</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Convert parametric UV locations on curve primitives.</p><ul><li><code>vector2 primuvconvert(string filename, vector2 uv, int pn, int mode)</code></li></ul>\n\n\n\n<p>Converts a parametric location <code>uv</code> from one space to another on primitive <code>pn</code> using a <code>mode</code>.</p>\n<p>REAL domain is based on the number of curve segments. (0 to <code>nSegments</code>)\nA segment can hold multiple control points based on the curve degree.\nUNIT domain is the REAL domain normalized to fit in 0 to 1.\nUNITLEN domain maps the curve based on its length but normalized. (0..1)\nLEN domain maps the curve based on its length. (0..<code>CurveLength</code>)</p>\n<p>The specifications for the <code>mode</code> can be found in: <code>$HFS/houdini/vex/include/math.h</code>.</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "uv",
                    "pn",
                    "mode"
                ],
                "args": [
                    "const string",
                    "const vector2",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            }
        ]
    },
    "primvertex": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primvertex\">primvertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Converts a primitive/vertex pair into a linear vertex.</p><ul><li><code>int primvertex(int opinput, int primnum, int vertex)</code></li><li><code>int primvertex(string geometry, int primnum, int vertex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if failed to find the corresponding linear vertex.</p>\n<p>This function looks at the vertexth vertex on the given primitive.\n0 for vertex means the first vertex on the primitive.  It returns the\nlinear vertex number that is unique over the whole geometry and\ncan be used by other vex functions.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>primnum</code>\n\n<div class=\"content\">\n<p>The primitive number to get a vertex from.</p>\n</div>\n</p>\n<p>\n<code>vertex</code>\n\n<div class=\"content\">\n<p>The vertex number inside of a primitive.  0 is the first vertex.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int linearvtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the linear vertex value of vertex 2 of primitive 3.\n</code><code class=\"line\">linearvtx = primvertex(\"defgeo.bgeo\", 3, 2);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primnum",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "primnum",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "primvertexcount": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primvertexcount\">primvertexcount</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns number of vertices in a primitive in a geometry.</p><ul><li><code>int primvertexcount(int opinput, int primindex)</code></li><li><code>int primvertexcount(string geometry, int primindex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the primitive does not exist.  Otherwise returns the number of\nvertices in the primitive.</p>\n<p><code>vertexindex</code> can be used to iterate over the linear vertices of the\nprimitive.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>primindex</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        nvtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the number of vertices of primitive 3\n</code><code class=\"line\">nvtx = primvertexcount(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primindex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "primindex"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "primvertices": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/primvertices\">primvertices</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the list of vertices on a primitive.</p><ul><li><code>int[] primvertices(int opinput, int primnum)</code></li><li><code>int[] primvertices(string geometry, int primnum)</code></li></ul>\n\n\n\n<p>Returns an empty array if failed to find the primitive.</p>\n<p>This function returns an array of vertices, in the same order as stored on the primitive itself.  The result are linear vertex numbers.</p>\n<p><code>geometry</code>:\nThe name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n<p><code>primnum</code>:\nThe primitive number to get a vertex from.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "primnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            }
        ]
    },
    "print_once": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/print_once\">print_once</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Prints string arguments exactly one time.</p><ul><li><code>void print_once(string msg, ...)</code></li></ul>\n\n\n\n<p>Prints the string passed to the function exactly one time.  If different\nstrings are passed to the function, each string will only be printed one time.</p>\n<p>You can specify keyword argument pairs to control the behavior of this function.</p>\n<p>\"global\":\nAn integer (either 0 or 1).  Normally, multiple calls to the <code>print_once()</code>\nfunction will work independently of each other.  That is, if two separate\ncalls to <code>print_once()</code> are passed the same string, the string will be\nprinted twice (once per call).  With the \"global\" flag turned on, strings\nare checked across all instances of the <code>print_once()</code> functions.</p>\n<p>Examples:</p>\n<div class=\"code-container\">\n<code class=\"line\">// Only print \"Hello world\" one time\n</code><code class=\"line\">for (int i = 0; i &lt; 100; ++i)\n</code><code class=\"line\">print_once(\"Hello world\\n\");\n</code><code class=\"line\">\n</code><code class=\"line\">// Print a missing texture warning, just one time across all shaders\n</code><code class=\"line\">print_once( sprintf(\"Missing texture map: %s\\n\", texture_map), \"global\", 1);\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "msg"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "void",
                "variadic": true
            }
        ]
    },
    "printf": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/printf\">printf</a></h1><span><span class=\"padder\"><span class=\"pillow\">string</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Prints values to the console which started the VEX program.</p><ul><li><code>void printf(string format, ...)</code></li></ul>\n\n\n\n<p>Prints values to the console which started the VEX program.</p>\n<p>The format string is a simpler version of the C <code>printf</code> format string.\nWhen a <code>%</code> symbol is found in the string, an argument will be printed\nout in a format specified by the characters following the <code>%</code> symbol.\nThe conversion of the argument is specified by a single letter: <code>g</code>, <code>f</code>,\n<code>s</code>, <code>d</code>, <code>x</code>, <code>c</code>, <code>p</code>.</p>\n<p>You can prefix the format option with an optional prefix characters to control\nthe formatting of the output.  The general form of a prefix is\n<code>[flags][width][.precision][format]</code>, where Flags can be</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>-</code>: The result will be left justified in the field\n</li>\n<li class=\"bullet \">\n<code>+</code>: A numeric value will be prefixed with either <code>+</code> for positive\nvalues.  A non-standard behavior of this flag is that string\narguments will be quoted when the <code>+</code> flag is set.\n</li>\n<li class=\"bullet \">\n<code>0</code>: For numeric values, leading zeros are used to pad the field.\n</li>\n</ul>\n\n<p>\nWidth\n        \n<div class=\"content\">\n<p>The width can be specified by one or more decimal digits.  Alternately, if\n    an asterisk (<code>*</code>) is given, the width will be taken from the next value\n    in the <code>printf</code> argument list.</p>\n</div>\n</p>\n<p>\nPrecision\n        \n<div class=\"content\">\n<p>The precision can be specified by one or more decimal digits.  Alternately,\n    if an asterisk (<code>*</code>) is given, the width will be taken from the next value\n    in the <code>printf</code> argument list.</p>\n</div>\n</p>\n\n<p>The different format characters supported are</p>\n\n<p>\n<code>%g</code>, <code>%p</code>, <code>%c</code>\n\n<div class=\"content\">\n<p>Print an integer float, vector, vector4, matrix3, matrix or string\n    in \"general\" form.</p>\n</div>\n</p>\n<p>\n<code>%f</code>, <code>%e</code>, <code>%E</code>\n\n<div class=\"content\">\n<p>Print a float, vector, vector4, matrix3 or matrix in floating point\n    form.</p>\n</div>\n</p>\n<p>\n<code>%s</code>\n\n<div class=\"content\">\n<p>Print a string.</p>\n</div>\n</p>\n<p>\n<code>%d</code>, <code>%i</code>\n\n<div class=\"content\">\n<p>Print an integer variable in decimal.</p>\n</div>\n</p>\n<p>\n<code>%x</code>, <code>%X</code>\n\n<div class=\"content\">\n<p>Print an integer variable in hexidecimal.  The value will be prefixed with\n    \"0x\" (i.e. 0\u00d742).</p>\n</div>\n</p>\n<p>\n<code>%o</code>\n\n<div class=\"content\">\n<p>Print an integer variable in octal.</p>\n</div>\n</p>\n<p>\n<code>%%</code>\n\n<div class=\"content\">\n<p>Print a percent sign (%).</p>\n</div>\n</p>\n\n<p>Examples:</p>\n<div class=\"code-container\">\n<code class=\"line\">printf(\"P = %g, dot(N, P) = %g, %d = %x\\n\", P, dot(N, P), ptnum, ptnum);\n</code><code class=\"line\">printf(\"RGB = {%g,%g,%g}\\n\", clr.r, clr.g, clr.b);\n</code><code class=\"line\">printf(\"P = %20s\\n\", \"20 chars\");\n</code><code class=\"line\">printf(\"%-+20s\\n\", \"Left justified and quoted\");\n</code><code class=\"line\">printf(\"%+08.3g\\n\", velocity);\n</code><code class=\"line\">printf(\"%*.*g\\n\", width, precision, value);\n</code><code class=\"line\">Cf = texture(sprintf(\"/maps/map%d.rat\", i));\n</code><code class=\"line\">Cf = texture(sprintf(\"/maps/map%04d.rat\", i));\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "format"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true
            }
        ]
    },
    "product": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/product\">product</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the product of the vector\u2019s components.</p><ul><li><code>int product(int v)</code></li><li><code>int product(int[] v)</code></li><li><code>float product(float v)</code></li><li><code>float product(vector2 v)</code></li><li><code>float product(vector v)</code></li><li><code>float product(vector4 v)</code></li><li><code>float product(float[] v)</code></li><li><code>vector2 product(vector2[] v)</code></li><li><code>vector product(vector[] v)</code></li><li><code>vector4 product(vector4[] v)</code></li></ul>\n\n\n\n<p>Returns the product of the vector\u2019s 2 components.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float product(vector v)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the product of the vector\u2019s 3 components.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float product(vector4 v)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the product of the vector\u2019s 4 components.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">type product(type[] arr)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the product of the elements of the array.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "ptexture": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ptexture\">ptexture</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Computes a filtered sample from a ptex texture map.</p><ul><li><code>float ptexture(string map, int face_id, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>float ptexture(string map, int face_id, float s, float t, ...)</code></li><li><code>vector ptexture(string map, int face_id, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector ptexture(string map, int face_id, float s, float t, ...)</code></li><li><code>vector4 ptexture(string map, int face_id, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector4 ptexture(string map, int face_id, float s, float t, ...)</code></li><li><code>matrix3 ptexture(string map, int face_id, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>matrix3 ptexture(string map, int face_id, float s, float t, ...)</code></li><li><code>matrix ptexture(string map, int face_id, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>matrix ptexture(string map, int face_id, float s, float t, ...)</code></li></ul>\n\n\n\n<p>This function is deprecated since ptex support has been integrated into the <code>texture()</code> function.</p>\n\n<h2 class=\"label heading\" id=\"optional-arguments\">\n            \n            Optional arguments\n        </h2>\n<div class=\"content\" id=\"optional-arguments-body\">\n\n<tr>\n</tr>\n<th>\n     Keyword\n    \n</th>\n<th>\n     Values\n    \n</th>\n<tr>\n</tr>\n<td>\n</td>\n<p><code>channel</code>\ntd&gt;&gt;\nAn integer value indicating which channel of the ptex image to use.</p>\n<tr>\n</tr>\n<td>\n</td>\n<p><code>filter</code>\ntd&gt;&gt;\nThe texture filter to use when filtering the texture.  Choices for the filter are:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>point</code>: Point Filter (no filtering)\n</li>\n<li class=\"bullet \">\n<code>bilinear</code>:  Bilinear Texture Filter\n</li>\n<li class=\"bullet \">\n<code>box</code>:  Box Texture Filter\n</li>\n<li class=\"bullet \">\n<code>gaussian</code>:  Gaussian Texture Filter (default)\n</li>\n<li class=\"bullet \">\n<code>bicubic</code>:  Bicubic Texture Filter\n</li>\n<li class=\"bullet \">\n<code>catmullrom</code>:  Catmull-Rom Texture Filter\n</li>\n<li class=\"bullet \">\n<code>mitchell</code>:  Mitchell Texture Filter\ntr&gt;&gt;\ntd&gt;&gt;\n<code>filtersharp</code>\ntd&gt;&gt;\nA floating point value indicating the filter sharpness.  This is only valid for the bicubic filter.  The range is 0-1 (the default is 1.0).\ntr&gt;&gt;\ntd&gt;&gt;\n<code>lerp</code>\ntd&gt;&gt;\nAn boolean value indicating whether to interpolate between Mip maps.  The default is true.\ntr&gt;&gt;\ntd&gt;&gt;\n<code>blur</code>\ntd&gt;&gt;\nThe texture blur value used for evaluation (default 0).\ntr&gt;&gt;\ntd&gt;&gt;\n<code>width</code>\ntd&gt;&gt;\nThe texture width value used for evaluation (default 1).\n</li>\n</ul>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/texture\">texture()</a><div class=\"related-summary\">Computes a filtered sample of the texture map specified.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "map",
                    "face_id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "matrix3",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id",
                    "s",
                    "t"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "matrix",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id",
                    "s",
                    "t"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id",
                    "s",
                    "t"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id",
                    "s",
                    "t"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "face_id",
                    "s",
                    "t"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "ptlined": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ptlined\">ptlined</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">This function returns the closest distance between the point Q and a\nfinite line segment between points P0 and P1.</p><ul><li><code>float ptlined(vector P0, vector P1, vector Q)</code></li></ul>\n\n\n\n<p>This function returns the closest distance between the point <code>Q</code> and a\nfinite line segment between points <code>P0</code> and <code>P1</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "P0",
                    "P1",
                    "Q"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "ptransform": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a vector from one space to another.</p><ul><li><code>vector ptransform(string fromspace, string tospace, vector v)</code></li><li><code>vector ptransform(string tospace, vector v)</code></li><li><code>vector ptransform(vector p, matrix transform_matrix)</code></li><li><code>vector4 ptransform(vector4 p, matrix transform_matrix)</code></li></ul>\n\n\n\n<p>Transforms from \"space:current\" (see below).</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector ptransform(string fromspace, string tospace, vector v)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>The transform functions let you transform a vector from one space to another.</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/ptransform\" title=\"Transforms a vector from one space to another.\">ptransform</a> interprets the vector as a position.\n</li>\n<li class=\"bullet \">\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vtransform\" title=\"See ptransform.\">vtransform</a> interprets the vector as a direction\nvector, and so doesn\u2019t apply the translations from the matrix.\n</li>\n<li class=\"bullet \">\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/ntransform\" title=\"See ptransform.\">ntransform</a> interprets the vector as a normal vector,\nand so multiplies by the inverse transpose of the matrix (ignoring the\ntranslations).\n</li>\n</ul>\n<p>The possible values for the <code>space</code> arguments are:</p>\n<p>An object path:\nUse the object space of an object specified by a path string.</p>\n<p>TIP:\nIn some cases, such as point instancing, mantra may\nautomatically mangle object paths. You can generate an <code>.ifd</code>\nfile and look inside to try to find what mantra is calling\nthe object you want.</p>\n<p><code>\"space:object\"</code>:\nObject space of the <em>current</em> object.\n<code>\"space:light\"</code>:\nObject space of the <em>current</em> light when executing a shadow or light shader.\n<code>\"space:world\"</code>:\nHoudini world space.\n<code>\"space:camera\"</code>:\nmantra camera space.\n<code>\"space:ndc\"</code>:\nNormal Device Coordinate space.\n<code>\"space:lightndc\"</code>:\nNormal Device Coordinate space for the <em>current</em> light when executing a shadow or light shader.\n<code>\"space:current\"</code>:\nThe current space the vector is in.\n<code>\"space:world\"</code>:\nHoudini world space.</p>\n<p>The version with only a <code>tospace</code> argument assumes <code>fromspace</code> is\n\"space:current\". For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">Pworld = ptransform(\"space:world\", P);\n</code>\n</div>\n<p>\u2026is equivalent to:</p>\n<div class=\"code-container\">\n<code class=\"line\">Pworld = ptransform(\"space:current\", \"space:world\", P);\n</code>\n</div>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Transform a vector from its current space to object space:</p>\n<div class=\"code-container\">\n<code class=\"line\">ospace = ptransform(\"space:object\", P)\n</code>\n</div>\n<p>Transform a vector from object space to mantra\u2019s natural coordinate\nspace (\"camera\" space):</p>\n<div class=\"code-container\">\n<code class=\"line\">ospace = ptransform(\"space:object\", \"space:current\", P)\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vtransform\">vtransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a><div class=\"related-summary\">See getspace</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "p",
                    "transform_matrix"
                ],
                "args": [
                    "const vector4",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "fromspace",
                    "tospace",
                    "v"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "tospace",
                    "v"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "p",
                    "transform_matrix"
                ],
                "args": [
                    "const vector",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "push": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/push\">push</a></h1><p class=\"summary\">Adds an item to an array.</p><ul><li><code>void push(int[] &amp;array, int value)</code></li><li><code>void push(int[] &amp;array, int[] value)</code></li><li><code>void push(string[] &amp;array, string value)</code></li><li><code>void push(string[] &amp;array, string[] value)</code></li><li><code>void push(float[] &amp;array, float value)</code></li><li><code>void push(float[] &amp;array, float[] values)</code></li><li><code>void push(vector2[] &amp;array, vector2 value)</code></li><li><code>void push(vector2[] &amp;array, vector2[] value)</code></li><li><code>void push(vector[] &amp;array, vector value)</code></li><li><code>void push(vector[] &amp;array, vector[] value)</code></li><li><code>void push(vector4[] &amp;array, vector4 value)</code></li><li><code>void push(vector4[] &amp;array, vector4[] value)</code></li><li><code>void push(matrix2[] &amp;array, matrix2 value)</code></li><li><code>void push(matrix2[] &amp;array, matrix2[] value)</code></li><li><code>void push(matrix3[] &amp;array, matrix3 value)</code></li><li><code>void push(matrix3[] &amp;array, matrix3[] value)</code></li><li><code>void push(matrix[] &amp;array, matrix value)</code></li><li><code>void push(matrix[] &amp;array, matrix[] value)</code></li><li><code>void push(bsdf[] &amp;array, bsdf value)</code></li><li><code>void push(bsdf[] &amp;array, bsdf[] value)</code></li><li><code>void push(light[] &amp;array, light value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void push(light[] &amp;array, light[] value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void push(material[] &amp;array, material value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void push(material[] &amp;array, material[] value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Increases the size of the array by 1.</p>\n<p>The array version increases the size of the array by size of the second array.\nThe elements of the second array are appended.</p>\n<p>This is the equivalent of the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">void push(arraytype a, type value)\n</code><code class=\"line\">{\n</code><code class=\"line\">int len = len(a);\n</code><code class=\"line\">resize(a, len+1);\n</code><code class=\"line\">a[len] = value;\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/len\">len()</a><div class=\"related-summary\">Returns the length of an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/push\">push()</a><div class=\"related-summary\">Adds an item to an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/append\">append()</a><div class=\"related-summary\">Adds an item to an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize()</a><div class=\"related-summary\">Sets the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix2[]",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix2[]",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix3[]",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix3[]",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix[]",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix[]",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export bsdf[]",
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export light[]",
                    "const light"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export material[]",
                    "const material"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export bsdf[]",
                    "const bsdf[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export light[]",
                    "const light[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export material[]",
                    "const material[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export float[]",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "values"
                ],
                "args": [
                    "export float[]",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export int[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector4[]",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector4[]",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export string[]",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector2[]",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector2[]",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector[]",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector[]",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            }
        ]
    },
    "qconvert": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/qconvert\">qconvert</a></h1><span><span class=\"padder\"><span class=\"pillow\">quaternion</span></span></span><p class=\"summary\">Converts a quaternion represented by a vector4 to a matrix3 representation.</p><ul><li><code>vector qconvert(vector4 quaternion)</code></li><li><code>matrix3 qconvert(vector4 quaternion)</code></li></ul>\n\n\n\n<p>Converts a quaternion represented by a vector4 to a matrix3 representation.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector qconvert(vector4 quaternion)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Converts a quaternion represented by a vector4 into a angle/axis vector.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "quaternion"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "quaternion"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "qdistance": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/qdistance\">qdistance</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">quaternion</span></span></span><p class=\"summary\">Finds distance between two quaternions.</p><ul><li><code>float qdistance(vector4 q1, vector4 q2)</code></li></ul>\n\n\n\n<p>Returns the approximate angle, in radians, between two quaternions.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "q1",
                    "q2"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "qinvert": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/qinvert\">qinvert</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">quaternion</span></span></span><p class=\"summary\">Inverts a quaternion rotation.</p><ul><li><code>vector4 qinvert(vector4 quaternion)</code></li></ul>\n\n\n\n<p>Creates the inverse quaternion to the supplied one.  This will rotate points\nin the opposite direction.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "quaternion"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "qmultiply": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/qmultiply\">qmultiply</a></h1><span><span class=\"padder\"><span class=\"pillow\">quaternion</span></span></span><p class=\"summary\">Multiplies two quaternions and returns the result.</p><ul><li><code>vector4 qmultiply(vector4 q1, vector4 q2)</code></li></ul>\n\n\n\n<p>Multiplies two quaternions and returns the result.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "q1",
                    "q2"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "qrotate": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/qrotate\">qrotate</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">quaternion</span></span></span><p class=\"summary\">Rotates a vector by a quaternion.</p><ul><li><code>vector qrotate(vector4 quaternion, vector a)</code></li></ul>\n\n\n\n<p>Rotates the vector a by the given quaternion, returning the result.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "quaternion",
                    "a"
                ],
                "args": [
                    "const vector4",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "quaternion": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/quaternion\">quaternion</a></h1><span><span class=\"padder\"><span class=\"pillow\">quaternion</span></span></span><p class=\"summary\">Creates a vector4 representing a quaternion.</p><ul><li><code>vector4 quaternion(float angle, vector axis)</code></li><li><code>vector4 quaternion(vector angleaxis)</code></li><li><code>vector4 quaternion(matrix3 rotations)</code></li></ul>\n\n\n\n<p>Creates a vector4 representing a quaternion from a 3\u00d73 rotational matrix.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 quaternion(float angle, vector axis)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Creates a vector4 representing a quaternion from an <code>angle</code> and <code>axis</code>. The <code>angle</code> is specified in radians.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 quaternion(vector angleaxis)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Creates a vector4 representing a quaternion from a combined angle/axis. This is the normalized rotation axis multiplied by the rotation angle in radians.</p>\n<p>There used to be a fourth form that took a rotation vector.  It has been renamed to <code>eulertoquaternion</code> and now takes radians.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/dihedral\">dihedral</a><div class=\"related-summary\">Computes the rotation matrix or quaternion which rotates the vector a onto the vector b.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/qconvert\">qconvert</a><div class=\"related-summary\">Converts a quaternion represented by a vector4 to a matrix3 representation.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/eulertoquaternion\">eulertoquaternion</a><div class=\"related-summary\">Creates a vector4 representing a quaternion from euler angles.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "rotations"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "angle",
                    "axis"
                ],
                "args": [
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "angleaxis"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "radians": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/radians\">radians</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Converts the argument from degrees into radians.</p><ul><li><code>float radians(float degrees)</code></li><li><code>vector2 radians(vector2 degrees)</code></li><li><code>vector radians(vector degrees)</code></li><li><code>vector4 radians(vector4 degrees)</code></li></ul>\n\n\n\n<p>Converts the argument from degrees into radians.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "degrees"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "degrees"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "degrees"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "degrees"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "rand": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rand\">rand</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">random</span></span></span><p class=\"summary\">Creates a random number between 0 and 1 from a seed.</p><ul><li><code>float rand(float seed)</code></li><li><code>float rand(float seed, float seed2)</code></li><li><code>float rand(vector2 seed)</code></li><li><code>float rand(vector seed)</code></li><li><code>float rand(vector4 seed)</code></li><li><code>vector2 rand(float seed)</code></li><li><code>vector2 rand(float seed, float seed2)</code></li><li><code>vector2 rand(vector2 seed)</code></li><li><code>vector2 rand(vector seed)</code></li><li><code>vector2 rand(vector4 seed)</code></li><li><code>vector rand(float seed)</code></li><li><code>vector rand(float seed, float seed2)</code></li><li><code>vector rand(vector2 seed)</code></li><li><code>vector rand(vector seed)</code></li><li><code>vector rand(vector4 seed)</code></li><li><code>vector4 rand(float seed)</code></li><li><code>vector4 rand(float seed, float seed2)</code></li><li><code>vector4 rand(vector2 seed)</code></li><li><code>vector4 rand(vector seed)</code></li><li><code>vector4 rand(vector4 seed)</code></li></ul>\n\n\n\n<p>Creates a random number based on the provided seed.  The number will\nbe in the range of 0 to 1.  The same number is produced for the same\nseed, so to vary the random number the seed should be varied.</p>\n<p>Note that even the smallest changes in the seed value will produce\ncompletely different numbers, so it may produce different results\non different operating systems or compilers.</p>\n<p>If the result is a vector2, vector, or vector4, each component will be a\ndifferent random number.  Thus, if you have the code:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector        pos = 1;\n</code><code class=\"line\">float        seed = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">pos *= rand(seed);\n</code>\n</div>\n<p><code>pos</code> will get different values in its <code>.x</code>, <code>.y</code>, and <code>.z</code> components.  If you wish a uniform scale, use the <code>float()</code> cast:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector        pos = 1;\n</code><code class=\"line\">float        seed = 0;\n</code><code class=\"line\">\n</code><code class=\"line\">pos *= float(rand(seed));\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/random_fhash\">random_fhash()</a><div class=\"related-summary\">Hashes floating point numbers to integers.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/random_ihash\">random_ihash()</a><div class=\"related-summary\">Hashes integer numbers to integers.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/random_shash\">random_shash()</a><div class=\"related-summary\">Hashes string to integers.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed",
                    "seed2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed",
                    "seed2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "seed",
                    "seed2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "seed",
                    "seed2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "random": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/random\">random</a></h1><span><span class=\"padder\"><span class=\"pillow\">random</span></span></span><p class=\"summary\">Generate a random number based on the position in N dimensional space\n(where N is 1 to 4 dimensions).</p><ul><li><code>float random(int position)</code></li><li><code>float random(int xpos, int ypos)</code></li><li><code>float random(float position)</code></li><li><code>float random(float xpos, float ypos)</code></li><li><code>float random(vector position)</code></li><li><code>float random(vector4 position)</code></li><li><code>vector2 random(int position)</code></li><li><code>vector random(int position)</code></li><li><code>vector random(int xpos, int ypos)</code></li><li><code>vector random(float position)</code></li><li><code>vector random(float xpos, float ypos)</code></li><li><code>vector random(vector position)</code></li><li><code>vector random(vector4 position)</code></li><li><code>vector4 random(int position)</code></li><li><code>vector4 random(int xpos, int ypos)</code></li><li><code>vector4 random(float position)</code></li><li><code>vector4 random(float xpos, float ypos)</code></li><li><code>vector4 random(vector position)</code></li><li><code>vector4 random(vector4 position)</code></li></ul>\n\n\n\n<p>Generate a random number based on the position in N dimensional space\n(where N is 1 to 4 dimensions). Unlike the noise functions, the random\nfunctions do not smoothly interpolate the random values between integer\nlattice points. The random() functions are very efficient ways of doing\nsomething like <code>noise(floor(position))</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xpos",
                    "ypos"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xpos",
                    "ypos"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "xpos",
                    "ypos"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "xpos",
                    "ypos"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xpos",
                    "ypos"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xpos",
                    "ypos"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "random_fhash": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/random_fhash\">random_fhash</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">random</span></span></span><p class=\"summary\">Hashes floating point numbers to integers.</p><ul><li><code>int random_fhash(float seed)</code></li><li><code>int random_fhash(float seed, float seed2)</code></li><li><code>int random_fhash(vector2 seed)</code></li><li><code>int random_fhash(vector seed)</code></li><li><code>int random_fhash(vector4 seed)</code></li></ul>\n\n\n\n<p>Hashes the given number into an integer value.  The hash may vary\nfor even the smallest differences in inputs.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "seed",
                    "seed2"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "random_ihash": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/random_ihash\">random_ihash</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">random</span></span></span><p class=\"summary\">Hashes integer numbers to integers.</p><ul><li><code>int random_ihash(int seed)</code></li></ul>\n\n\n\n<p>Hashes the given number into an integer value.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "random_shash": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/random_shash\">random_shash</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">random</span></span></span><p class=\"summary\">Hashes string to integers.</p><ul><li><code>int random_shash(string seed)</code></li></ul>\n\n\n\n<p>Hashes the given string into an integer value.</p>\n<p>NOTE:\nTwo different strings may hash to the same value.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "seed"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "random_sobol": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/random_sobol\">random_sobol</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">random_sobol</span></span></span><p class=\"summary\">Generate a uniformly distributed random number.</p><ul><li><code>float random_sobol(int seed, int offset)</code></li><li><code>float random_sobol(float seed, int offset)</code></li><li><code>float random_sobol(vector seed, int offset)</code></li><li><code>float random_sobol(vector4 seed, int offset)</code></li><li><code>vector random_sobol(int seed, int offset)</code></li><li><code>vector random_sobol(float seed, int offset)</code></li><li><code>vector random_sobol(vector seed, int offset)</code></li><li><code>vector random_sobol(vector4 seed, int offset)</code></li><li><code>vector4 random_sobol(int seed, int offset)</code></li><li><code>vector4 random_sobol(float seed, int offset)</code></li><li><code>vector4 random_sobol(vector seed, int offset)</code></li><li><code>vector4 random_sobol(vector4 seed, int offset)</code></li></ul>\n\n\n\n<p>When generating a sequence of random numbers you will notice that it tends to\nclump.  Sometimes you want a bunch of samples that are better distributed,\nhowever.  A sobol sequence is a series of random numbers which are relatively\nevenly distributed.</p>\n<p>The seed allows you to select different sobol sequences.  If it is a floating\npoint seed, note very small differences will select very different sequences.</p>\n<p>The offset is which entry in the sequence to extract.  This should be an\ninteger sequence, like <code>ptnum</code>, in order for the distribution property to work.</p>\n<p>Each number is in the <code>[0..1)</code> range.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const vector4",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const vector4",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const vector4",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "seed",
                    "offset"
                ],
                "args": [
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "rawbumpmap": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "rawbumpmapA": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "rawbumpmapB": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "rawbumpmapG": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "rawbumpmapL": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "rawbumpmapR": {
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "filename",
                    "du",
                    "dv",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "float",
                    "float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "rawcolormap": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rawcolormap\">rawcolormap</a></h1><span><span class=\"padder\"><span class=\"pillow\">color</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span></span><p class=\"summary\"></p><ul><li><code>vector rawcolormap(string filename, float u, float v, ...)</code></li><li><code>vector rawcolormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples, ...)</code></li><li><code>vector rawcolormap(string filename, vector uvw, ...)</code></li><li><code>vector rawcolormap(string filename, vector uv, vector du, vector dv, int samples, ...)</code></li><li><code>vector rawcolormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, ...)</code></li><li><code>vector rawcolormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, int samples, ...)</code></li><li><code>vector4 rawcolormap(string filename, float u, float v, ...)</code></li><li><code>vector4 rawcolormap(string filename, float u0, float v0, float u1, float v1, float u2, float v2, float u3, float v3, int samples, ...)</code></li><li><code>vector4 rawcolormap(string filename, vector uvw, ...)</code></li><li><code>vector4 rawcolormap(string filename, vector uv, vector du, vector dv, int samples, ...)</code></li><li><code>vector4 rawcolormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, ...)</code></li><li><code>vector4 rawcolormap(string filename, vector uv0, vector uv1, vector uv2, vector uv3, int samples, ...)</code></li></ul>\n\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/colormap\">colormap</a><div class=\"related-summary\">Looks up a color from a disk image.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "u0",
                    "v0",
                    "u1",
                    "v1",
                    "u2",
                    "v2",
                    "u3",
                    "v3",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv",
                    "du",
                    "dv",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "uv2",
                    "uv3"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "uv2",
                    "uv3",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "u",
                    "v"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "u0",
                    "v0",
                    "u1",
                    "v1",
                    "u2",
                    "v2",
                    "u3",
                    "v3",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uvw"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv",
                    "du",
                    "dv",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "uv2",
                    "uv3"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "uv0",
                    "uv1",
                    "uv2",
                    "uv3",
                    "samples"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "rayhittest": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rayhittest\">rayhittest</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Sends a ray from the position P along the direction D.</p><ul><li><code>float rayhittest(vector P, vector D, float bias, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>float rayhittest(vector P, vector D, vector &amp;pHit, vector &amp;nHit, float bias, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Sends a ray from the position <code>P</code> along the direction <code>D</code>. The\nlength of the <code>D</code> vector represents the farthest distance considered\nwhen check for occlusion.</p>\n<p>Returns the distance to the object intersected. If no object is hit,\nreturns less than 0.</p>\n<p>If you specify <code>pHit</code> and <code>nHit</code>, they get the position and normal\nof the hit surface.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#rayopts\">optional raytracing parameters</a> .</p>\n<p>In many cases, the area sampling features will not produce usable\nresults with the rayhittest() function.</p>\n<p>TIP:\nWhen hit testing polygons you can get lots of rays missing.\nIn these cases triangulating the geometry can improves hits.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "P",
                    "D",
                    "bias"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "P",
                    "D",
                    "pHit",
                    "nHit",
                    "bias"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "vector",
                    "vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "rayimport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rayimport\">rayimport</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Imports a value sent by a shader in a gather loop.</p><ul><li><code>int rayimport(string name, int &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int rayimport(string name, string &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int rayimport(string name, float &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int rayimport(string name, vector2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int rayimport(string name, vector &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int rayimport(string name, vector4 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int rayimport(string name, matrix2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int rayimport(string name, matrix3 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int rayimport(string name, matrix &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>This function extracts information any passed when the surface is hit by a ray fired by the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/gather\" title=\"Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.\">gather()</a>. The first argument is the name, as passed using a <code>\"send:<code>name</code>\", value</code> argument pair in <code>gather</code> (but minus the <code>send:</code> prefix). The second argument is a variable in which to put the imported value.</p>\n<p>This function returns <code>1</code> if a value by the given name was successfully imported.</p>\n<p>See the help page for the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/gather\" title=\"Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.\">gather()</a> for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/gather\">gather()</a><div class=\"related-summary\">Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/simport\">simport()</a><div class=\"related-summary\">Imports a variable sent by a surface shader in an illuminance loop.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix2"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix3"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export float"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export int"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector4"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export string"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector2"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector"
                ],
                "contexts": [
                    "surface",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "re_find": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/re_find\">re_find</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Finds the given regular expression in the string</p><ul><li><code>int re_find(string regex, string input)</code></li><li><code>int re_find(string regex, string input, int start)</code></li><li><code>int re_find(string regex, string input, int start, int end)</code></li><li><code>int re_find(int[] &amp;start_pos, int[] &amp;end_pos, string regex, string input)</code></li><li><code>int re_find(int[] &amp;start_pos, int[] &amp;end_pos, string regex, string input, int start)</code></li><li><code>int re_find(int[] &amp;start_pos, int[] &amp;end_pos, string regex, string input, int start, int end)</code></li><li><code>string re_find(string regex, string input)</code></li><li><code>string re_find(string regex, string input, int start)</code></li><li><code>string re_find(string regex, string input, int start, int end)</code></li><li><code>string[] re_find(string regex, string input)</code></li><li><code>string[] re_find(string regex, string input, int start)</code></li><li><code>string[] re_find(string regex, string input, int start, int end)</code></li></ul>\n\n\n\n<p>Finds the given regular expression in the input string.</p>\n<p>The function has three possible returns:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nThe integer version returns 1 if the expression was found, otherwise 0.\n</li>\n<li class=\"bullet \">\nString string version returns the first string that matches the entire <code>regex</code> expression (ignores capture groups). If not found the string will be empty.\n</li>\n<li class=\"bullet \">\nThe version that takes two arrays returns 1 if the expression was found otherwise 0. It also fills <code>start_pos</code> with starting positions of the capture groups and <code>end_pos</code> with ending positions for capture groups (the first group matches the whole string).\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_match\">re_match()</a><div class=\"related-summary\">Returns 1 if the entire input string matches the expression</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_findall\">re_findall()</a><div class=\"related-summary\">Finds all instances of the given regular expression in the string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_replace\">re_replace()</a><div class=\"related-summary\">Replaces instances of regex_find with regex_replace</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_split\">re_split()</a><div class=\"related-summary\">Splits the given string based on regex match.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "regex",
                    "input"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "start"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "start",
                    "end"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "start_pos",
                    "end_pos",
                    "regex",
                    "input"
                ],
                "args": [
                    "int[]",
                    "int[]",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "start_pos",
                    "end_pos",
                    "regex",
                    "input",
                    "start"
                ],
                "args": [
                    "int[]",
                    "int[]",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "start_pos",
                    "end_pos",
                    "regex",
                    "input",
                    "start",
                    "end"
                ],
                "args": [
                    "int[]",
                    "int[]",
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "regex",
                    "input"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "start"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "start",
                    "end"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "regex",
                    "input"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "start"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "start",
                    "end"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            }
        ]
    },
    "re_findall": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/re_findall\">re_findall</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Finds all instances of the given regular expression in the string</p><ul><li><code>string[] re_findall(string regex, string input)</code></li><li><code>string[] re_findall(string regex, string input, int start)</code></li><li><code>string[] re_findall(string regex, string input, int start, int end)</code></li></ul>\n\n\n\n<p>Returns an array of all strings that match the entire <code>regex</code> expression (no capture groups). If not found returned array will be empty.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_find\">re_find()</a><div class=\"related-summary\">Finds the given regular expression in the string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_match\">re_match()</a><div class=\"related-summary\">Returns 1 if the entire input string matches the expression</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_replace\">re_replace()</a><div class=\"related-summary\">Replaces instances of regex_find with regex_replace</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_split\">re_split()</a><div class=\"related-summary\">Splits the given string based on regex match.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "regex",
                    "input"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "start"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "start",
                    "end"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "re_match": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/re_match\">re_match</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns 1 if the entire input string matches the expression</p><ul><li><code>int re_match(string regex, string input)</code></li></ul>\n\n\n\n<p>Returns 1 if the entire input string matches the expression otherwise 0.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_find\">re_find()</a><div class=\"related-summary\">Finds the given regular expression in the string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_findall\">re_findall()</a><div class=\"related-summary\">Finds all instances of the given regular expression in the string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_replace\">re_replace()</a><div class=\"related-summary\">Replaces instances of regex_find with regex_replace</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_split\">re_split()</a><div class=\"related-summary\">Splits the given string based on regex match.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "regex",
                    "input"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "re_replace": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/re_replace\">re_replace</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Replaces instances of regex_find with regex_replace</p><ul><li><code>string re_replace(string regex_find, string regex_replace, string input)</code></li><li><code>string re_replace(string regex_find, string regex_replace, string input, int maxreplace)</code></li></ul>\n\n\n\n<p>Finds all non overlapping instances of <code>regex_find</code> and replaces them with <code>regex_replace</code> up to a maximum of <code>maxreplace</code> times.\nIf <code>maxreplace</code> is not provided it replaces all instances.</p>\n<p>NOTE:\n<code>maxreplace = 0</code> is treated as replace all instances.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_match\">re_match()</a><div class=\"related-summary\">Returns 1 if the entire input string matches the expression</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_find\">re_find()</a><div class=\"related-summary\">Finds the given regular expression in the string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_findall\">re_findall()</a><div class=\"related-summary\">Finds all instances of the given regular expression in the string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_split\">re_split()</a><div class=\"related-summary\">Splits the given string based on regex match.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "regex_find",
                    "regex_replace",
                    "input"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "regex_find",
                    "regex_replace",
                    "input",
                    "maxreplace"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "re_split": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/re_split\">re_split</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Splits the given string based on regex match.</p><ul><li><code>string[] re_split(string regex, string input)</code></li><li><code>string[] re_split(string regex, string input, int maxsplits)</code></li></ul>\n\n\n\n<p>Splits a string into tokens by removing the separator expression from the string\nand creating an array entry for each substring bounded by the expression.</p>\n<p>NOTE:\n<code>maxsplits = 0</code> is treated as split as many times as possible.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/split\">split()</a><div class=\"related-summary\">Splits a string into tokens.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_match\">re_match()</a><div class=\"related-summary\">Returns 1 if the entire input string matches the expression</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_find\">re_find()</a><div class=\"related-summary\">Finds the given regular expression in the string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_findall\">re_findall()</a><div class=\"related-summary\">Finds all instances of the given regular expression in the string</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/re_replace\">re_replace()</a><div class=\"related-summary\">Replaces instances of regex_find with regex_replace</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "regex",
                    "input"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "regex",
                    "input",
                    "maxsplits"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "reflect": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/reflect\">reflect</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the vector representing the reflection of the direction\nagainst the normal.</p><ul><li><code>vector reflect(vector direction, vector normal)</code></li></ul>\n\n\n\n<p>Returns the vector representing the reflection of the <code>direction</code>\nagainst the <code>normal</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "direction",
                    "normal"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "reflectlight": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/reflectlight\">reflectlight</a></h1><span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Computes the amount of reflected light which hits the surface.</p><ul><li><code>vector reflectlight(float bias, float max_contrib, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector reflectlight(vector P, vector D, float bias, float max_contrib, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector reflectlight(vector P, vector N, vector I, float bias, float max_contrib, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Computes the amount of reflected light which hits the surface.</p>\n<p><code>bias</code> is typically a small number (for example 0.005) used to help\neliminate self-reflection.  If <code>bias</code> is less than 0, the default\nray tracing bias specified with the <code>vm_raybias</code> setting will be used\ninstead.</p>\n<p><code>max_contrib</code> tells the renderer how much the reflected light will\ncontribute to the final color of the pixel. This is typically the\nmaximum of the reflection component of a lighting model. This has no\neffect on the resultant color. This value should typically be less than\n1.</p>\n<p>There are also two \"general\" forms of <code>reflectlight</code> which take a position\n(<code>P</code>) and direction (<code>D</code>). There is also a form which takes a\nposition, direction and incident ray (<code>I</code>) and computes the reflection\nvector.</p>\n<div class=\"code-container\">\n<code class=\"line\">surface mirror(vector refl_color=1; float bias=.005)\n</code><code class=\"line\">{\n</code><code class=\"line\">Cf = refl_color * reflectlight(bias, max(refl_color));\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2 class=\"label heading\" id=\"keyword-arguments\">\n            \n            Keyword arguments\n        </h2>\n<div class=\"content\" id=\"keyword-arguments-body\">\n<p>See optional <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#rayopts\">shading</a>\nand <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#imagefilter\">image filter</a> parameters.</p>\n\n<p>\n<code>lightmask</code>\n\n<div class=\"content\">\n<p>You can use the <code>lightmask</code> keyword argument to pass a light name\n    pattern to limit the set of lights used to illuminate the hit surface.\n    This allows the tracing surface to control the lighting of the hit\n    surface.  The <code>\"scope:default\"</code> value will cause the <code>lightmask</code>\n    argument to use the default light mask for the current context - as if\n    the argument were not specified.</p>\n<div class=\"code-container\">\n..., \"lightmask\", \"hotlights*\");\n\n</div></div>\n</p>\n\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/refractlight\">refractlight()</a><div class=\"related-summary\">Computes the illumination of surfaces refracted by the current\nsurface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/gather\">gather()</a><div class=\"related-summary\">Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/irradiance\">irradiance()</a><div class=\"related-summary\">Computes irradiance (global illumination) at the point P with the\nnormal N.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "bias",
                    "max_contrib"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "P",
                    "D",
                    "bias",
                    "max_contrib"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "P",
                    "N",
                    "I",
                    "bias",
                    "max_contrib"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "refract": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/refract\">refract</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the refraction ray given an incoming direction, the\nnormalized normal and an index of refraction.</p><ul><li><code>vector refract(vector direction, vector normal, float index)</code></li></ul>\n\n\n\n<p>Returns the refraction ray given an incoming <code>direction</code>, the\nnormalized <code>normal</code> and an <code>index</code> of refraction.</p>\n<p>The <code>index</code> is a relative index of refraction, the ratio between\nthe interior and exterior index of refraction, where the exterior\nis defined by the direction of the normals (normals point away from\nthe interior).</p>\n<p>In the case of total internal reflection, this function returns the\nreflection vector.</p>\n<p>For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">refract(normalize(I), normalize(N), outside_to_inside_ior)\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/fresnel\">fresnel()</a><div class=\"related-summary\">Computes the fresnel reflection/refraction contributions given an\nincoming vector, surface normal (both normalized), and an index of\nrefraction (eta).</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "direction",
                    "normal",
                    "index"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "refractlight": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/refractlight\">refractlight</a></h1><span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Computes the illumination of surfaces refracted by the current\nsurface.</p><ul><li><code>void refractlight(vector &amp;cf, vector &amp;of, float &amp;af, vector P, vector D, float bias, float max_contrib, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void refractlight(vector &amp;cf, vector &amp;of, float &amp;af, vector P, vector N, vector I, float eta, float bias, float max_contrib, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Computes the illumination of surfaces refracted by the current surface.\nComputes and outputs the output color (<code>cf</code>), opacity (<code>of</code>) and\nalpha (<code>af</code>). See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#opacity\">opacity vs.\nalpha</a> .</p>\n<p><code>bias</code> is typically a small number (for example 0.005) used to help\neliminate self-reflection.</p>\n<p><code>max_contrib</code> tells the renderer how much the reflected light will\ncontribute to the final color of the pixel. This has no effect on the\nresultant color.</p>\n<p>The first form of the refractlight() function takes a position and\ndirection, typically computed by the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/refract\" title=\"Returns the refraction ray given an incoming direction, the\nnormalized normal and an index of refraction.\">refract</a> or\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/fresnel\" title=\"Computes the fresnel reflection/refraction contributions given an\nincoming vector, surface normal (both normalized), and an index of\nrefraction (eta).\">fresnel</a> functions.</p>\n<p>To prevent the renderer from computing standard transparency (i.e.\nnon-refracted transparency), the Of variable must be set to {1,1,1} to\nmake the surface \"opaque\". The Af variable can be set to any arbitrary\nvalue.</p>\n<div class=\"code-container\">\n<code class=\"line\">surface glass(float eta=1.3, bias = 0.005)\n</code><code class=\"line\">{\n</code><code class=\"line\">float    Kr, Kt;\n</code><code class=\"line\">vector    R, T;\n</code><code class=\"line\">vector    cf, of;\n</code><code class=\"line\">float    af;\n</code><code class=\"line\">frensel(normalize(I), normalize(N), eta, Kr, Kt, R, T);\n</code><code class=\"line\">Cf  = Kr * reflectlight(P, R, bias, Kr);\n</code><code class=\"line\">refractlight(cf, of, af, P, T, bias, Kt);\n</code><code class=\"line\">Cf += Kt * cf;\n</code><code class=\"line\">Af = clamp(Kr + af*Kt, 0, 1);\n</code><code class=\"line\">Of = 1;\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2 class=\"label heading\" id=\"keyword-arguments\">\n            \n            Keyword arguments\n        </h2>\n<div class=\"content\" id=\"keyword-arguments-body\">\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#rayopts\">optional parameters</a>.</p>\n\n<p>\n<code>lightmask</code>\n\n<div class=\"content\">\n<p>You can use the <code>lightmask</code> keyword argument to pass a light name\n    pattern to limit the set of lights used to illuminate the hit surface.\n    This allows the tracing surface to control the lighting of the hit\n    surface.  The <code>\"scope:default\"</code> value will cause the <code>lightmask</code>\n    argument to use the default light mask for the current context - as if\n    the argument were not specified.</p>\n<div class=\"code-container\">\n..., \"lightmask\", \"hotlights*\");\n\n</div></div>\n</p>\n\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/reflectlight\">reflectlight()</a><div class=\"related-summary\">Computes the amount of reflected light which hits the surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/gather\">gather()</a><div class=\"related-summary\">Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/irradiance\">irradiance()</a><div class=\"related-summary\">Computes irradiance (global illumination) at the point P with the\nnormal N.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "cf",
                    "of",
                    "af",
                    "P",
                    "D",
                    "bias",
                    "max_contrib"
                ],
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "const vector",
                    "const vector",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "cf",
                    "of",
                    "af",
                    "P",
                    "N",
                    "I",
                    "eta",
                    "bias",
                    "max_contrib"
                ],
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "relativepath": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/relativepath\">relativepath</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Computes the relative path for two full paths.</p><ul><li><code>string relativepath(string src, string dest)</code></li></ul>\n\n\n\n<p>Computes the relative path required to get from the <code>src</code> path to the <code>dest</code> path.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>relativepath(\"/obj/geo1/box\", \"/obj/ropnet1/mantra1\")</code> - returns <code>../../ropnet1/mantra1</code>\n</li>\n</ul>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "src",
                    "dest"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "relbbox": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/relbbox\">relbbox</a></h1><span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the relative position of the point given with respect to the bounding box of the geometry.</p><ul><li><code>vector relbbox(int opinput, string primgroup, vector position)</code></li><li><code>vector relbbox(int input, vector position)</code></li><li><code>vector relbbox(string filename, string primgroup, vector position)</code></li><li><code>vector relbbox(string filename, vector position)</code></li><li><code>vector relbbox(vector position)</code></li></ul>\n\n\n\n<p>Returns the relative position of the point given with respect to the\nbounding box of the geometry. This is equivalent to getting <code>$BBX</code>,\n<code>$BBY</code>, <code>$BBZ</code> in the <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/point\" title=\"Manually adds or edits point attributes.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/SOP/point.svg\">[Image \ud83d\udd17]</a>Point SOP</a>.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>This is relative to a primitive bounding box.  The group variant will take a primitive group, not a point group.</p>\n</div>\n</div>\n</div>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector relbbox(vector position)\n</code>\nWARNING\n        \n<div class=\"content\">\n<p>This form of <code>relbbox</code> is deprecated and may be removed in the future. \n    Use the other forms as needed.</p>\n</div>\n</li>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primgroup",
                    "position"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "position"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primgroup",
                    "position"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "position"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "position"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "relpointbbox": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/relpointbbox\">relpointbbox</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span><span class=\"padder\"><span class=\"pillow\">sop</span></span></span><p class=\"summary\">Returns the relative position of the point given with respect to the bounding box of the geometry.</p><ul><li><code>vector relpointbbox(int opinput, string pointgroup, vector position)</code></li><li><code>vector relpointbbox(int input, vector position)</code></li><li><code>vector relpointbbox(string filename, string pointgroup, vector position)</code></li><li><code>vector relpointbbox(string filename, vector position)</code></li></ul>\n\n\n\n<p>Returns the relative position of the point given with respect to the\nbounding box of the geometry. This is equivalent to getting <code>$BBX</code>,\n<code>$BBY</code>, <code>$BBZ</code> in the <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/point\" title=\"Manually adds or edits point attributes.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/SOP/point.svg\">[Image \ud83d\udd17]</a>Point SOP</a>.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>This is relative to a point bounding box.  The group variant will take a point group, not a primitive group.</p>\n</div>\n</div>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "pointgroup",
                    "position"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "position"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "pointgroup",
                    "position"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "position"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "removegroup": {
        "sigs": [
            {
                "argnames": [
                    "group_name",
                    "point_number"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "pop",
                    "sop"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "removeindex": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/removeindex\">removeindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Removes an item at the given index from an array.</p><ul><li><code>int removeindex(int[] &amp;array, int index)</code></li><li><code>string removeindex(string[] &amp;array, int index)</code></li><li><code>float removeindex(float[] &amp;array, int index)</code></li><li><code>vector2 removeindex(vector2[] &amp;array, int index)</code></li><li><code>vector removeindex(vector[] &amp;array, int index)</code></li><li><code>vector4 removeindex(vector4[] &amp;array, int index)</code></li><li><code>matrix2 removeindex(matrix2[] &amp;array, int index)</code></li><li><code>matrix3 removeindex(matrix3[] &amp;array, int index)</code></li><li><code>matrix removeindex(matrix[] &amp;array, int index)</code></li></ul>\n\n\n\n<p>Reduces the size of the array by 1.</p>\n<p>A negative index value will count from the end of the array,\nso a value of -1 will remove the last value, -2 the penultimate,\nand so forth.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pop\">pop()</a><div class=\"related-summary\">Removes the last element of an array and returns it.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/removevalue\">removevalue()</a><div class=\"related-summary\">Removes an item from an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export matrix2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export matrix3[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export matrix[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export float[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export vector4[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export string[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export vector2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2"
            },
            {
                "argnames": [
                    "array",
                    "index"
                ],
                "args": [
                    "export vector[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector"
            }
        ]
    },
    "removepoint": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/removepoint\">removepoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Removes a point from the geometry.</p><ul><li><code>int removepoint(int geohandle, int point_number)</code></li></ul>\n\n\n\n<p>Removes a point in the geometry specified by geohandle.</p>\n<p>If the <code>point_number</code> is -1, nothing is done.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "point_number"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "removeprim": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/removeprim\">removeprim</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Removes a primitive from the geometry.</p><ul><li><code>int removeprim(int geohandle, int prim_number, int andpoints)</code></li></ul>\n\n\n\n<p>Removes a primitive in the geometry specified by <code>geohandle</code>.</p>\n<p>If the <code>prim_number</code> is -1, nothing is done.</p>\n<p>If <code>andpoints</code> is 1, the points that the primitive owns will also be deleted if there are no other primitives still referring to them.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim_number",
                    "andpoints"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "removevalue": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/removevalue\">removevalue</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Removes an item from an array.</p><ul><li><code>int removevalue(int[] &amp;array, int value)</code></li><li><code>int removevalue(string[] &amp;array, string value)</code></li><li><code>int removevalue(float[] &amp;array, float value)</code></li><li><code>int removevalue(vector2[] &amp;array, vector2 value)</code></li><li><code>int removevalue(vector[] &amp;array, vector value)</code></li><li><code>int removevalue(vector4[] &amp;array, vector4 value)</code></li><li><code>int removevalue(matrix2[] &amp;array, matrix2 value)</code></li><li><code>int removevalue(matrix3[] &amp;array, matrix3 value)</code></li><li><code>int removevalue(matrix[] &amp;array, matrix value)</code></li></ul>\n\n\n\n<p>Finds the given value in the array.  If found, the first value will\nbe removed, changing the passed in array.  Returns the number of elements\nremoved, either 0 or 1.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/push\">push()</a><div class=\"related-summary\">Adds an item to an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/find\">find()</a><div class=\"related-summary\">Finds an item in an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/append\">append()</a><div class=\"related-summary\">Adds an item to an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize()</a><div class=\"related-summary\">Sets the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix2[]",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix3[]",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix[]",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export float[]",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector4[]",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector2[]",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector[]",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            }
        ]
    },
    "renderstate": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/renderstate\">renderstate</a></h1><span><span class=\"padder\"><span class=\"pillow\">properties</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Queries the renderer for a named property.</p><ul><li><code>int renderstate(string query, int &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(string query, string &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(string query, float &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(string query, vector &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(string query, vector4 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(string query, matrix3 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(string query, matrix &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(material mat, string query, int &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(material mat, string query, string &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(material mat, string query, float &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(material mat, string query, vector &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(material mat, string query, vector4 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(material mat, string query, matrix3 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int renderstate(material mat, string query, matrix &amp;value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns a non-zero value and sets <code>value</code> on success, or returns <code>0</code>\nif the renderer cannot evaluate the query.</p>\n<p>The two-argument variations look up the property on the current object.\nIf you pass a <code>material</code> as the first argument,\nthe function looks up the property on the material instead of the current object.</p>\n<p>See the <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../props/mantra\">list of IFD properties</a> you can query. Use\nthe <strong>IFD</strong> name (e.g. <code>image:samples</code>),\nnot the Houdini name (e.g. <code>vm_samples</code>).</p>\n\n<h2 class=\"label heading\" id=\"useful-properties\">\n            \n            Useful properties\n        </h2>\n<div class=\"content\" id=\"useful-properties-body\">\n<p>The following properties are commonly useful and are reproduced here\nfor convenience, but you can query any property from the\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../props/mantra\">the full list of IFD properties</a>.</p>\n\n<p>\n<code>image:name</code>\n\n<div class=\"content\">\n<p>(string) The name of the image being rendered.</p>\n</div>\n</p>\n<p>\n<code>image:pixelaspect</code>\n\n<div class=\"content\">\n<p>(float) The pixel aspect ratio (X/Y) of the image.</p>\n</div>\n</p>\n<p>\n<code>image:resolution</code>\n\n<div class=\"content\">\n<p>(vector) Gives the resolution as {<code>x_res</code>, <code>y_res</code>, <code>samples_per_pixel</code>}.</p>\n</div>\n</p>\n<p>\n<code>image:samples</code>\n\n<div class=\"content\">\n<p>(vector) Gives samples as {<code>x_samples</code>, <code>y_samples</code>, 0}.</p>\n</div>\n</p>\n<p>\n<code>image:raysamples</code>\n\n<div class=\"content\">\n<p>(vector) Gives the raytracing samples as {<code>x_samples</code>, <code>y_samples</code>, 0}.</p>\n</div>\n</p>\n<p>\n<code>light:name</code>\n\n<div class=\"content\">\n<p>(string) The name of the light object which is currently active in the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> loop.</p>\n</div>\n</p>\n<p>\n<code>light:shadowscope</code>\n\n<div class=\"content\">\n<p>(string) The list of objects casting shadows from a light.</p>\n</div>\n</p>\n<p>\n<code>object:name</code>\n\n<div class=\"content\">\n<p>(string) The name of the object being shaded. This is valid within light and shadow shaders and can be used to query which object is being lit (or shadowed) by the light source.</p>\n</div>\n</p>\n<p>\n<code>object:reflectscope</code>\n\n<div class=\"content\">\n<p>(string) The default reflection scope pattern for the object being shaded.</p>\n</div>\n</p>\n<p>\n<code>object:refractscope</code>\n\n<div class=\"content\">\n<p>(string) The default refraction scope pattern for the object being shaded.</p>\n</div>\n</p>\n<p>\n<code>object:reflectlimit</code>\n\n<div class=\"content\">\n<p>(float or int) The hard limit for maximum refraction bounces for the object being shaded.</p>\n</div>\n</p>\n<p>\n<code>object:shadingquality</code>\n\n<div class=\"content\">\n<p>(float) The shading quality for the object being shaded.</p>\n</div>\n</p>\n<p>\n<code>object:lightmask</code>\n\n<div class=\"content\">\n<p>(string) The object\u2019s light mask string.</p>\n</div>\n</p>\n<p>\n<code>object:area</code>\n\n<div class=\"content\">\n<p>(float) The object\u2019s surface area.</p>\n</div>\n</p>\n<p>\n<code>renderer:name</code>\n\n<div class=\"content\">\n<p>(string) The name of the renderer.</p>\n</div>\n</p>\n<p>\n<code>renderer:version</code>\n\n<div class=\"content\">\n<p>As a string, gives the renderer version as \"<code>major</code>.<code>minor</code>.<code>build</code>\"\n    As a vector, gives the renderer version as {<code>major</code>, <code>minor</code>, <code>build</code>}.</p>\n</div>\n</p>\n<p>\n<code>renderer:renderengine</code>\n\n<div class=\"content\">\n<p>(string) The render method in use, such as <code>micropoly</code> or <code>raytrace</code>. \n    See the <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../props/mantra\">properties list</a> for the full list of possible values.</p>\n</div>\n</p>\n<p>\n<code>shader:name</code>\n\n<div class=\"content\">\n<p>(string) The name of the current shader being run.</p>\n</div>\n</p>\n\n</div>\n\n\n<h2 class=\"label heading\" id=\"packed-primitives\">\n            \n            Packed Primitives\n        </h2>\n<div class=\"content\" id=\"packed-primitives-body\">\n<p>When mantra renders packed primitives, the geometry gets unpacked before rendering.  This means primitive attributes on the packed primitive aren\u2019t available to shaders (since they aren\u2019t passed down to the unpacked geometry).</p>\n<p>Before unpacking, mantra will automatically convert the primitive attributes to custom object properties (see <code>ray_declare</code> on the <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../render/ifd\">IFD file format</a> page).  The property will be named <code>packed:ATTRIBNAME</code> (where <code>ATTRIBNAME</code> is the name of the attribute).  The <code>renderstate()</code> function can be used to access these properties, just like any other object property.</p>\n<p>For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector Cd;\n</code><code class=\"line\">if (!renderstate(\"packed:Cd\", Cd))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0Cd = 1;   // There was no Cd attribute on packed geometry\n</code>\n</div>\n</div>\n\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n<code class=\"line\">surface showversion() \n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0string    rname, rversion;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (!renderstate(\"renderer:name\", rname))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rname = \"Unknown renderer\";\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (!renderstate(\"renderer:version\", rversion))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rversion = \"Unknown version\";\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0printf(\"Image rendered by %s (%s)\\n\", rname, rversion);\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">vector mapToScreen(vector NDC_P)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Given a point in NDC space, find out which pixel it\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// maps to.\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector    result;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (!renderstate(\"image:resolution\", result))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = {640, 486, 0};\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return result * NDC_P;\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "mat",
                    "query",
                    "value"
                ],
                "args": [
                    "const material",
                    "const string",
                    "export matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "mat",
                    "query",
                    "value"
                ],
                "args": [
                    "const material",
                    "const string",
                    "export matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "mat",
                    "query",
                    "value"
                ],
                "args": [
                    "const material",
                    "const string",
                    "export float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "mat",
                    "query",
                    "value"
                ],
                "args": [
                    "const material",
                    "const string",
                    "export int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "mat",
                    "query",
                    "value"
                ],
                "args": [
                    "const material",
                    "const string",
                    "export vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "mat",
                    "query",
                    "value"
                ],
                "args": [
                    "const material",
                    "const string",
                    "export string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "mat",
                    "query",
                    "value"
                ],
                "args": [
                    "const material",
                    "const string",
                    "export vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "query",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "query",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "query",
                    "value"
                ],
                "args": [
                    "const string",
                    "export float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "query",
                    "value"
                ],
                "args": [
                    "const string",
                    "export int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "query",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "query",
                    "value"
                ],
                "args": [
                    "const string",
                    "export string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "query",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "reorder": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/reorder\">reorder</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Reorders items in an array or string.</p><ul><li><code>string reorder(string value, int[] indices)</code></li><li><code>int[] reorder(int[] value, int[] indices)</code></li><li><code>string[] reorder(string[] value, int[] indices)</code></li><li><code>float[] reorder(float[] value, int[] indices)</code></li><li><code>vector2[] reorder(vector2[] value, int[] indices)</code></li><li><code>vector[] reorder(vector[] value, int[] indices)</code></li><li><code>vector4[] reorder(vector4[] value, int[] indices)</code></li><li><code>matrix2[] reorder(matrix2[] value, int[] indices)</code></li><li><code>matrix3[] reorder(matrix3[] value, int[] indices)</code></li><li><code>matrix[] reorder(matrix[] value, int[] indices)</code></li></ul>\n\n\n\n<p>Returns a version of the array that has been reordered by the given list of\nindices.</p>\n<p>The string version likewise returns a reordered string.</p>\n<p>This is the equivalent of the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">arraytype reorder(arraytype a, int indices[])\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0arraytype result = {};\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0foreach (int srcindex; indices)\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0append(result, a[srcindex]);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return result;\n</code><code class=\"line\">}\n</code>\n</div>\n<p>NOTE:\nWith arrays, the length of the resulting array is the\nsame as the length of the index list.  Negative numbers in the index list\nwill read from the end of the array.  Out of bound values will insert\nzeros, but this should be considered an error.</p>\n<p>NOTE:\nWith strings, the length of the resulting array may be less than the length of the index list.  Each index retrieves a character, not a byte, from the source string.  The result is thus a UTF-8 encoded string.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/reverse\">reverse()</a><div class=\"related-summary\">Returns an array or string in reverse order.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sort\">sort()</a><div class=\"related-summary\">Returns the array sorted in increasing order.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const matrix2[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const matrix3[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const matrix[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const float[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const int[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const vector4[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const string[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string[]"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const vector2[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "value",
                    "indices"
                ],
                "args": [
                    "const vector[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector[]"
            }
        ]
    },
    "resample_linear": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/resample_linear\">resample_linear</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\"></p><ul><li><code>float[] resample_linear(float[] input, int new_length)</code></li><li><code>vector2[] resample_linear(vector2[] input, int new_length)</code></li><li><code>vector[] resample_linear(vector[] input, int new_length)</code></li><li><code>vector4[] resample_linear(vector4[] input, int new_length)</code></li></ul>\n\n\n\n<p>Returns a new array of size new_length, uniformly sampled from the input array. Array elements are linearly interpolated from the input array.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "new_length"
                ],
                "args": [
                    "const float[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "input",
                    "new_length"
                ],
                "args": [
                    "const vector4[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "input",
                    "new_length"
                ],
                "args": [
                    "const vector2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "input",
                    "new_length"
                ],
                "args": [
                    "const vector[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector[]"
            }
        ]
    },
    "resize": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize</a></h1><p class=\"summary\">Sets the length of an array.</p><ul><li><code>void resize(int[] &amp;array, int size)</code></li><li><code>void resize(string[] &amp;array, int size)</code></li><li><code>void resize(float[] &amp;array, int size)</code></li><li><code>void resize(vector2[] &amp;array, int size)</code></li><li><code>void resize(vector[] &amp;array, int size)</code></li><li><code>void resize(vector4[] &amp;array, int size)</code></li><li><code>void resize(matrix2[] &amp;array, int size)</code></li><li><code>void resize(matrix3[] &amp;array, int size)</code></li><li><code>void resize(matrix[] &amp;array, int size)</code></li><li><code>void resize(bsdf[] &amp;array, int size)</code></li><li><code>void resize(light[] &amp;array, int size)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void resize(material[] &amp;array, int size)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>If you enlarge the array, intermediate values may be uninitialized\n(return <code>0</code> or <code>\"\"</code>).</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/append\">append()</a><div class=\"related-summary\">Adds an item to an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/len\">len()</a><div class=\"related-summary\">Returns the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export matrix2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export matrix3[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export matrix[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export bsdf[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export light[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export material[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export float[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export vector4[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export string[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export vector2[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "size"
                ],
                "args": [
                    "export vector[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            }
        ]
    },
    "resolvemissedray": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/resolvemissedray\">resolvemissedray</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the background color for rays that exit the scene.</p><ul><li><code>vector resolvemissedray(vector dir, float time, int mask, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns the color of the background environment for rays that exit the\nscene.  When no environment or background color is specified, any\nenvironment lights in the scene using the mode \"Ray Tracing Background\"\nwill be used to look up the environment color.  <code>mask</code> indicates the type\nof ray that is being resolved as an integer mask.</p>\n<p>To use the default background (environment light) for a reflection ray:</p>\n<div class=\"code-container\">\n<code class=\"line\">resolvemissedray(I, 0.0, PBR_REFLECT_MASK);\n</code>\n</div>\n<p>To define your own background:</p>\n<div class=\"code-container\">\n<code class=\"line\">resolvemissedray(I, 0.0, PBR_ALL_MASK, \"environment\", \"Mandril.rat\", \"envtint\", {1,2,1});\n</code><code class=\"line\">resolvemissedray(I, 0.0, PBR_ALL_MASK, \"background\", {1,1,1});\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "dir",
                    "time",
                    "mask"
                ],
                "args": [
                    "const vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "reverse": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/reverse\">reverse</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns an array or string in reverse order.</p><ul><li><code>string reverse(string value)</code></li><li><code>int[] reverse(int[] value)</code></li><li><code>string[] reverse(string[] value)</code></li><li><code>float[] reverse(float[] value)</code></li><li><code>vector2[] reverse(vector2[] value)</code></li><li><code>vector[] reverse(vector[] value)</code></li><li><code>vector4[] reverse(vector4[] value)</code></li><li><code>matrix2[] reverse(matrix2[] value)</code></li><li><code>matrix3[] reverse(matrix3[] value)</code></li><li><code>matrix[] reverse(matrix[] value)</code></li></ul>\n\n\n\n<p>Returns an array in the reverse order.</p>\n<p>The string version likewise returns a reversed string.</p>\n<p>For arrays, this is the equivalent of the following code:</p>\n<div class=\"code-container\">\n<code class=\"line\">arratype reverse(arraytype a)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return a[::-1];\n</code><code class=\"line\">}\n</code>\n</div>\n<p>NOTE:\nFor strings, this reverses the logical characters of the string, not the bytes of the string.  This means that UTF-8 strings are reversed as expected, but differs from the behavior of the <code>::-1</code> slice function.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/reorder\">reorder()</a><div class=\"related-summary\">Reorders items in an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sort\">sort()</a><div class=\"related-summary\">Returns the array sorted in increasing order.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector[]"
            }
        ]
    },
    "rgbtohsv": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rgbtohsv\">rgbtohsv</a></h1><span><span class=\"padder\"><span class=\"pillow\">color</span></span></span><p class=\"summary\">Convert RGB color space to HSV color space.</p><ul><li><code>vector rgbtohsv(float h, float s, float v)</code></li><li><code>vector rgbtohsv(vector hsv)</code></li></ul>\n\n\n\n<p>Convert RGB color space to HSV color space. A vector representing the\nHSV color is returned. The hue will be in the range 0 to 1.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "h",
                    "s",
                    "v"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "hsv"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "rgbtoxyz": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rgbtoxyz\">rgbtoxyz</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">color</span></span></span><p class=\"summary\">Convert a linear sRGB triplet to CIE XYZ tristimulus values.</p><ul><li><code>vector rgbtoxyz(vector rgb)</code></li></ul>\n\n\n\n<p>Convert a linear sRGB (Rec. 709) triplet to CIE XYZ tristimulus values.\nXYZ can be thought of as a 'universal color space'.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/xyztorgb\">xyztorgb()</a><div class=\"related-summary\">Convert CIE XYZ tristimulus values to a linear sRGB triplet.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/blackbody\">blackbody()</a><div class=\"related-summary\">Compute the color value of an incandescent black body.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "rgb"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "rint": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rint\">rint</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Rounds the number to the closest integer.</p><ul><li><code>float rint(float value)</code></li><li><code>vector2 rint(vector2 value)</code></li><li><code>vector rint(vector value)</code></li><li><code>vector4 rint(vector4 value)</code></li></ul>\n\n\n\n<p>Rounds the number to the closest integer.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "rotate": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rotate\">rotate</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Applies a rotation to the given matrix.</p><ul><li><code>void rotate(matrix2 &amp;mat, float amount)</code></li><li><code>void rotate(matrix3 &amp;mat, float amount, vector axis)</code></li><li><code>void rotate(matrix &amp;mat, float amount, vector axis)</code></li></ul>\n\n\n\n<p>applies a rotation to the given matrix. The angle must be given in\nradians and the axis must be normalized.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "mat",
                    "amount"
                ],
                "args": [
                    "export matrix2",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "mat",
                    "amount",
                    "axis"
                ],
                "args": [
                    "export matrix3",
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "mat",
                    "amount",
                    "axis"
                ],
                "args": [
                    "export matrix",
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "rotate_x_to": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rotate_x_to\">rotate_x_to</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Rotates a vector by a rotation that would bring the x-axis to a given direction.</p><ul><li><code>vector2 rotate_x_to(vector2 direction, vector2 v)</code></li><li><code>vector rotate_x_to(vector direction, vector v)</code></li><li><code>vector4 rotate_x_to(vector4 direction, vector4 v)</code></li></ul>\n\n\n\n<p><code>direction</code>:\nDirection to which a vector along the positive x-axis, e.g. (1,0,0),\nwould be rotated.  This does not need to be normalized.</p>\n<p><code>v</code>:\nVector to which to apply the rotation.</p>\n<p>Applies to <code>v</code>, the rotation that would move (1,0), (1,0,0), or (1,0,0,0) to\n<code>direction</code> most directly.</p>\n<p>In the case of <code>direction</code> being (-1,0,0), there are multiple distinct\nrotations that would move (1,0,0) to (-1,0,0) with a\nhalf turn rotation, so one is chosen arbitrarily, negating <code>v.x</code> and <code>v.z</code>.\nIn 2D, there is only one distinct rotation that moves (1,0) to (-1,0),\nequivalent to negating <code>v</code>.  In 4D, the rotation where <code>v</code> is negated\nis also chosen.</p>\n<p>This is used by functions like <code>sample_direction_cone</code> and <code>sample_sphere_cone</code>\nto rotate the cone centre from (1,0,0) to a given direction vector.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "direction",
                    "v"
                ],
                "args": [
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "direction",
                    "v"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "direction",
                    "v"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "rstrip": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/rstrip\">rstrip</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Strips trailing whitespace from a string.</p><ul><li><code>string rstrip(string value)</code></li><li><code>string rstrip(string value, string whitespace)</code></li></ul>\n\n\n\n<p>Returns a string with the trailing whitespace removed.  If\nwhitespace is provided, it is a string of characters that will be stripped.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/strip\">strip()</a><div class=\"related-summary\">Strips leading and trailing whitespace from a string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/lstrip\">lstrip()</a><div class=\"related-summary\">Strips leading whitespace from a string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "value",
                    "whitespace"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "sample_bsdf": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_bsdf\">sample_bsdf</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\">Samples a bsdf.</p><ul><li><code>void sample_bsdf(bsdf b, vector viewer, vector undocumented, int &amp;undocumented, vector &amp;out_vector, vector &amp;eval, float &amp;pdf, int &amp;type, float sx, float sy, int mask, ...)</code></li><li><code>void sample_bsdf(bsdf b, vector viewer, vector &amp;out_vector, vector &amp;eval, int &amp;type, float sx, float sy, ...)</code></li><li><code>void sample_bsdf(bsdf b, vector viewer, vector &amp;out_vector, vector &amp;eval, int &amp;type, float sx, float sy, int mask, ...)</code></li><li><code>void sample_bsdf(bsdf b, vector viewer, vector &amp;out_vector, vector &amp;eval, float &amp;pdf, int &amp;type, float sx, float sy, ...)</code></li><li><code>void sample_bsdf(bsdf b, vector viewer, vector &amp;out_vector, vector &amp;eval, float &amp;pdf, int &amp;type, float sx, float sy, int mask, ...)</code></li></ul>\n\n\n\n\n<p>\n<code>viewer</code>\n\n<div class=\"content\">\n<p>Vector toward viewer.</p>\n</div>\n</p>\n<p>\n<code>sx</code> and <code>sy</code>\n\n<div class=\"content\">\n<p>Random values, such as generated by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a>. Different\n    values of <code>sx</code> and <code>sy</code> translate into different random directions\n    to sample.</p>\n</div>\n</p>\n<p>\n<code>mask</code>\n\n<div class=\"content\">\n<p>A bitmask indicating which types of bounces to evaluate.\n    \n    \n    <p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n</p>\n</div>\n</p>\n\n<p>The function modifies the values of the following arguments:</p>\n\n<p>\n<code>out_vector</code>\n\n<div class=\"content\">\n<p>The sampled outgoing vector.</p>\n</div>\n</p>\n<p>\n<code>eval</code>\n\n<div class=\"content\">\n<p>The color, scaled by albedo, of the sampled component.  This is not the\n    same as the evaluated vector returned by the <code>eval_bsdf</code> operation -\n    here, <code>eval</code> will not vary with the outgoing sample direction.</p>\n</div>\n</p>\n<p>\n<code>type</code>\n\n<div class=\"content\">\n<p>The type of component sampled. This uses the same constants as in\n    the <code>mask</code> argument.</p>\n</div>\n</p>\n<p>\n<code>pdf</code>\n\n<div class=\"content\">\n<p>The sampling pdf for the sampled component.</p>\n</div>\n</p>\n\n<p>The <code>sample_bsdf</code> function passes keyword arguments to the BSDF being\nevaluated.  For custom BSDFs these keyword arguments are bound to shader\narguments (e.g. indicating whether the BSDF is being evaluated for direct or\nindirect illumination).  It\u2019s also possible for a BSDF to pass information back\nto <code>sample_bsdf</code>.  To indicate that a keyword argument value should be imported\nfrom the BSDF prefix the keyword with \"import:\".  For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">sample_bsdf(F, inI, outI, eval, type, sx, sy,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\"direct\", 0,                        // Specify indirect illumination\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\"import:sssmfp\", sssmfp,        // Read the exported sssmfp parameter\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0...\n</code><code class=\"line\">);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/albedo\">albedo()</a><div class=\"related-summary\">Returns the albedo (percentage of reflected light) for a bsdf given the outgoing light direction.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/eval_bsdf\">eval_bsdf()</a><div class=\"related-summary\">Evaluates a bsdf given two vectors.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/emission_bsdf\">emission_bsdf()</a><div class=\"related-summary\">Returns the emissive component of a bsdf.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "b",
                    "viewer",
                    "undocumented",
                    "undocumented",
                    "out_vector",
                    "eval",
                    "pdf",
                    "type",
                    "sx",
                    "sy",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "const vector",
                    "int",
                    "vector",
                    "vector",
                    "float",
                    "int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "out_vector",
                    "eval",
                    "pdf",
                    "type",
                    "sx",
                    "sy",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "vector",
                    "vector",
                    "float",
                    "int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "out_vector",
                    "eval",
                    "pdf",
                    "type",
                    "sx",
                    "sy"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "vector",
                    "vector",
                    "float",
                    "int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "out_vector",
                    "eval",
                    "type",
                    "sx",
                    "sy",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "vector",
                    "vector",
                    "int",
                    "const float",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "b",
                    "viewer",
                    "out_vector",
                    "eval",
                    "type",
                    "sx",
                    "sy"
                ],
                "args": [
                    "const bsdf",
                    "const vector",
                    "vector",
                    "vector",
                    "int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "sample_cauchy": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_cauchy\">sample_cauchy</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Samples the Cauchy (Lorentz) distribution.</p><ul><li><code>float sample_cauchy(float u)</code></li><li><code>float sample_cauchy(float scale, float u)</code></li><li><code>float sample_cauchy(float origscale, float minvalue, float maxvalue, float u)</code></li><li><code>vector2 sample_cauchy(float scale, vector2 u)</code></li><li><code>vector2 sample_cauchy(vector2 u)</code></li><li><code>vector sample_cauchy(vector u)</code></li><li><code>vector4 sample_cauchy(vector4 u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>A number, or multiple numbers, in the range [0,1).</p>\n</div>\n</p>\n<p>\n<code>scale</code>\n\n<div class=\"content\">\n<p>The scale of the distribution, or 1 if not specified.\n    This is the difference between the 50th percentile and the 75th percentile.</p>\n</div>\n</p>\n<p>\n<code>origscale</code>\n\n<div class=\"content\">\n<p>The scale the distribution would have, were it not for <code>minvalue</code>\n    and <code>maxvalue</code>, limiting the range.</p>\n</div>\n</p>\n<p>\n<code>minvalue</code>,<code>maxvalue</code>\n\n<div class=\"content\">\n<p>When given, instead of sampling the full Cauchy distribution,\n    the distribution with its range limited to <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/`minvalue`,`maxvalue`\">/vex/functions/`minvalue`,`maxvalue`</a> will be\n    sampled.</p>\n</div>\n</p>\n\n<p>Samples the Cauchy distribution with median zero and the specified <code>scale</code>,\noptionally with a <code>minvalue</code> and <code>maxvalue</code>.\nGiven uniform random <code>u</code> values in [0,1), this will return Cauchy\ndistributed random numbers.  The return value will be monotone increasing\nwith respect to <code>u</code>.  Note that without limits, the Cauchy distribution has\nno defined mean or variance, which can cause statistical problems if not\ndealt with carefully.</p>\n<p>The <code>vector2</code>, <code>vector</code>, and <code>vector4</code> versions sample\nmultivariate Cauchy distributions with median 0 and scale 1.  The\ndistribution of these vectors is forced to be isotropic, i.e. rotating\nthe distribution won\u2019t change it, which can be useful in simulations.\nThis wouldn\u2019t be the case if one generated components of the vectors as\nindependent samples of the univariate Cauchy distribution.\nTo add a maximum distance from the origin, while keeping the distribution\nisotropic, use:</p>\n<div class=\"code-container\">\n!vex\nsample_cauchy(1,0,maxdist,u.x) * sample_direction_uniform(set(u.y,u.z))\n</div>\n<p>The 2D Cauchy distribution is the distribution of photons hitting a plane,\ncoming from a point light that is distance <code>scale</code> from the plane.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rand\">rand()</a><div class=\"related-summary\">Creates a random number between 0 and 1 from a seed.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_exponential\">sample_exponential()</a><div class=\"related-summary\">Samples the exponential distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_normal\">sample_normal()</a><div class=\"related-summary\">Samples the normal (Gaussian) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal\">sample_lognormal()</a><div class=\"related-summary\">Samples the log-normal distribution based on parameters of the underlying normal distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal_by_median\">sample_lognormal_by_median()</a><div class=\"related-summary\">Samples the log-normal distribution based on median and standard deviation.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_discrete\">sample_discrete()</a><div class=\"related-summary\">Returns an integer, either uniform or weighted, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "scale",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "origscale",
                    "minvalue",
                    "maxvalue",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "scale",
                    "u"
                ],
                "args": [
                    "const float",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sample_cdf": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_cdf\">sample_cdf</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\">Samples a CDF based on a random variable.</p><ul><li><code>void sample_cdf(float[] cdf, float u, int &amp;index, float &amp;x)</code></li><li><code>void sample_cdf(float[] cdf, float u, int &amp;index, float &amp;x, float &amp;pdf)</code></li><li><code>int sample_cdf(float[] cdf, float u)</code></li></ul>\n\n\n\n<p>Sample a CDF based on a discrete distribution.</p>\n\n<p>\n<code>cdf</code>\n\n<div class=\"content\">\n<p>The CDF to sample from.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>A uniform random variable (must be in range &lt;0,1&gt;).</p>\n</div>\n</p>\n<p>\n<code>index</code>\n\n<div class=\"content\">\n<p>The index of the CDF element that was sampled.</p>\n</div>\n</p>\n\n<p><code>x</code></p>\n<p><code>pdf</code></p>\n<p>CDFs are useful when sampling from distributions. For example, a CDF of\nlight source power could be created. This would allow sampling\nof lights with a probability based on power. This is an example of a\ndiscrete CDF, where sampling selects among a fixed set of probabilities.\nSuch a CDF could be created as follows:</p>\n<div class=\"code-container\">\n<code class=\"line\">// Iterate over all lights, sampling their power\n</code><code class=\"line\">int li[] = getlights();\n</code><code class=\"line\">float values[];\n</code><code class=\"line\">resize(values, len(li));\n</code><code class=\"line\">int nsamples = 256;\n</code><code class=\"line\">int sid = israytrace ? SID : newsampler();\n</code><code class=\"line\">vector s, pos, clr;\n</code><code class=\"line\">float scale;\n</code><code class=\"line\">for (int i = 0; i &lt; len(li); i++)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0for (int j = 0; j &lt; nsamples; j++)\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nextsample(sid, s.x, s.y, \"mode\", \"nextpixel\");\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sample_light(li[i], P, s, Time, pos, clr, scale);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values[i] += luminance(clr);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0values[i] /= nsamples;\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">// Create a CDF of the power distribution\n</code><code class=\"line\">float cdf[] = create_cdf(values);\n</code><code class=\"line\">\n</code><code class=\"line\">// Randomly select a light based on power distribution\n</code><code class=\"line\">nextsample(sid, s.x, s.y, \"mode\", \"nextpixel\");\n</code><code class=\"line\">int index = 0;\n</code><code class=\"line\">sample_cdf(cdf, s.x, index);\n</code><code class=\"line\">\n</code><code class=\"line\">// Do something with the selected light\n</code><code class=\"line\">// li[index] ...\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/create_cdf\">create_cdf()</a><div class=\"related-summary\">Creates a CDF from an array of input PDF values.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/create_pdf\">create_pdf()</a><div class=\"related-summary\">Creates a PDF from an array of input values.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "cdf",
                    "u"
                ],
                "args": [
                    "const float[]",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "cdf",
                    "u",
                    "index",
                    "x"
                ],
                "args": [
                    "const float[]",
                    "const float",
                    "int",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "cdf",
                    "u",
                    "index",
                    "x",
                    "pdf"
                ],
                "args": [
                    "const float[]",
                    "const float",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "sample_circle_arc": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</p><ul><li><code>vector2 sample_circle_arc(vector2 center, float maxangle, float u)</code></li></ul>\n\n\n\n\n<p>\n<code>center</code>\n\n<div class=\"content\">\n<p>Direction in the center of the arc.  This does not need to be normalized.</p>\n</div>\n</p>\n<p>\n<code>maxangle</code>\n\n<div class=\"content\">\n<p>Maximum angle, in radians, away from <code>center</code> that any sample of the arc\n    will be, so long as <code>u</code> is between 0 and 1.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Number between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a unit vector2, i.e. a vector2 of length 1, based on <code>u</code>.\nGiven uniform random <code>u</code> values in [0,1), the returned unit vectors will be\nuniform random and continuous with respect to <code>u</code> on the edge of the unit circle,\nin the arc within <code>maxangle</code> of the direction indicated by <code>center</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "center",
                    "maxangle",
                    "u"
                ],
                "args": [
                    "const vector2",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            }
        ]
    },
    "sample_circle_edge_uniform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</p><ul><li><code>vector2 sample_circle_edge_uniform(float u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Number between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a unit vector2, i.e. a vector2 of length 1, based on <code>u</code>.\nGiven uniform random <code>u</code> values in [0,1), the returned unit vectors will be\nuniform random and continuous with respect to <code>u</code> on the edge of the unit circle.\nSpecifically, it returns <code>(cos(angle),sin(angle))</code>, where <code>angle</code> is <code>2*pi*u</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            }
        ]
    },
    "sample_circle_slice": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</p><ul><li><code>vector2 sample_circle_slice(vector2 center, float maxangle, vector2 u)</code></li></ul>\n\n\n\n\n<p>\n<code>center</code>\n\n<div class=\"content\">\n<p>Direction in the center of the slice.  This does not need to be normalized.</p>\n</div>\n</p>\n<p>\n<code>maxangle</code>\n\n<div class=\"content\">\n<p>Maximum angle, in radians, away from <code>center</code> that any sample of the slice\n    will be, so long as all <code>u</code> values are between 0 and 1.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Pair of numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a vector2 of length &lt; 1, based on <code>u</code>.\nGiven uniform random <code>u</code> pairs of values in [0,1), the returned vectors will be\nuniform random and continuous with respect to <code>u</code> inside the unit circle,\nin the slice within <code>maxangle</code> of the direction indicated by <code>center</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "center",
                    "maxangle",
                    "u"
                ],
                "args": [
                    "const vector2",
                    "const float",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            }
        ]
    },
    "sample_circle_uniform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</p><ul><li><code>vector2 sample_circle_uniform(vector2 u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Pair of numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a vector2 of length &lt; 1, based on <code>u</code>.\nGiven uniform random <code>u</code> pairs of values in [0,1), the returned vectors will be\nuniform random and continuous with respect to <code>u</code> inside the unit circle.\nSpecifically, it returns <code>scale*(cos(angle),sin(angle))</code>, where <code>angle</code> is <code>2*pi*u.x</code>\nand <code>scale</code> is <code>sqrt(u.y)</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            }
        ]
    },
    "sample_direction_cone": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</p><ul><li><code>vector sample_direction_cone(vector center, float maxangle, vector2 u)</code></li></ul>\n\n\n\n\n<p>\n<code>center</code>\n\n<div class=\"content\">\n<p>Direction in the center of the cone.  This does not need to be normalized.</p>\n</div>\n</p>\n<p>\n<code>maxangle</code>\n\n<div class=\"content\">\n<p>Maximum angle, in radians, away from <code>center</code> that any sample of the cone\n    will be, so long as all <code>u</code> values are between 0 and 1.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Pair of numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a unit vector, i.e. a vector of length 1, based on <code>u</code>.\nGiven uniform random <code>u</code> pairs of values in [0,1), the returned unit vectors will be\nuniform random and continuous with respect to <code>u</code> on the surface of the unit sphere,\nin the area within <code>maxangle</code> of the direction indicated by <code>center</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "center",
                    "maxangle",
                    "u"
                ],
                "args": [
                    "const vector",
                    "const float",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sample_direction_uniform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</p><ul><li><code>vector sample_direction_uniform(vector2 u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Pair of numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a unit vector, i.e. a vector of length 1, based on <code>u</code>.\nGiven uniform random <code>u</code> pairs of values in [0,1), the returned unit vectors will be\nuniform random and continuous with respect to <code>u</code> on the surface of the unit sphere.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sample_discrete": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_discrete\">sample_discrete</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns an integer, either uniform or weighted, given a uniform number between 0 and 1.</p><ul><li><code>int sample_discrete(int nvalues, float u)</code></li><li><code>int sample_discrete(float[] weights, float u)</code></li></ul>\n\n\n\n\n<p>\n<code>nvalues</code>\n\n<div class=\"content\">\n<p>The returned integer will be uniform in the range <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/0,`nvalues-1`\">/vex/functions/0,`nvalues-1`</a>,\n    returning 0 if <code>u==0</code>, and returning <code>nvalues-1</code> if <code>u==1</code>.  The\n    output will be clamped to that range in case <code>u</code> is out of the range\n    [0,1), to reduce the risk of roundoff on <code>u</code> causing problems.</p>\n</div>\n</p>\n<p>\n<code>weights</code>\n\n<div class=\"content\">\n<p>Relative weights, (the sum does not need to be 1), of each integer\n    value in the range <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/0,`len(weights)-1`\">/vex/functions/0,`len(weights)-1`</a>.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>A number between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns an integer, based on <code>u</code>, either uniformly weighted from 0 to\n<code>nvalues-1</code>, or weighted based on the <code>weights</code> array from 0 to\n<code>len(weights)-1</code>.\nGiven uniform random <code>u</code> values in [0,1), the version taking <code>nvalues</code>\nwill return uniform random integers in <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/0,`nvalues-1`\">/vex/functions/0,`nvalues-1`</a>, and the version\ntaking <code>weights</code> will return random integers in <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/0,`len(weights)-1`\">/vex/functions/0,`len(weights)-1`</a>, where\nthe probability of <code>i</code> is <code>weights[i]/sum_of_weights</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rand\">rand()</a><div class=\"related-summary\">Creates a random number between 0 and 1 from a seed.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_normal\">sample_normal()</a><div class=\"related-summary\">Samples the normal (Gaussian) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_exponential\">sample_exponential()</a><div class=\"related-summary\">Samples the exponential distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cauchy\">sample_cauchy()</a><div class=\"related-summary\">Samples the Cauchy (Lorentz) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal\">sample_lognormal()</a><div class=\"related-summary\">Samples the log-normal distribution based on parameters of the underlying normal distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal_by_median\">sample_lognormal_by_median()</a><div class=\"related-summary\">Samples the log-normal distribution based on median and standard deviation.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "nvalues",
                    "u"
                ],
                "args": [
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "weights",
                    "u"
                ],
                "args": [
                    "const float[]",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "sample_exponential": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_exponential\">sample_exponential</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Samples the exponential distribution.</p><ul><li><code>float sample_exponential(float u)</code></li><li><code>float sample_exponential(float mean, float u)</code></li><li><code>float sample_exponential(float origmean, float maxvalue, float u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>A number in the range [0,1).</p>\n</div>\n</p>\n<p>\n<code>mean</code>\n\n<div class=\"content\">\n<p>The mean of the distribution, or 1 if not specified.</p>\n</div>\n</p>\n<p>\n<code>origmean</code>\n\n<div class=\"content\">\n<p>The mean the distribution would have, were it not for <code>maxvalue</code>,\n    limiting the range.</p>\n</div>\n</p>\n<p>\n<code>maxvalue</code>\n\n<div class=\"content\">\n<p>When given, instead of sampling the full exponential distribution,\n    the distribution with its range limited to <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/0,`maxvalue`\">/vex/functions/0,`maxvalue`</a> will be\n    sampled.</p>\n</div>\n</p>\n\n<p>Samples the exponential distribution with the specified <code>mean</code>, optionally\nwith a <code>maxvalue</code>.\nGiven uniform random <code>u</code> values in [0,1), this will return exponentially\ndistributed random numbers.  The return value will be monotone increasing\nwith respect to <code>u</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rand\">rand()</a><div class=\"related-summary\">Creates a random number between 0 and 1 from a seed.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_normal\">sample_normal()</a><div class=\"related-summary\">Samples the normal (Gaussian) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cauchy\">sample_cauchy()</a><div class=\"related-summary\">Samples the Cauchy (Lorentz) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal\">sample_lognormal()</a><div class=\"related-summary\">Samples the log-normal distribution based on parameters of the underlying normal distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal_by_median\">sample_lognormal_by_median()</a><div class=\"related-summary\">Samples the log-normal distribution based on median and standard deviation.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_discrete\">sample_discrete()</a><div class=\"related-summary\">Returns an integer, either uniform or weighted, given a uniform number between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "mean",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "origmean",
                    "maxvalue",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "sample_geometry": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_geometry\">sample_geometry</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Samples geometry in the scene and returns information from the shaders of surfaces that were sampled.</p><ul><li><code>int sample_geometry(vector origin, vector sample, float time, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>The sample_geometry operation in VEX is used to distribute a single sample\npoint on geometry objects in the scene, and to execute the surface shader\nat that point.  The operation is similar to the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/trace\" title=\"Sends a ray from P along the normalized vector D.\">trace()</a> and\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/gather\" title=\"Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.\">gather()</a> functions in that it accepts a variadic argument list of\nshader outputs to be exported by the operation.  However, <code>sample_geometry</code>\nis different from raytracing functions in that it does not actually send a\nray into the scene to determine where shaders should be run.  The <code>origin</code>\nand <code>sample</code> parameters have different meanings depending on the\ntype of distribution.  <code>time</code> can be used with motion blur to distribute\nsample points in time as well as in space.</p>\n\n<h2 class=\"label heading\" id=\"area-distribution\">\n            \n            Area Distribution\n        </h2>\n<div class=\"content\" id=\"area-distribution-body\">\n<p>In this mode, points will be distributed over multiple primitives according to\ntheir area.  More samples will be placed on primitives with large surface\nareas than on primitives with small surface areas.  The <code>sample</code> parameter\nshould contain uniform random variables in the range of 0 to 1.  The\n<code>origin</code> parameter has no effect.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"parametric-distribution\">\n            \n            Parametric Distribution\n        </h2>\n<div class=\"content\" id=\"parametric-distribution-body\">\n<p>In this mode, primitive and subdivision IDs along with parametric surface\ncoordinates are mapped to surface positions.  This mode is useful when trying\nto maintain a coherent set of surface positions (for example, in a point cloud) across multiple frames because the same primitive ID, subdivision ID, s, and t coordinates map to similar surface positions even when a mesh is deforming.\nThe <code>sample</code> parameter contains the s and t coordinates (in the first and\nsecond components), while the <code>origin</code> parameter contains the primitive and\nsubdivision IDs (again, in the first and second components).</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"solid-angle-distribution\">\n            \n            Solid Angle Distribution\n        </h2>\n<div class=\"content\" id=\"solid-angle-distribution-body\">\n<p>This mode is similar to the \"area\" mode, except that points on a particular\nprimitive are distributed according to solid angle rather than area.  More\nspecifically, samples will be distributed according to hemispherical coverage\nrelative to <code>origin</code>.  The <code>sample</code> parameter should contain uniform\nrandom variables in the range of 0 to 1.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"details\">\n            \n            Details\n        </h2>\n<div class=\"content\" id=\"details-body\">\n\n<h3 class=\"label heading\" id=\"variadic-gather-arguments\">\n            \n            Variadic Gather Arguments\n        </h3>\n<div class=\"content\" id=\"variadic-gather-arguments-body\">\n<p>There are three types of arguments you can pass to the gather loop: arguments controlling how to send rays, what information to pass to the shaders of other surfaces hit by the ray, and what information to import back from each sent ray.</p>\n\n<h4 class=\"label heading\" id=\"controlling-how-to-send-the-rays\">\n            \n            Controlling how to send the rays\n        </h4>\n<div class=\"content\" id=\"controlling-how-to-send-the-rays-body\">\n<p>These argument pairs control how the gather statement sends rays into the scene.</p>\n\n<p>See also the Pipeline option section in the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/gather\" title=\"Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.\">gather()</a> function help.</p>\n</div>\n\n\n<h4 class=\"label heading\" id=\"sending-information-to-the-hit-surface-s-shader\">\n            \n            Sending information to the hit surface\u2019s shader\n        </h4>\n<div class=\"content\" id=\"sending-information-to-the-hit-surface-s-shader-body\">\n<p>Using a keyword in the form <code>\"send:<code>name</code>\", value</code>, you can pass data from the originating surface to surfaces which are intersected by the ray. These arguments pass any values you want.</p>\n<div class=\"code-container\">\n<code class=\"line\">gather(P, dir, \"send:N\", normalize(N)) { ... }\n</code>\n</div>\n<p>You can extract this passed data on the receiving end (that is, in the surface being hit by the ray) with the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/rayimport\" title=\"Imports a value sent by a shader in a gather loop.\">rayimport()</a> function. The first argument is the name (without the <code>send:</code> prefix) and the second argument is a variable in which to store the imported value.</p>\n<p><code>int rayimport(string name, <code>type</code> &amp;value)</code></p>\n<p><code>rayimport</code> returns <code>1</code> if the value was imported successfully.</p>\n</div>\n\n\n<h4 class=\"label heading\" id=\"importing-information-back-from-the-ray\">\n            \n            Importing information back from the ray\n        </h4>\n<div class=\"content\" id=\"importing-information-back-from-the-ray-body\">\n<p>You can specify names of global or exported variables to import from the hit shader in the form <code>\"<code>varname</code>\", &amp;var</code>, typically including <code>Cf</code> (color vector of surface hit) and <code>Of</code> (opacity vector of surface hit).</p>\n<div class=\"code-container\">\n<code class=\"line\">vector  hitcf;\n</code><code class=\"line\">gather(P, dir, \"bias\", 0.01, \"Cf\", hitcf) {...}\n</code>\n</div>\n<p>In addition, you can import the following special keywords to get information about the ray itself:</p>\n\n<p>By default, Houdini composites the global variables using opacity blending. In some cases, it\u2019s more useful to get the value from the closest surface (regardless of whether it\u2019s transparent). You can use the special <code>samplefilter</code> keyword with a string value of either <code>closest</code> or <code>opacity</code> to control whether the value of a global is from the closest surface or opacity blended.</p>\n<p>When the <code>samplefilter</code> keyword is encountered in the argument list, <em>all following</em> import variables will use the specified filtering mode. You can specify multiple <code>samplefilter</code> arguments in a single gather statement to filter different variables in different ways.</p>\n<p>The current types of allowed for <code>samplefilter</code> are</p>\n\n<p>\n<code>minimum</code>\n\n<div class=\"content\">\n<p>Take the minimum value of all the samples.  Note that with tuple values, the minimum value of each component will be used.</p>\n</div>\n</p>\n<p>\n<code>maximum</code>\n\n<div class=\"content\">\n<p>Take the maximum value of all the samples.  Note that with tuple values, the maximum value of each component will be used.</p>\n</div>\n</p>\n<p>\n<code>opacity</code>\n\n<div class=\"content\">\n<p>Composite samples using the over operation.</p>\n</div>\n</p>\n<p>\n<code>closest</code>\n\n<div class=\"content\">\n<p>This is the default behavior, returning only the closest surface.</p>\n</div>\n</p>\n<p>\n<code>screendoor</code>\n\n<div class=\"content\">\n<p>Use stochastic compositing of the samples.</p>\n</div>\n</p>\n<p>\n<code>sum</code>\n\n<div class=\"content\">\n<p>Return the sum of the values for all samples.</p>\n</div>\n</p>\n<p>\n<code>sum_square</code>\n\n<div class=\"content\">\n<p>Return the sum of the squares of the values of all samples.</p>\n</div>\n</p>\n<p>\n<code>sum_reciprocal</code>\n\n<div class=\"content\">\n<p>Return the sum of the reciprocals of each sample.</p>\n</div>\n</p>\n\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>When using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_geometry\" title=\"Samples geometry in the scene and returns information from the shaders of surfaces that were sampled.\">sample_geometry()</a>, the default <code>samplefilter</code> is set to <code>closest</code> by default, since opacity blending only works when compositing data along a ray.</p>\n</div>\n</div>\n</div>\n<div class=\"code-container\">\n<code class=\"line\">gather(P, dir,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"opacity\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cf\", hitCf,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Of\", hitOf,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"closest\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"P\", hitP,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"N\", hitN)\n</code><code class=\"line\">\n</code><code class=\"line\">trace(pos, dir, time,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Composite the bsdf of the hit surfaces using stochastic transparency\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"screendoor\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"F\", hitF,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// But find the closest sample's position\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"closest\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"P\", hitP);\n</code>\n</div>\n<p>It is also possible to retrieve information about more than one hit along\nthe ray by requesting data in an array variable in VEX.  When an imported\nvalue is of an array type, the trace() function will automatically append\nan entry in the array for each individual hit point that was composited\nduring ray tracing.  For the <code>opacity</code> <code>samplefilter</code>, an entry will be\ncreated in the array for each semi-transparent sample encountered until\nfull opacity is reached.  When using array outputs, it may also be useful\nto use the <code>all</code> <code>samplefilter</code>, which will cause all hits along the ray to\nbe inserted regardless of whether the opacity limit was exceeded.</p>\n<div class=\"code-container\">\n<code class=\"line\">// Find the position and normal for all hit points along the ray,\n</code><code class=\"line\">// regardless of visibility.\n</code><code class=\"line\">vector a_pos[];\n</code><code class=\"line\">vector a_nml[];\n</code><code class=\"line\">trace(P, dir, Time,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"all\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"P\", a_pos,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"N\", a_nml);\n</code>\n</div>\n</div>\n\n</div>\n\n\n<h3 class=\"label heading\" id=\"pipeline-option\">\n            \n            Pipeline option\n        </h3>\n<div class=\"content\" id=\"pipeline-option-body\">\n<p>As you specify variables, you can intersperse <code>pipeline</code> keyword options to control where in the pipeline to fill out read/write variables. The value can be one of <code>surface</code>, <code>atmosphere</code>, or <code>displacement</code>. You can specify the <code>pipeline</code> option multiple times. Each use of the option affects any variables specified after it (up to the next usage of <code>pipeline</code> if any).</p>\n<div class=\"code-container\">\n<code class=\"line\">gather(p, d, \"pipeline\", \"surface\", \"Cf\", surfCf,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"pipeline\", \"atmosphere\" \"Cf\", fogCf, \"P\", hitP)\n</code>\n</div>\n</div>\n\n\n<h3 class=\"label heading\" id=\"light-mask\">\n            \n            Light mask\n        </h3>\n<div class=\"content\" id=\"light-mask-body\">\n\n<p>\n<code>lightmask</code>\n\n<div class=\"content\">\n<p>You can use the <code>lightmask</code> keyword argument to pass a light name\n    pattern to limit the set of lights used to illuminate the hit surface.\n    This allows the tracing surface to control the lighting of the hit\n    surface.  The <code>\"scope:default\"</code> value will cause the <code>lightmask</code>\n    argument to use the default light mask for the current context - as if\n    the argument were not specified.</p>\n<div class=\"code-container\">\n..., \"lightmask\", \"hotlights*\");\n\n</div></div>\n</p>\n\n</div>\n\n</div>\n\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<p>The following example demonstrates how <code>sample_geometry</code> can be used to\nilluminate one surface from another.  Rather than using a light source,\nillumination is gathered from other surfaces in the scene named\n<code>/obj/sphere_object*</code> and will illuminate any surfaces with the geolight\nsurface shader assigned.</p>\n<p>A few observations about the shader:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nThe <code>ray:solidangle</code> output is used to scale back geometry sample contributions by the solid angle subtended by the hit surface.  This ensures that the result of using sample_geometry will match physically based irradiance.\n</li>\n<li class=\"bullet \">\nThe <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/trace\" title=\"Sends a ray from P along the normalized vector D.\">trace()</a> instruction is used for shadowing\n</li>\n<li class=\"bullet \">\nHigh-quality sampling patterns from <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/newsampler\">newsampler()</a> and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a> are used for antialiasing\n</li>\n</ul>\n<div class=\"code-container\">\n<code class=\"line\">surface\n</code><code class=\"line\">geolight(int nsamples = 64)\n</code><code class=\"line\">{\n</code><code class=\"line\">vector        sam;\n</code><code class=\"line\">vector        clr, pos;\n</code><code class=\"line\">float        angle, sx, sy;\n</code><code class=\"line\">int                sid;\n</code><code class=\"line\">int                i;\n</code><code class=\"line\">\n</code><code class=\"line\">sid = newsampler();\n</code><code class=\"line\">\n</code><code class=\"line\">Cf = 0;\n</code><code class=\"line\">for (i = 0; i &lt; nsamples; i++)\n</code><code class=\"line\">{\n</code><code class=\"line\">nextsample(sid, sx, sy, \"mode\", \"qstrat\");\n</code><code class=\"line\">sam = set(sx, sy, 0.0);\n</code><code class=\"line\">if (sample_geometry(P, sam, Time,\n</code><code class=\"line\">\"distribution\", \"solidangle\",\n</code><code class=\"line\">\"scope\", \"/obj/sphere_object*\",\n</code><code class=\"line\">\"ray:solidangle\", angle, \"P\", pos, \"Cf\", clr))\n</code><code class=\"line\">{\n</code><code class=\"line\">if (!trace(P, normalize(pos-P), Time,\n</code><code class=\"line\">\"scope\", \"/obj/sphere_object*\",\n</code><code class=\"line\">\"maxdist\", length(pos-P)-0.01))\n</code><code class=\"line\">{\n</code><code class=\"line\">clr *= angle / (2*PI);\n</code><code class=\"line\">clr *= max(dot(normalize(pos-P), normalize(N)), 0);\n</code><code class=\"line\">}\n</code><code class=\"line\">else\n</code><code class=\"line\">clr = 0;\n</code><code class=\"line\">}\n</code><code class=\"line\">Cf += clr;\n</code><code class=\"line\">}\n</code><code class=\"line\">Cf /= nsamples;\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/gather\">gather()</a><div class=\"related-summary\">Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/newsampler\">newsampler()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "origin",
                    "sample",
                    "time"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "sample_hemisphere": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_hemisphere\">sample_hemisphere</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a unit vector, optionally biased, within a hemisphere, given a vector2 of uniform numbers between 0 and 1.</p><ul><li><code>vector sample_hemisphere(float bias, vector2 u)</code></li><li><code>vector sample_hemisphere(vector2 u)</code></li><li><code>vector sample_hemisphere(vector center, float bias, vector2 u)</code></li><li><code>vector sample_hemisphere(vector center, vector2 u)</code></li></ul>\n\n\n\n\n<p>\n<code>center</code>\n\n<div class=\"content\">\n<p>Direction in the center of the hemisphere.  This does not need to be normalized.\n    If not specified, the center direction is (1,0,0), along the x-axis.</p>\n</div>\n</p>\n<p>\n<code>bias</code>\n\n<div class=\"content\">\n<p>Bias toward the center direction, between -1 and infinity, with 0 being unbiased,\n    -1 forcing all points to the horizon, and infinity forcing all points to center.\n    When supplied, <code>u.y</code> is simply replaced with <code>1-pow(1-u.y, 1.0/(bias+1.0))</code>.  To\n    get a bias similar to this when using the more general <code>sample_direction_cone</code>,\n    <code>sample_sphere_cone</code>, and related functions, apply the same change to <code>u.x</code>\n    before calling those functions.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Pair of numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a unit vector, i.e. a vector of length 1, based on <code>u</code>.\nGiven uniform random <code>u</code> pairs of values in [0,1), if <code>bias</code> is 0, the\nreturned unit vectors will be uniform random and continuous with respect to\n<code>u</code> on the surface of the unit hemisphere centered at <code>center</code>.  If bias is\ngreater than zero, the unit vectors will be smoothly biased toward <code>center</code>.\nIf bias is between -1 and 0, the unit vectors will be biased away from\n<code>center</code>, toward the horizon.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rand\">rand()</a><div class=\"related-summary\">Creates a random number between 0 and 1 from a seed.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "bias",
                    "u"
                ],
                "args": [
                    "const float",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "center",
                    "bias",
                    "u"
                ],
                "args": [
                    "const vector",
                    "const float",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "center",
                    "u"
                ],
                "args": [
                    "const vector",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sample_hypersphere_cone": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</p><ul><li><code>vector4 sample_hypersphere_cone(vector4 center, float maxangle, vector4 u)</code></li></ul>\n\n\n\n\n<p>\n<code>center</code>\n\n<div class=\"content\">\n<p>Direction in the center of the cone.  This does not need to be normalized.</p>\n</div>\n</p>\n<p>\n<code>maxangle</code>\n\n<div class=\"content\">\n<p>Maximum angle, in radians, away from <code>center</code> that any sample of the cone\n    will be, so long as all <code>u</code> values are between 0 and 1.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Four numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a vector4 of length &lt; 1, based on <code>u</code>.\nGiven uniform random <code>u</code> vectors of four values in [0,1), the returned vectors will be\nuniform random and continuous with respect to <code>u</code> inside the unit hypersphere,\nin the hypervolume within <code>maxangle</code> of the direction indicated by <code>center</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "center",
                    "maxangle",
                    "u"
                ],
                "args": [
                    "const vector4",
                    "const float",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "sample_hypersphere_uniform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</p><ul><li><code>vector4 sample_hypersphere_uniform(vector4 u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Four numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a vector4 of length &lt; 1, based on <code>u</code>.\nGiven uniform random <code>u</code> vectors of four values in [0,1), the returned vectors will be\nuniform random and continuous with respect to <code>u</code> inside the unit hypersphere.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "sample_light": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_light\">sample_light</a></h1><span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\">Samples a 3D position on a light source and runs the light shader at that point.</p><ul><li><code>int sample_light(int lightid, vector pos, vector sam, float time, vector &amp;pos, vector &amp;clr, float &amp;scale, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>The return value from <code>sample_light</code> is a bitmask indicating which types of\nbounces the light affects.</p>\n<p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n<p>The function takes the following arguments:</p>\n\n<p>\n<code>lightid</code>\n\n<div class=\"content\">\n<p>An integer identifying a light. You can get a list of light IDs for lights affecting the currently shaded surface with <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlights\" title=\"Returns an array of light identifiers for the currently shaded surface.\">getlights()</a>.</p>\n</div>\n</p>\n<p>\n<code>pos</code>\n\n<div class=\"content\">\n<p>The surface point from which lights should be sampled.  Area light sources will attempt to distribute samples by solid angle from the position - that is, light geometry that is closer to the position will receive more samples.</p>\n</div>\n</p>\n<p>\n<code>sam</code>\n\n<div class=\"content\">\n<p>A vector of random values, such as those generated by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a>. Currently only the first 2 components of <code>sam</code> are used.  Different values of <code>sam</code> translate into different random positions on the geometry of the light source.</p>\n</div>\n</p>\n<p>\n<code>time</code>\n\n<div class=\"content\">\n<p>Time to shade at.</p>\n</div>\n</p>\n\n<p>The function modifies the values of the following arguments:</p>\n\n<p>\n<code>pos</code>\n\n<div class=\"content\">\n<p>The sampled position on the light source.</p>\n</div>\n</p>\n<p>\n<code>clr</code>\n\n<div class=\"content\">\n<p>The light color set by the light shader.</p>\n</div>\n</p>\n<p>\n<code>scale</code>\n\n<div class=\"content\">\n<p>The light average hemispherical intensity (for area lights).</p>\n</div>\n</p>\n\n<p>If you are using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_light\" title=\"Samples a 3D position on a light source and runs the light shader at that point.\">sample_light()</a> to generate light colors, for example\nto reproduce the <code>Cl</code> values that would be produced by a <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a>\nloop, you will need to normalize <code>clr</code> to <code>scale</code>:</p>\n<div class=\"code-container\">\n<code class=\"line\">clr *= scale / luminance(clr);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlights\">getlights()</a><div class=\"related-summary\">Returns an array of light identifiers for the currently shaded surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/intersect_lights\">intersect_lights()</a><div class=\"related-summary\">Finds the nearest intersection of a ray with any of a list of (area) lights and runs the light shader at the intersection point.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lightid",
                    "pos",
                    "sam",
                    "time",
                    "pos",
                    "clr",
                    "scale"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector",
                    "const float",
                    "vector",
                    "vector",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "sample_lognormal": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal\">sample_lognormal</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Samples the log-normal distribution based on parameters of the underlying normal distribution.</p><ul><li><code>float sample_lognormal(float mu, float sigma, float u)</code></li><li><code>float sample_lognormal(float mu, float sigma, float minvalue, float maxvalue, float u)</code></li></ul>\n\n\n\n\n<p>\n<code>mu</code>\n\n<div class=\"content\">\n<p>The mean of the underlying normal distribution.</p>\n</div>\n</p>\n<p>\n<code>sigma</code>\n\n<div class=\"content\">\n<p>The standard deviation of the underlying normal distribution.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>A number in the range [0,1).</p>\n</div>\n</p>\n<p>\n<code>minvalue</code>,<code>maxvalue</code>\n\n<div class=\"content\">\n<p>When given, instead of sampling the full log-normal distribution,\n    the distribution with its range limited to <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/`minvalue`,`maxvalue`\">/vex/functions/`minvalue`,`maxvalue`</a> will be\n    sampled.</p>\n</div>\n</p>\n\n<p>Samples the log-normal distribution with the specified <code>mu</code> and <code>sigma</code>, optionally\nwith a <code>minvalue</code> and <code>maxvalue</code>.  To use parameters that are more understandable,\n<code>median</code> and <code>stddev</code>, please use <code>sample_lognormal_by_median</code>.\nGiven uniform random <code>u</code> values in [0,1), this will return log-normally\ndistributed random numbers.  The return value will be monotone increasing\nwith respect to <code>u</code>.</p>\n<p>The log-normal distribution is sampled by sampling a normal distribution\nand exponentiating the result, giving a value that is always positive, so\nthis distribution is often used for generating random point scales.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal_by_median\">sample_lognormal_by_median()</a><div class=\"related-summary\">Samples the log-normal distribution based on median and standard deviation.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_normal\">sample_normal()</a><div class=\"related-summary\">Samples the normal (Gaussian) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rand\">rand()</a><div class=\"related-summary\">Creates a random number between 0 and 1 from a seed.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_exponential\">sample_exponential()</a><div class=\"related-summary\">Samples the exponential distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cauchy\">sample_cauchy()</a><div class=\"related-summary\">Samples the Cauchy (Lorentz) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_discrete\">sample_discrete()</a><div class=\"related-summary\">Returns an integer, either uniform or weighted, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/log\">log()</a><div class=\"related-summary\">Returns the natural logarithm of the argument.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/exp\">exp()</a><div class=\"related-summary\">Returns the exponential function of the argument.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "mu",
                    "sigma",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "mu",
                    "sigma",
                    "minvalue",
                    "maxvalue",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "sample_lognormal_by_median": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal_by_median\">sample_lognormal_by_median</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Samples the log-normal distribution based on median and standard deviation.</p><ul><li><code>float sample_lognormal_by_median(float median, float stddev, float u)</code></li><li><code>float sample_lognormal_by_median(float origmedian, float origstddev, float minvalue, float maxvalue, float u)</code></li></ul>\n\n\n\n\n<p>\n<code>median</code>\n\n<div class=\"content\">\n<p>The median of the distribution.</p>\n</div>\n</p>\n<p>\n<code>origmedian</code>\n\n<div class=\"content\">\n<p>The median the distribution would have, were it not for <code>minvalue</code>\n    and <code>maxvalue</code>, limiting the range.</p>\n</div>\n</p>\n<p>\n<code>stddev</code>\n\n<div class=\"content\">\n<p>The standard deviation of the distribution.</p>\n</div>\n</p>\n<p>\n<code>origstddev</code>\n\n<div class=\"content\">\n<p>The standard deviation (scale) the distribution would have, were it\n    not for <code>minvalue</code> and <code>maxvalue</code>, limiting the range.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>A number in the range [0,1).</p>\n</div>\n</p>\n<p>\n<code>minvalue</code>,<code>maxvalue</code>\n\n<div class=\"content\">\n<p>When given, instead of sampling the full log-normal distribution,\n    the distribution with its range limited to <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/`minvalue`,`maxvalue`\">/vex/functions/`minvalue`,`maxvalue`</a> will be\n    sampled.</p>\n</div>\n</p>\n\n<p>Samples the log-normal distribution with the specified <code>median</code> and <code>stddev</code>,\noptionally with a <code>minvalue</code> and <code>maxvalue</code>.  To use parameters <code>mu</code> and <code>sigma</code>\nof the underlying normal distribution instead of <code>median</code> and <code>stddev</code>,\nuse <code>sample_lognormal</code>.\nGiven uniform random <code>u</code> values in [0,1), this will return log-normally\ndistributed random numbers.  The return value will be monotone increasing\nwith respect to <code>u</code>.</p>\n<p>The log-normal distribution is sampled by sampling a normal distribution\nand exponentiating the result, giving a value that is always positive, so\nthis distribution is often used for generating random point scales.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal\">sample_lognormal()</a><div class=\"related-summary\">Samples the log-normal distribution based on parameters of the underlying normal distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_normal\">sample_normal()</a><div class=\"related-summary\">Samples the normal (Gaussian) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rand\">rand()</a><div class=\"related-summary\">Creates a random number between 0 and 1 from a seed.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_exponential\">sample_exponential()</a><div class=\"related-summary\">Samples the exponential distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cauchy\">sample_cauchy()</a><div class=\"related-summary\">Samples the Cauchy (Lorentz) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_discrete\">sample_discrete()</a><div class=\"related-summary\">Returns an integer, either uniform or weighted, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/log\">log()</a><div class=\"related-summary\">Returns the natural logarithm of the argument.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/exp\">exp()</a><div class=\"related-summary\">Returns the exponential function of the argument.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "median",
                    "stddev",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "origmedian",
                    "origstddev",
                    "minvalue",
                    "maxvalue",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "sample_normal": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_normal\">sample_normal</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Samples the normal (Gaussian) distribution.</p><ul><li><code>float sample_normal(float u)</code></li><li><code>float sample_normal(float mean, float stddev, float u)</code></li><li><code>float sample_normal(float origmean, float origstddev, float minvalue, float maxvalue, float u)</code></li><li><code>vector2 sample_normal(vector2 u)</code></li><li><code>vector sample_normal(vector u)</code></li><li><code>vector4 sample_normal(vector4 u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>A number, or multiple numbers, in the range [0,1).</p>\n</div>\n</p>\n<p>\n<code>mean</code>\n\n<div class=\"content\">\n<p>The mean of the distribution, or 0 if not specified.</p>\n</div>\n</p>\n<p>\n<code>origmean</code>\n\n<div class=\"content\">\n<p>The mean the distribution would have, were it not for <code>minvalue</code>\n    and <code>maxvalue</code>, limiting the range.</p>\n</div>\n</p>\n<p>\n<code>stddev</code>\n\n<div class=\"content\">\n<p>The standard deviation (scale) of the distribution, or 1 if not specified.</p>\n</div>\n</p>\n<p>\n<code>origstddev</code>\n\n<div class=\"content\">\n<p>The standard deviation (scale) the distribution would have, were it\n    not for <code>minvalue</code> and <code>maxvalue</code>, limiting the range.</p>\n</div>\n</p>\n<p>\n<code>minvalue</code>,<code>maxvalue</code>\n\n<div class=\"content\">\n<p>When given, instead of sampling the full normal distribution,\n    the distribution with its range limited to <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/`minvalue`,`maxvalue`\">/vex/functions/`minvalue`,`maxvalue`</a> will be\n    sampled.</p>\n</div>\n</p>\n\n<p>Samples the normal distribution with the specified <code>mean</code> and <code>stddev</code>, optionally\nwith a <code>minvalue</code> and <code>maxvalue</code>.\nGiven uniform random <code>u</code> values in [0,1), this will return normally\ndistributed random numbers.  The return value will be monotone increasing\nwith respect to <code>u</code>.</p>\n<p>The <code>vector2</code>, <code>vector</code>, and <code>vector4</code> versions\nreturn multiple samples with mean 0 and standard deviation 1.  The\ndistribution of these vectors is naturally isotropic, i.e. rotating\nthe distribution won\u2019t change it, which can be useful in simulations.\nTo add a maximum distance from the origin, while keeping the distribution\nisotropic, use:</p>\n<p><code>sample_normal(0,1,0,maxdist,u.x) * sample_direction_uniform(set(u.y,u.z))</code></p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rand\">rand()</a><div class=\"related-summary\">Creates a random number between 0 and 1 from a seed.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_exponential\">sample_exponential()</a><div class=\"related-summary\">Samples the exponential distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cauchy\">sample_cauchy()</a><div class=\"related-summary\">Samples the Cauchy (Lorentz) distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal\">sample_lognormal()</a><div class=\"related-summary\">Samples the log-normal distribution based on parameters of the underlying normal distribution.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_lognormal_by_median\">sample_lognormal_by_median()</a><div class=\"related-summary\">Samples the log-normal distribution based on median and standard deviation.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_discrete\">sample_discrete()</a><div class=\"related-summary\">Returns an integer, either uniform or weighted, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "mean",
                    "stddev",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "origmean",
                    "origstddev",
                    "minvalue",
                    "maxvalue",
                    "u"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sample_orientation_cone": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</p><ul><li><code>vector4 sample_orientation_cone(vector4 center, float maxangle, vector u)</code></li></ul>\n\n\n\n\n<p>\n<code>center</code>\n\n<div class=\"content\">\n<p>Orientation in the center of the cone.  This does not need to be normalized.</p>\n</div>\n</p>\n<p>\n<code>maxangle</code>\n\n<div class=\"content\">\n<p>Maximum angle, in radians, away from <code>center</code> that any sample of the cone\n    will be, so long as all <code>u</code> values are between 0 and 1.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>This angle is the maximum quaternion rotation angle between the orientation quaternion that the output represents and <code>center</code>, which is twice the Euclidean cone angle of the unit 4D hypersphere being sampled. A <code>maxangle</code> of \u03c0 would sample all orientations, but only half of all 4D unit vectors; a <code>maxangle</code> of 2\u03c0 would sample all 4D unit vectors.</p>\n</div>\n</div>\n</div>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Three numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a unit vector4, i.e. a vector4 of length 1, based on <code>u</code>.\nGiven uniform random <code>u</code> vectors of three values in [0,1), the returned quaternion\norientations will be uniform random and continuous with respect to <code>u</code>,\nin the region of orientations within <code>maxangle</code> of <code>center</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "center",
                    "maxangle",
                    "u"
                ],
                "args": [
                    "const vector4",
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "sample_orientation_uniform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</p><ul><li><code>vector4 sample_orientation_uniform(vector u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Three numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a unit vector4, i.e. a vector4 of length 1, based on <code>u</code>.\nGiven uniform random <code>u</code> vectors of three values in [0,1), the returned unit vectors will be\nuniform random and continuous with respect to <code>u</code> on the surface of the unit hypersphere.\nIn other words, they will be uniform random orientation quaternions.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "sample_photon": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_photon\">sample_photon</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\">Samples a 3D position on a light source and runs the light shader at that point.</p><ul><li><code>int sample_photon(light lp, vector &amp;pos, vector &amp;dir, float &amp;scale, float time)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Spawns a photon from the given light source and returns the information for the\nfirst intersection in the scene.  The <code>pos</code>, <code>dir</code> and <code>scale</code> are filled out\nwith the information about where the photon hit in the scene.</p>\n<p>The returned integer represents the bounce type mask (this is determined by the\ntypes of illumination labels on the light source).</p>\n<p>The function returns 0 if the photon didn\u2019t intersect any geometry.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getlight\">getlight()</a><div class=\"related-summary\">Returns a light struct for the specified light identifier.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/photonmap\">photonmap()</a><div class=\"related-summary\">The photonmap function will evaluate a photon map and return the\nresulting color information.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getphotonlight\">getphotonlight()</a><div class=\"related-summary\">Returns the integer ID of the light being used for photon shading.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lp",
                    "pos",
                    "dir",
                    "scale",
                    "time"
                ],
                "args": [
                    "const light",
                    "vector",
                    "vector",
                    "float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "sample_sphere_cone": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</p><ul><li><code>vector sample_sphere_cone(vector center, float maxangle, vector u)</code></li></ul>\n\n\n\n\n<p>\n<code>center</code>\n\n<div class=\"content\">\n<p>Direction in the center of the cone.  This does not need to be normalized.</p>\n</div>\n</p>\n<p>\n<code>maxangle</code>\n\n<div class=\"content\">\n<p>Maximum angle, in radians, away from <code>center</code> that any sample of the cone\n    will be, so long as all <code>u</code> values are between 0 and 1.</p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Three numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a vector of length &lt; 1, based on <code>u</code>.\nGiven uniform random <code>u</code> vectors of three values in [0,1), the returned vectors will be\nuniform random and continuous with respect to <code>u</code> inside the unit sphere,\nin the volume within <code>maxangle</code> of the direction indicated by <code>center</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "center",
                    "maxangle",
                    "u"
                ],
                "args": [
                    "const vector",
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sample_sphere_uniform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_uniform\">sample_sphere_uniform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Generates a uniform vector with length &lt; 1, given a vector of uniform numbers between 0 and 1.</p><ul><li><code>vector sample_sphere_uniform(vector u)</code></li></ul>\n\n\n\n\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Three numbers between 0 and 1.</p>\n</div>\n</p>\n\n<p>Returns a vector of length &lt; 1, based on <code>u</code>.\nGiven uniform random <code>u</code> vectors of three values in [0,1), the returned vectors will be\nuniform random and continuous with respect to <code>u</code> inside the unit sphere.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_edge_uniform\">sample_circle_edge_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector2, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_uniform\">sample_direction_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_uniform\">sample_orientation_uniform()</a><div class=\"related-summary\">Generates a uniform unit vector4, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_uniform\">sample_circle_uniform()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_uniform\">sample_hypersphere_uniform()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, given a vector4 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_arc\">sample_circle_arc()</a><div class=\"related-summary\">Generates a uniform unit vector2, within maxangle of center, given a uniform number between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_direction_cone\">sample_direction_cone()</a><div class=\"related-summary\">Generates a uniform unit vector, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_orientation_cone\">sample_orientation_cone()</a><div class=\"related-summary\">Generates a uniform unit vector4, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_circle_slice\">sample_circle_slice()</a><div class=\"related-summary\">Generates a uniform vector2 with length &lt; 1, within maxangle of center, given a vector2 of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_sphere_cone\">sample_sphere_cone()</a><div class=\"related-summary\">Generates a uniform vector with length &lt; 1, within maxangle of center, given a vector of uniform numbers between 0 and 1.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_hypersphere_cone\">sample_hypersphere_cone()</a><div class=\"related-summary\">Generates a uniform vector4 with length &lt; 1, within maxangle of center, given a vector4 of uniform numbers between 0 and 1.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sampledisk": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sampledisk\">sampledisk</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Warps uniform random samples to a disk.</p><ul><li><code>void sampledisk(float &amp;x, float &amp;y, float sx, float sy)</code></li></ul>\n\n\n\n<p>This function warps uniform sample values so that they are equally\ndistributed on a disk. The transformation attempts to preserve\nstratification properties from the original samples.</p>\n<p><code>sx</code> and <code>sy</code>:\nUniform random values in the range <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/0,1\">/vex/functions/0,1</a>, such as generated by\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/nextsample\">nextsample()</a>.</p>\n<p><code>x</code> and <code>y</code>:\nUniform distributed points within the unit disk.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "x",
                    "y",
                    "sx",
                    "sy"
                ],
                "args": [
                    "float",
                    "float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "scale": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/scale\">scale</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Scales the given matrix in three directions simultaneously (X, Y, Z -\ngiven by the components of the scale_vector).</p><ul><li><code>void scale(matrix2 &amp;mat, vector2 scale_vector)</code></li><li><code>void scale(matrix3 &amp;mat, vector scale_vector)</code></li><li><code>void scale(matrix &amp;mat, vector scale_vector)</code></li></ul>\n\n\n\n<p>scales the given matrix in three directions simultaneously (X, Y, Z -\ngiven by the components of the <code>scale_vector</code>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "mat",
                    "scale_vector"
                ],
                "args": [
                    "export matrix2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "mat",
                    "scale_vector"
                ],
                "args": [
                    "export matrix3",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "mat",
                    "scale_vector"
                ],
                "args": [
                    "export matrix",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "scatter": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/scatter\">scatter</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Evaluates a scattering event through the domain of a geometric object.</p><ul><li><code>int scatter(vector ipoint, vector inormal, vector idirection, vector idistribution, float time, float maxdist, vector &amp;opoint, vector &amp;onormal, vector &amp;odirection)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Evaluates a single scattering event through geometry. A return value of 1 means the scattering was successful.</p>\n\n<p>\n<code>ipoint</code>\n\n<div class=\"content\">\n<p>Entry point of scattering.</p>\n</div>\n</p>\n<p>\n<code>inormal</code>\n\n<div class=\"content\">\n<p>Surface normal at the entry point (surfaces only). Required to orient the scattering plane.</p>\n</div>\n</p>\n<p>\n<code>idirection</code>\n\n<div class=\"content\">\n<p>Primary scattering direction at the entry point. Required to orient the scattering plane.</p>\n</div>\n</p>\n<p>\n<code>idistribution</code>\n\n<div class=\"content\">\n<p>Initial scatter distribution at the entry point. If a zero-valued vector is passed a random scatter distribution will be used.</p>\n</div>\n</p>\n<p>\n<code>maxdist</code>\n\n<div class=\"content\">\n<p>Maximum distance to scatter.</p>\n</div>\n</p>\n<p>\n<code>opoint</code>\n\n<div class=\"content\">\n<p>Exit point of scattering.</p>\n</div>\n</p>\n<p>\n<code>onormal</code>\n\n<div class=\"content\">\n<p>Normal at the scattering exit point (surfaces only).</p>\n</div>\n</p>\n<p>\n<code>odirection</code>\n\n<div class=\"content\">\n<p>Outgoing direction at the scattering exit point (surfaces only).</p>\n</div>\n</p>\n\n<div class=\"code-container\">\n<code class=\"line\">// Trace for intersection with scene\n</code><code class=\"line\">vector hitP = 0;\n</code><code class=\"line\">vector hitN = 0;\n</code><code class=\"line\">int hit = trace(P, I, Time, \"P\", hitP, \"N\", hitN);\n</code><code class=\"line\">\n</code><code class=\"line\">// Scatter a random distance from the intersection\n</code><code class=\"line\">vector idistribution = 0;\n</code><code class=\"line\">int sid = israytrace ? SID : newsampler();\n</code><code class=\"line\">vector s;\n</code><code class=\"line\">nextsample(sid, s.x, s.y, \"mode\", \"nextpixel\");\n</code><code class=\"line\">float maxdist = 2.0 * s.x;\n</code><code class=\"line\">vector opoint = 0;\n</code><code class=\"line\">vector onormal = 0;\n</code><code class=\"line\">vector odirection = 0;\n</code><code class=\"line\">hit = scatter(hitP, hitN, I, idistribution, Time, maxdist, opoint, onormal, odirection);\n</code><code class=\"line\">\n</code><code class=\"line\">// Trace again from the exit point of the scattering\n</code><code class=\"line\">hit = trace(opoint, odirection, Time, \"P\", hitP, \"N\", hitN);\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_geometry\">sample_geometry()</a><div class=\"related-summary\">Samples geometry in the scene and returns information from the shaders of surfaces that were sampled.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/gather\">gather()</a><div class=\"related-summary\">Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "ipoint",
                    "inormal",
                    "idirection",
                    "idistribution",
                    "time",
                    "maxdist",
                    "opoint",
                    "onormal",
                    "odirection"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float",
                    "const float",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "select": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/select\">select</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Returns one of two parameters based on a conditional.</p><ul><li><code>int select(int conditional, int a, int b)</code></li><li><code>string select(int conditional, string a, string b)</code></li><li><code>float select(int conditional, float a, float b)</code></li><li><code>vector2 select(int conditional, vector2 a, vector2 b)</code></li><li><code>vector select(int conditional, vector a, vector b)</code></li><li><code>vector4 select(int conditional, vector4 a, vector4 b)</code></li><li><code>matrix2 select(int conditional, matrix2 a, matrix2 b)</code></li><li><code>matrix3 select(int conditional, matrix3 a, matrix3 b)</code></li><li><code>matrix select(int conditional, matrix a, matrix b)</code></li><li><code>light select(int conditional, light a, light b)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>material select(int conditional, material a, material b)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf select(int conditional, bsdf a, bsdf b)</code></li><li><code>int[] select(int conditional, int[] a, int[] b)</code></li><li><code>string[] select(int conditional, string[] a, string[] b)</code></li><li><code>float[] select(int conditional, float[] a, float[] b)</code></li><li><code>vector2[] select(int conditional, vector2[] a, vector2[] b)</code></li><li><code>vector[] select(int conditional, vector[] a, vector[] b)</code></li><li><code>vector4[] select(int conditional, vector4[] a, vector4[] b)</code></li><li><code>matrix2[] select(int conditional, matrix2[] a, matrix2[] b)</code></li><li><code>matrix3[] select(int conditional, matrix3[] a, matrix3[] b)</code></li><li><code>matrix[] select(int conditional, matrix[] a, matrix[] b)</code></li><li><code>bsdf[] select(int conditional, bsdf[] a, bsdf[] b)</code></li><li><code>light[] select(int conditional, light[] a, light[] b)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>material[] select(int conditional, material[] a, material[] b)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Returns <code>a</code> if the conditional is true, and returns <code>b</code> if it is false.</p>\n<p>The difference between select and an <code>if</code> statement is that select will\nevaluate both a and b, regardless of the value of the conditional.  Judicious\nuse of <code>select</code> can avoid comparisons, allowing larger sections of code to be\nconverted to native code.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const matrix2",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const matrix3",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const matrix",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const bsdf",
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "bsdf"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const light",
                    "const light"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "light"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const material",
                    "const material"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "material"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const matrix2[]",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const matrix3[]",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const matrix[]",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const bsdf[]",
                    "const bsdf[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "bsdf[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const light[]",
                    "const light[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "light[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const material[]",
                    "const material[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "material[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const float[]",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const int[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const vector4[]",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const string[]",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const vector2[]",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "conditional",
                    "a",
                    "b"
                ],
                "args": [
                    "const int",
                    "const vector[]",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector[]"
            }
        ]
    },
    "sensor_panorama_create": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sensor_panorama_create\">sensor_panorama_create</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">photon</span></span></span><p class=\"summary\">Sensor function to render GL scene and query the result.</p><ul><li><code>int sensor_panorama_create(float time, vector pos, int size, float near, float far, string candidateobj, string includeobj, string excludeobj, int uselit)</code></li></ul>\n\n\n\n<p>This function will render the surrounding environment using the GL render and\nprovides a handle to use for querying the results.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>Because this needs to render the scene, it only works in interactive sessions of Houdini.</p>\n</div>\n</div>\n</div>\n\n<p>\n<code>time</code>\n\n<div class=\"content\">\n<p>The period in time when the render should be performed.</p>\n</div>\n</p>\n<p>\n<code>pos</code>\n\n<div class=\"content\">\n<p>The location in world space coordinates where the render should be performed.</p>\n</div>\n</p>\n<p>\n<code>size</code>\n\n<div class=\"content\">\n<p>The resolution of the performed render.</p>\n</div>\n</p>\n<p>\n<code>near</code>\n\n<div class=\"content\">\n<p>The near plane restriction.</p>\n</div>\n</p>\n<p>\n<code>far</code>\n\n<div class=\"content\">\n<p>The far plane restriction.</p>\n</div>\n</p>\n<p>\n<code>candidateobj</code>\n\n<div class=\"content\">\n<p>A bundle, group, or expression that represents what objects will be displayed if their display setting is enabled.</p>\n</div>\n</p>\n<p>\n<code>includeobj</code>\n\n<div class=\"content\">\n<p>A bundle, group, or expression that represents what objects will always be displayed.</p>\n</div>\n</p>\n<p>\n<code>excludeobj</code>\n\n<div class=\"content\">\n<p>A bundle, group, or expression that represents what objects will never be displayed.</p>\n</div>\n</p>\n<p>\n<code>uselit</code>\n\n<div class=\"content\">\n<p>Usually for AI purposes you want to not have any lighting as you are using\n    color as a key to differentiate actors.  However, if you want to display\n    what a creature sees, lighting makes things more visually accurate.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "time",
                    "pos",
                    "size",
                    "near",
                    "far",
                    "candidateobj",
                    "includeobj",
                    "excludeobj",
                    "uselit"
                ],
                "args": [
                    "const float",
                    "const vector",
                    "const int",
                    "const float",
                    "const float",
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "sensor_panorama_getcolor": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sensor_panorama_getcolor\">sensor_panorama_getcolor</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Sensor function query a rendered GL scene.</p><ul><li><code>vector sensor_panorama_getcolor(int handle, vector dir)</code></li></ul>\n\n\n\n<p>This function will return the color in the given direction from the\nscene rendered previously with <code>sensor_panorama_create</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "dir"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sensor_panorama_getcone": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sensor_panorama_getcone\">sensor_panorama_getcone</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Sensor function to query average values from rendered GL scene.</p><ul><li><code>void sensor_panorama_getcone(int handle, vector lookodir, float angle, vector colormin, vector colormax, float depthmin, float depthmax, float &amp;strength, vector &amp;dir, vector &amp;color, float &amp;depth)</code></li></ul>\n\n\n\n<p>This function will render the surrounding environment using the GL render and\nprovides a handle to use for querying the results.</p>\n<p>It averages out all rendered pixels in a cone shaped area.  The <code>colormin</code> and\n<code>colormax</code> can be used to mask out only pixels that lie in this range, useful\nfor color-coding different regions of interest.  The resulting dir and strength\ninform the weighted center of all matching pixels, and the relative amount that\npassed the color and depth filters.  The color and depth are the average of all\nmatched pixels.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "lookodir",
                    "angle",
                    "colormin",
                    "colormax",
                    "depthmin",
                    "depthmax",
                    "strength",
                    "dir",
                    "color",
                    "depth"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const float",
                    "const vector",
                    "const vector",
                    "const float",
                    "const float",
                    "float",
                    "vector",
                    "vector",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "sensor_panorama_getdepth": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sensor_panorama_getdepth\">sensor_panorama_getdepth</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Sensor function query a rendered GL scene.</p><ul><li><code>float sensor_panorama_getdepth(int handle, vector dir)</code></li></ul>\n\n\n\n<p>This function will return the depth in the given direction from the\nscene rendered previously with <code>sensor_panorama_create</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "dir"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "sensor_save": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sensor_save\">sensor_save</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Sensor function to save a rendered GL scene.</p><ul><li><code>int sensor_save(int handle, string colorfile, string depthfile)</code></li></ul>\n\n\n\n<p>This will save to disk the image maps corresponding to the color and depth\ninformation recorded in the given sensor handle.</p>\n<p>Returns 1 if successfully saved, otherwise 0.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "handle",
                    "colorfile",
                    "depthfile"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "serialize": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/serialize\">serialize</a></h1><p class=\"summary\">Flattens an array of vector or matrix types into an array of floats.</p><ul><li><code>float[] serialize(vector2[] array)</code></li><li><code>float[] serialize(vector[] array)</code></li><li><code>float[] serialize(vector4[] array)</code></li><li><code>float[] serialize(matrix2[] array)</code></li><li><code>float[] serialize(matrix3[] array)</code></li><li><code>float[] serialize(matrix[] array)</code></li></ul>\n\n\n\n<p>These functions will serialize the arrays of tuple values.\nThat is, the values of the tuples are extracted one by one into a\nflat floating point array. For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector v[] = { {1,2,3}, {7,8,9} }; // A vector[] of length 2\n</code><code class=\"line\">float  f[];\n</code><code class=\"line\">\n</code><code class=\"line\">f = serialize(v);\n</code><code class=\"line\">// Now f[] has a length of 6 and equals { 1,2,3,7,8,9 }\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/unserialize\">unserialize()</a><div class=\"related-summary\">Turns a flat array of floats into an array of vectors or matrices.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            }
        ]
    },
    "set": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/set\">set</a></h1><span><span class=\"padder\"><span class=\"pillow\">data</span></span></span><p class=\"summary\">These two functions provide a very efficient way of creating a\nvector/vector4.</p><ul><li><code>int set(int value)</code></li><li><code>int set(float value)</code></li><li><code>string set(string value)</code></li><li><code>float set(int value)</code></li><li><code>float set(float value)</code></li><li><code>float set(vector value)</code></li><li><code>float set(vector4 value)</code></li><li><code>float set(float[] value)</code></li><li><code>vector2 set(int value)</code></li><li><code>vector2 set(float value)</code></li><li><code>vector2 set(float u, float v)</code></li><li><code>vector2 set(vector2 value)</code></li><li><code>vector2 set(vector value)</code></li><li><code>vector2 set(vector4 value)</code></li><li><code>vector set(int value)</code></li><li><code>vector set(float value)</code></li><li><code>vector set(float x, float y, float z)</code></li><li><code>vector set(vector2 value)</code></li><li><code>vector set(vector value)</code></li><li><code>vector set(vector4 value)</code></li><li><code>vector set(float[] value)</code></li><li><code>vector4 set(int value)</code></li><li><code>vector4 set(float value)</code></li><li><code>vector4 set(float rowx, float rowy, float rowz, float roww)</code></li><li><code>vector4 set(vector2 value)</code></li><li><code>vector4 set(vector value)</code></li><li><code>vector4 set(vector4 value)</code></li><li><code>vector4 set(float[] value)</code></li><li><code>matrix2 set(int value)</code></li><li><code>matrix2 set(float value)</code></li><li><code>matrix2 set(float xx, float xy, float yx, float yy)</code></li><li><code>matrix2 set(vector2 rowu, vector2 rowv)</code></li><li><code>matrix2 set(matrix2 value)</code></li><li><code>matrix2 set(matrix3 value)</code></li><li><code>matrix2 set(matrix value)</code></li><li><code>matrix3 set(int value)</code></li><li><code>matrix3 set(float value)</code></li><li><code>matrix3 set(float xx, float xy, float xz, float yx, float yy, float yz, float zx, float zy, float zz)</code></li><li><code>matrix3 set(vector rowx, vector rowy, vector rowz)</code></li><li><code>matrix3 set(matrix2 value)</code></li><li><code>matrix3 set(matrix3 value)</code></li><li><code>matrix3 set(matrix value)</code></li><li><code>matrix3 set(float[] value)</code></li><li><code>matrix3 set(vector[] value)</code></li><li><code>matrix set(int value)</code></li><li><code>matrix set(float value)</code></li><li><code>matrix set(float xx, float xy, float xz, float xw, float yx, float yy, float yz, float yw, float zx, float zy, float zz, float zw, float wx, float wy, float wz, float ww)</code></li><li><code>matrix set(vector4 rowx, vector4 rowy, vector4 rowz, vector4 roww)</code></li><li><code>matrix set(matrix2 value)</code></li><li><code>matrix set(matrix3 value)</code></li><li><code>matrix set(matrix value)</code></li><li><code>matrix set(float[] value)</code></li><li><code>matrix set(vector4[] value)</code></li><li><code>light set(light value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>material set(material value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf set(bsdf value)</code></li><li><code>int[] set(int[] value)</code></li><li><code>int[] set(float[] value)</code></li><li><code>string[] set(string[] value)</code></li><li><code>float[] set(float value)</code></li><li><code>float[] set(vector value)</code></li><li><code>float[] set(vector4 value)</code></li><li><code>float[] set(matrix3 value)</code></li><li><code>float[] set(matrix value)</code></li><li><code>float[] set(int[] value)</code></li><li><code>float[] set(float[] value)</code></li><li><code>vector2[] set(float[] value)</code></li><li><code>vector2[] set(vector2[] value)</code></li><li><code>vector[] set(matrix3 value)</code></li><li><code>vector[] set(float[] value)</code></li><li><code>vector[] set(vector[] value)</code></li><li><code>vector4[] set(matrix value)</code></li><li><code>vector4[] set(float[] value)</code></li><li><code>vector4[] set(vector4[] value)</code></li><li><code>matrix2[] set(float[] value)</code></li><li><code>matrix2[] set(matrix2[] value)</code></li><li><code>matrix3[] set(float[] value)</code></li><li><code>matrix3[] set(matrix3[] value)</code></li><li><code>matrix[] set(float[] value)</code></li><li><code>matrix[] set(matrix[] value)</code></li><li><code>bsdf[] set(bsdf[] value)</code></li><li><code>light[] set(light[] value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>material[] set(material[] value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>These two functions provide a very efficient way of creating a\nvector/vector4. Each component is assigned from the argument passed in.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "xx",
                    "xy",
                    "yx",
                    "yy"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "rowu",
                    "rowv"
                ],
                "args": [
                    "const vector2",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "xx",
                    "xy",
                    "xz",
                    "yx",
                    "yy",
                    "yz",
                    "zx",
                    "zy",
                    "zz"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "rowx",
                    "rowy",
                    "rowz"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "xx",
                    "xy",
                    "xz",
                    "xw",
                    "yx",
                    "yy",
                    "yz",
                    "yw",
                    "zx",
                    "zy",
                    "zz",
                    "zw",
                    "wx",
                    "wy",
                    "wz",
                    "ww"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "rowx",
                    "rowy",
                    "rowz",
                    "roww"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "bsdf"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const light"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "REARG",
                "return": "light"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const material"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "REARG",
                "return": "material"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "rowx",
                    "rowy",
                    "rowz",
                    "roww"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "string"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "u",
                    "v"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "x",
                    "y",
                    "z"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const bsdf[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "bsdf[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const light[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "REARG",
                "return": "light[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const material[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "REARG",
                "return": "material[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "string[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector[]"
            }
        ]
    },
    "setagentclipnames": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets the current animation clips for an agent primitive.</p><ul><li><code>void setagentclipnames(int geohandle, int prim, string[] clipnames)</code></li></ul>\n\n\n\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>clipnames</code>\n\n<div class=\"content\">\n<p>A list of animation clip names.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "clipnames"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "setagentclips": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentclips\">setagentclips</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets the animation clips that an agent should use to compute its transforms.</p><ul><li><code>int setagentclips(int geohandle, int prim, string[] clip_names, float[] clip_times, float[] clip_weights, string[] clip_transform_groups, int[] clip_layer_ids, int[] layer_blend_modes, float[] layer_weights, int[] layer_parent_ids)</code></li></ul>\n\n\n\n<p>This function can provide improved performance compared to using a combination of <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\" title=\"Sets the current animation clips for an agent primitive.\">setagentclipnames()</a>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\" title=\"Sets the current times for an agent primitive\u2019s animation clips.\">setagentcliptimes()</a>, and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\" title=\"Sets the blend weights for an agent primitive\u2019s animation clips.\">setagentclipweights()</a>, and also allows layering animation clips.</p>\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>clip_names</code>\n\n<div class=\"content\">\n<p>A list of animation clip names.</p>\n</div>\n</p>\n<p>\n<code>clip_times</code>\n\n<div class=\"content\">\n<p>A list of times that the clips should be sampled at.</p>\n</div>\n</p>\n<p>\n<code>clip_weights</code>\n\n<div class=\"content\">\n<p>A list of blend weights for the animation clips.</p>\n</div>\n</p>\n<p>\n<code>clip_transform_groups</code>\n\n<div class=\"content\">\n<p>A list of transform groups, which specify the joints that each clip should be applied to.</p>\n</div>\n</p>\n<p>\n<code>clip_layer_ids</code>\n\n<div class=\"content\">\n<p>A list containing the layer that each animation clip is an input for.</p>\n</div>\n</p>\n<p>\n<code>layer_blend_modes</code>\n\n<div class=\"content\">\n<p>A list of blend modes for each layer. The available blend modes are defined in <code>$HH/vex/include/crowd_cliplayers.h</code>.</p>\n</div>\n</p>\n<p>\n<code>layer_weights</code>\n\n<div class=\"content\">\n<p>A list of blend weights for each layer. The blend weight is not used for the topmost layer.</p>\n</div>\n</p>\n<p>\n<code>layer_parent_ids</code>\n\n<div class=\"content\">\n<p>A list containing the parent layer for each layer (or -1 for the topmost layer). This specifies a tree of animation layers.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "clip_names",
                    "clip_times",
                    "clip_weights",
                    "clip_transform_groups",
                    "clip_layer_ids",
                    "layer_blend_modes",
                    "layer_weights",
                    "layer_parent_ids"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string[]",
                    "const float[]",
                    "const float[]",
                    "const string[]",
                    "const int[]",
                    "const int[]",
                    "const float[]",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            }
        ]
    },
    "setagentcliptimes": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets the current times for an agent primitive\u2019s animation clips.</p><ul><li><code>void setagentcliptimes(int geohandle, int prim, float[] cliptimes)</code></li></ul>\n\n\n\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>cliptimes</code>\n\n<div class=\"content\">\n<p>A list of clip times (in seconds).</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights()</a><div class=\"related-summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "cliptimes"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "setagentclipweights": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentclipweights\">setagentclipweights</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets the blend weights for an agent primitive\u2019s animation clips.</p><ul><li><code>void setagentclipweights(int geohandle, int prim, float[] clipweights)</code></li></ul>\n\n\n\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>clipweights</code>\n\n<div class=\"content\">\n<p>A list of weights.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipcatalog\">agentclipcatalog()</a><div class=\"related-summary\">Returns all of the animation clips that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliplength\">agentcliplength()</a><div class=\"related-summary\">Returns the length (in seconds) of an agent\u2019s animation clip.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipnames\">agentclipnames()</a><div class=\"related-summary\">Returns an agent primitive\u2019s current animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsamplelocal\">agentclipsamplelocal()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipsampleworld\">agentclipsampleworld()</a><div class=\"related-summary\">Samples an agent\u2019s animation clip at a specific time.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcliptimes\">agentcliptimes()</a><div class=\"related-summary\">Returns the current times for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentclipweights\">agentclipweights()</a><div class=\"related-summary\">Returns the blend weights for an agent primitive\u2019s animation clips.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentclipnames\">setagentclipnames()</a><div class=\"related-summary\">Sets the current animation clips for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcliptimes\">setagentcliptimes()</a><div class=\"related-summary\">Sets the current times for an agent primitive\u2019s animation clips.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "clipweights"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "setagentcollisionlayer": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentcollisionlayer\">setagentcollisionlayer</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets the collision layer of an agent primitive.</p><ul><li><code>void setagentcollisionlayer(int geohandle, int prim, string layername)</code></li></ul>\n\n\n\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>layername</code>\n\n<div class=\"content\">\n<p>The name of one of the agent\u2019s layers.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcollisionlayer\">agentcollisionlayer()</a><div class=\"related-summary\">Returns the name of the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcurrentlayer\">agentcurrentlayer()</a><div class=\"related-summary\">Returns the name of the current layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayerbindings\">agentlayerbindings()</a><div class=\"related-summary\">Returns the transform that each shape in an agent\u2019s layer is bound to.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\">agentlayers()</a><div class=\"related-summary\">Returns all of the layers that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayershapes\">agentlayershapes()</a><div class=\"related-summary\">Returns the names of the shapes referenced by an agent primitive\u2019s layer.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcurrentlayer\">setagentcurrentlayer()</a><div class=\"related-summary\">Sets the current layer of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "layername"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "setagentcurrentlayer": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentcurrentlayer\">setagentcurrentlayer</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets the current layer of an agent primitive.</p><ul><li><code>void setagentcurrentlayer(int geohandle, int prim, string layername)</code></li></ul>\n\n\n\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>layername</code>\n\n<div class=\"content\">\n<p>The name of one of the agent\u2019s layers.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcollisionlayer\">agentcollisionlayer()</a><div class=\"related-summary\">Returns the name of the collision layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentcurrentlayer\">agentcurrentlayer()</a><div class=\"related-summary\">Returns the name of the current layer of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayerbindings\">agentlayerbindings()</a><div class=\"related-summary\">Returns the transform that each shape in an agent\u2019s layer is bound to.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayers\">agentlayers()</a><div class=\"related-summary\">Returns all of the layers that have been loaded for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlayershapes\">agentlayershapes()</a><div class=\"related-summary\">Returns the names of the shapes referenced by an agent primitive\u2019s layer.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentcollisionlayer\">setagentcollisionlayer()</a><div class=\"related-summary\">Sets the collision layer of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "layername"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "setagentlocaltransform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\">setagentlocaltransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Overrides the local space transform of an agent primitive\u2019s bone.</p><ul><li><code>int setagentlocaltransform(int geohandle, int prim, matrix transform, int index)</code></li></ul>\n\n\n\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>transform</code>\n\n<div class=\"content\">\n<p>The new transform (in local space) of the bone.</p>\n</div>\n</p>\n<p>\n<code>index</code>\n\n<div class=\"content\">\n<p>Index of a transform in the agent\u2019s rig.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\">setagentworldtransform()</a><div class=\"related-summary\">Overrides the world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "transform",
                    "index"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const matrix",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setagentlocaltransforms": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Overrides the local space transforms of an agent primitive.</p><ul><li><code>void setagentlocaltransforms(int geohandle, int prim, matrix[] transforms)</code></li></ul>\n\n\n\n<p>When modifying a single transform, using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\" title=\"Overrides the local space transform of an agent primitive\u2019s bone.\">setagentlocaltransform()</a> instead can be significantly faster.</p>\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>transforms</code>\n\n<div class=\"content\">\n<p>The new transform (in local space) of each bone in the agent\u2019s rig.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\">setagentlocaltransform()</a><div class=\"related-summary\">Overrides the local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\">setagentworldtransform()</a><div class=\"related-summary\">Overrides the world space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "transforms"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "setagentworldtransform": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\">setagentworldtransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Overrides the world space transform of an agent primitive\u2019s bone.</p><ul><li><code>int setagentworldtransform(int geohandle, int prim, matrix transform, int index)</code></li></ul>\n\n\n\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>transform</code>\n\n<div class=\"content\">\n<p>The new transform (in world space) of the bone.</p>\n</div>\n</p>\n<p>\n<code>index</code>\n\n<div class=\"content\">\n<p>Index of a transform in the agent\u2019s rig.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\">setagentlocaltransform()</a><div class=\"related-summary\">Overrides the local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms()</a><div class=\"related-summary\">Overrides the world space transforms of an agent primitive.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "transform",
                    "index"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const matrix",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setagentworldtransforms": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransforms\">setagentworldtransforms</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">crowds</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Overrides the world space transforms of an agent primitive.</p><ul><li><code>void setagentworldtransforms(int geohandle, int prim, matrix[] transforms)</code></li></ul>\n\n\n\n<p>When modifying a single transform, using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\" title=\"Overrides the world space transform of an agent primitive\u2019s bone.\">setagentworldtransform()</a> instead can be significantly faster.</p>\n\n<p>\n<code>geohandle</code>\n\n<div class=\"content\">\n<p>Handle to the geometry to write to. <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>transforms</code>\n\n<div class=\"content\">\n<p>The new transform (in world space) of each bone in the agent\u2019s rig.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentlocaltransforms\">agentlocaltransforms()</a><div class=\"related-summary\">Returns the current local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtolocal\">agenttransformtolocal()</a><div class=\"related-summary\">Converts transforms from world space to local space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agenttransformtoworld\">agenttransformtoworld()</a><div class=\"related-summary\">Converts transforms from local space to world space for an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/agentworldtransforms\">agentworldtransforms()</a><div class=\"related-summary\">Returns the current world space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransform\">setagentlocaltransform()</a><div class=\"related-summary\">Overrides the local space transform of an agent primitive\u2019s bone.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentlocaltransforms\">setagentlocaltransforms()</a><div class=\"related-summary\">Overrides the local space transforms of an agent primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setagentworldtransform\">setagentworldtransform()</a><div class=\"related-summary\">Overrides the world space transform of an agent primitive\u2019s bone.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "transforms"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "setattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setattrib\">setattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Writes an attribute value to geometry.</p><ul><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, int value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, int value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, string value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, string value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, float value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, float value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector2 value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector2 value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector4 value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector4 value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix2 value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix2 value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix3 value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix3 value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, int[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, int[] value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, string[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, string[] value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, float[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, float[] value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector2[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector2[] value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector[] value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector4[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, vector4[] value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix2[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix2[] value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix3[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix3[] value, string mode=\"set\")</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix[] value)</code></li><li><code>int setattrib(int geohandle, string attribclass, string name, int elemnum, int vtxofprim, matrix[] value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes an attribute value on the given geometry.  \nIt returns the geohandle on success or -1 on failure.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>If the attribute does not exist, this creates the attribute with a default value of zero, empty string, or an empty array.\n    If you want to control the default value of a numeric attribute, use <code>addattrib()</code>.</p>\n</div>\n</div>\n</div>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>attribclass</code> is one of:</p>\n\n<p>\n<code>\"detail\"</code>, <code>\"global\"</code>\n\n<div class=\"content\">\n<p>Detail attributes.</p>\n</div>\n</p>\n<p>\n<code>\"point\"</code>\n\n<div class=\"content\">\n<p>Point attributes.</p>\n</div>\n</p>\n<p>\n<code>\"pointgroup\"</code>\n\n<div class=\"content\">\n<p>Point groups.</p>\n</div>\n</p>\n<p>\n<code>\"prim\"</code>, <code>\"primitive\"</code>\n\n<div class=\"content\">\n<p>Primitive attributes.</p>\n</div>\n</p>\n<p>\n<code>\"primgroup\"</code>\n\n<div class=\"content\">\n<p>Primitive groups.</p>\n</div>\n</p>\n<p>\n<code>\"primintrinsic\"</code>\n\n<div class=\"content\">\n<p>Primitive intrinsics.</p>\n</div>\n</p>\n<p>\n<code>\"vertex\"</code>\n\n<div class=\"content\">\n<p>Vertex attributes.</p>\n</div>\n</p>\n<p>\n<code>\"vertexgroup\"</code>\n\n<div class=\"content\">\n<p>Vertex groups.</p>\n</div>\n</p>\n\n<p><code>name</code> is the name of the attribute, group, or intrinsic to write to.</p>\n<p><code>elemnum</code> specifies which element number to write to.  It is ignored for detail attributes.</p>\n<p>For vertex attributes, <code>vtxofprim</code> should be -1 if <code>elemnum</code> is the vertex number.  To avoid a call to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexindex\" title=\"Converts a primitive/vertex pair into a linear vertex.\">vertexindex()</a>, if <code>vtxofprim</code> is 0 or above, <code>elemnum</code> is the primitive number and <code>vtxofprim</code> is the offset in the primitive\u2019s vertex list.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n<code>\"set\"</code>\n\n<div class=\"content\">\n<p>Overwrite the attribute with the given value.</p>\n</div>\n</p>\n<p>\n<code>\"add\"</code>\n\n<div class=\"content\">\n<p>Add to the attribute the value.</p>\n</div>\n</p>\n<p>\n<code>\"min\"</code>, <code>\"minimum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"max\"</code>, <code>\"maximum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"mult\"</code>, <code>\"multiply\"</code>\n\n<div class=\"content\">\n<p>Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise.</p>\n</div>\n</p>\n<p>\n<code>\"toggle\"</code>\n\n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n<p>\n<code>\"append\"</code>\n\n<div class=\"content\">\n<p>Valid for string and array attributes.  Appends the source value to the end of the original value.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setattrib\">setattrib</a><div class=\"related-summary\">Writes an attribute value to geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setpointattrib\">setpointattrib</a><div class=\"related-summary\">Sets a point attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setvertexattrib\">setvertexattrib</a><div class=\"related-summary\">Sets a vertex attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setprimattrib\">setprimattrib</a><div class=\"related-summary\">Sets a primitive attribute in a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "attribclass",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int",
                    "const int",
                    "const vector[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setattribtypeinfo": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setattribtypeinfo\">setattribtypeinfo</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets the meaning of an attribute in geometry.</p><ul><li><code>int setattribtypeinfo(int geohandle, string attribtype, string name, string typeinfo)</code></li></ul>\n\n\n\n\n<p>\ngeohandle\n        \n<div class=\"content\">\n<p>A handle to the geometry to write to.\n    <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n</div>\n</p>\n<p>\nattribtype\n        \n<div class=\"content\">\n<p>One of:</p>\n\n<p>\n<code>detail</code> or <code>global</code>\n\n<div class=\"content\">\n<p>Detail attributes.</p>\n</div>\n</p>\n<p>\n<code>point</code>\n\n<div class=\"content\">\n<p>Point attributes.</p>\n</div>\n</p>\n<p>\n<code>pointgroup</code>\n\n<div class=\"content\">\n<p>Point groups.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>Primitive attributes.</p>\n</div>\n</p>\n<p>\n<code>primgroup</code>\n\n<div class=\"content\">\n<p>Primitive groups</p>\n</div>\n</p>\n<p>\n<code>vertex</code>\n\n<div class=\"content\">\n<p>Vertex attributes.</p>\n</div>\n</p>\n\n</div>\n</p>\n<p>\nname\n        \n<div class=\"content\">\n<p>The name of the attribute or group to modify.</p>\n</div>\n</p>\n<p>\ntypeinfo\n        \n<div class=\"content\">\n<p>The meaning of the attribute, which is used by transform nodes to determine how to modify the attribute. It is one of:</p>\n\n<p>\n<code>none</code>\n\n<div class=\"content\">\n<p>No transformations should be applied.</p>\n</div>\n</p>\n<p>\n<code>point</code>\n\n<div class=\"content\">\n<p>Scales, rotations and translations should be applied.</p>\n</div>\n</p>\n<p>\n<code>hpoint</code>\n\n<div class=\"content\">\n<p>A four-vector with scales, rotations and translations applied.</p>\n</div>\n</p>\n<p>\n<code>vector</code>\n\n<div class=\"content\">\n<p>Scales and rotations should be applied.</p>\n</div>\n</p>\n<p>\n<code>normal</code>\n\n<div class=\"content\">\n<p>Scales and rotations should be applied.  Scales are applied with inverse-transpose.</p>\n</div>\n</p>\n<p>\n<code>color</code>\n\n<div class=\"content\">\n<p>No transformations.</p>\n</div>\n</p>\n<p>\n<code>matrix</code>\n\n<div class=\"content\">\n<p>A 4\u00d74 matrix with scale, rotations, and translations applied.</p>\n</div>\n</p>\n<p>\n<code>quaternion</code>\n\n<div class=\"content\">\n<p>A four-vector with rotations applied.</p>\n</div>\n</p>\n<p>\n<code>indexpair</code>\n\n<div class=\"content\">\n<p>No transformations.</p>\n</div>\n</p>\n<p>\n<code>integer</code>\n\n<div class=\"content\">\n<p>Integer values that do not blend when points are averaged.</p>\n</div>\n</p>\n<p>\n<code>integer-blend</code>\n\n<div class=\"content\">\n<p>Integer values that blend when points are averaged.</p>\n</div>\n</p>\n\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "attribtype",
                    "name",
                    "typeinfo"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setcomp": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setcomp\">setcomp</a></h1><span><span class=\"padder\"><span class=\"pillow\">data</span></span></span><p class=\"summary\">Sets a single component of a vector type, matrix type, or array.</p><ul><li><code>void setcomp(vector2 &amp;target, float value, int index)</code></li><li><code>void setcomp(vector &amp;target, float value, int index)</code></li><li><code>void setcomp(vector4 &amp;target, float value, int index)</code></li><li><code>void setcomp(matrix2 &amp;target, float value, int row, int col)</code></li><li><code>void setcomp(matrix3 &amp;target, float value, int row, int col)</code></li><li><code>void setcomp(matrix &amp;target, float value, int row, int col)</code></li><li><code>int setcomp(int[] &amp;target, int value, int index)</code></li><li><code>string setcomp(string[] &amp;target, string value, int index)</code></li><li><code>float setcomp(vector2 &amp;target, float value, int index)</code></li><li><code>float setcomp(vector &amp;target, float value, int index)</code></li><li><code>float setcomp(vector4 &amp;target, float value, int index)</code></li><li><code>float setcomp(matrix2 &amp;target, float value, int row, int col)</code></li><li><code>float setcomp(matrix3 &amp;target, float value, int row, int col)</code></li><li><code>float setcomp(matrix &amp;target, float value, int row, int col)</code></li><li><code>float setcomp(float[] &amp;target, float value, int index)</code></li><li><code>vector2 setcomp(vector2[] &amp;target, vector2 value, int index)</code></li><li><code>vector setcomp(vector[] &amp;target, vector value, int index)</code></li><li><code>vector4 setcomp(vector4[] &amp;target, vector4 value, int index)</code></li><li><code>matrix2 setcomp(matrix2[] &amp;target, matrix2 value, int index)</code></li><li><code>matrix3 setcomp(matrix3[] &amp;target, matrix3 value, int index)</code></li><li><code>matrix setcomp(matrix[] &amp;target, matrix value, int index)</code></li><li><code>light setcomp(light[] &amp;target, light value, int index)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>material setcomp(material[] &amp;target, material value, int index)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>bsdf setcomp(bsdf[] &amp;target, bsdf value, int index)</code></li></ul>\n\n\n\n<p>NOTE:\nYou can also use <code><code>name</code>[<code>index</code>] = <code>value</code></code> notation to set the value\nat <code>index</code> for vectors and arrays. See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../arrays\">arrays</a>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getcomp\">getcomp()</a><div class=\"related-summary\">Extracts a single component of a vector type, matrix type, or array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "target",
                    "value",
                    "row",
                    "col"
                ],
                "args": [
                    "export matrix2",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export matrix2[]",
                    "const matrix2",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "row",
                    "col"
                ],
                "args": [
                    "export matrix3",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export matrix3[]",
                    "const matrix3",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "row",
                    "col"
                ],
                "args": [
                    "export matrix",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export matrix[]",
                    "const matrix",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export bsdf[]",
                    "const bsdf",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "bsdf"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export light[]",
                    "const light",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "light"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export material[]",
                    "const material",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "material"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "row",
                    "col"
                ],
                "args": [
                    "export matrix2",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "row",
                    "col"
                ],
                "args": [
                    "export matrix3",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "row",
                    "col"
                ],
                "args": [
                    "export matrix",
                    "const float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector4",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector2",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export float[]",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export int[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector4",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector4[]",
                    "const vector4",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export string[]",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector2",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector2[]",
                    "const vector2",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector",
                    "const float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "target",
                    "value",
                    "index"
                ],
                "args": [
                    "export vector[]",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector"
            }
        ]
    },
    "setcurrentlight": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setcurrentlight\">setcurrentlight</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span></span><p class=\"summary\">Sets the current light</p><ul><li><code>int setcurrentlight(int lightid)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Sets the current light, and returns true when the light exists and was successfully set. The lightid should be in the set of the values returned by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlights\" title=\"Returns an array of light identifiers for the currently shaded surface.\">getlights()</a>. The current light is used by the following shading functions:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/renderstate\" title=\"Queries the renderer for a named property.\">renderstate()</a>\n</li>\n<li class=\"bullet \">\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlightname\" title=\"Returns the name of the current light when called from within an illuminance loop, or converts an integer light ID into the light\u2019s name.\">getlightname()</a>\n</li>\n</ul>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "lightid"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setdetailattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setdetailattrib\">setdetailattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets a detail attribute in a geometry.</p><ul><li><code>int setdetailattrib(int geohandle, string name, int value)</code></li><li><code>int setdetailattrib(int geohandle, string name, int value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, string value)</code></li><li><code>int setdetailattrib(int geohandle, string name, string value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, float value)</code></li><li><code>int setdetailattrib(int geohandle, string name, float value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, vector2 value)</code></li><li><code>int setdetailattrib(int geohandle, string name, vector2 value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, vector value)</code></li><li><code>int setdetailattrib(int geohandle, string name, vector value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, vector4 value)</code></li><li><code>int setdetailattrib(int geohandle, string name, vector4 value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix2 value)</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix2 value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix3 value)</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix3 value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix value)</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, int[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, int[] value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, string[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, string[] value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, float[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, float[] value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, vector2[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, vector2[] value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, vector[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, vector[] value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, vector4[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, vector4[] value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix2[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix2[] value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix3[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix3[] value, string mode=\"set\")</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix[] value)</code></li><li><code>int setdetailattrib(int geohandle, string name, matrix[] value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes a detail attribute value on the given geometry.\nIt returns the geohandle on success or -1 on failure.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>If the attribute does not exist, this creates the attribute with a default value of zero, empty string, or an empty array.\n    If you want to control the default value of a numeric attribute, use <code>addattrib()</code>.</p>\n</div>\n</div>\n</div>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the attribute to write to.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n<code>\"set\"</code>\n\n<div class=\"content\">\n<p>Overwrite the attribute with the given value.</p>\n</div>\n</p>\n<p>\n<code>\"add\"</code>\n\n<div class=\"content\">\n<p>Add to the attribute the value.</p>\n</div>\n</p>\n<p>\n<code>\"min\"</code>, <code>\"minimum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"max\"</code>, <code>\"maximum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"mult\"</code>, <code>\"multiply\"</code>\n\n<div class=\"content\">\n<p>Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise.</p>\n</div>\n</p>\n<p>\n<code>\"toggle\"</code>\n\n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n<p>\n<code>\"append\"</code>\n\n<div class=\"content\">\n<p>Valid for string and array attributes.  Appends the source value to the end of the original value.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setattrib\">setattrib</a><div class=\"related-summary\">Writes an attribute value to geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setpointattrib\">setpointattrib</a><div class=\"related-summary\">Sets a point attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setvertexattrib\">setvertexattrib</a><div class=\"related-summary\">Sets a vertex attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setprimattrib\">setprimattrib</a><div class=\"related-summary\">Sets a primitive attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detail\">detail</a><div class=\"related-summary\">Imports a detail attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix3[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const matrix[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector4[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setedgegroup": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setedgegroup\">setedgegroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets edge group membership in a geometry.</p><ul><li><code>int setedgegroup(int geohandle, string name, int pt0, int pt1, int value)</code></li></ul>\n\n\n\n<p>Changes a edge group membership on the given geometry.</p>\n<p>If the group does not exist, it will be created.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the group to modify.</p>\n<p><code>pt0</code>, <code>pt1</code> are the point pair the edge to change group membership for.</p>\n<p>If the <code>value</code> is anything other than 0, the point will be in the group.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt0",
                    "pt1",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setpointattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setpointattrib\">setpointattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets a point attribute in a geometry.</p><ul><li><code>int setpointattrib(int geohandle, string name, int pt, int value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, int value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, string value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, string value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, float value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, float value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector2 value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector2 value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector4 value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector4 value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix2 value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix2 value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix3 value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix3 value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, int[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, int[] value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, string[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, string[] value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, float[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, float[] value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector2[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector2[] value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector[] value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector4[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, vector4[] value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix2[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix2[] value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix3[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix3[] value, string mode=\"set\")</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix[] value)</code></li><li><code>int setpointattrib(int geohandle, string name, int pt, matrix[] value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes a point attribute value on the given geometry.\nIt returns the geohandle on success or -1 on failure.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>If the attribute does not exist, this creates the attribute with a default value of zero, empty string, or an empty array.\n    If you want to control the default value of a numeric attribute, use <code>addattrib()</code>.</p>\n</div>\n</div>\n</div>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the attribute to write to.</p>\n<p><code>pt</code> is the point number to write to.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n<code>\"set\"</code>\n\n<div class=\"content\">\n<p>Overwrite the attribute with the given value.</p>\n</div>\n</p>\n<p>\n<code>\"add\"</code>\n\n<div class=\"content\">\n<p>Add to the attribute the value.</p>\n</div>\n</p>\n<p>\n<code>\"min\"</code>, <code>\"minimum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"max\"</code>, <code>\"maximum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"mult\"</code>, <code>\"multiply\"</code>\n\n<div class=\"content\">\n<p>Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise.</p>\n</div>\n</p>\n<p>\n<code>\"toggle\"</code>\n\n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n<p>\n<code>\"append\"</code>\n\n<div class=\"content\">\n<p>Valid for string and array attributes.  Appends the source value to the end of the original value.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setattrib\">setattrib</a><div class=\"related-summary\">Writes an attribute value to geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setvertexattrib\">setvertexattrib</a><div class=\"related-summary\">Sets a vertex attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setprimattrib\">setprimattrib</a><div class=\"related-summary\">Sets a primitive attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setdetailattrib\">setdetailattrib</a><div class=\"related-summary\">Sets a detail attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/point\">point</a><div class=\"related-summary\">Imports a point attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setpointgroup": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setpointgroup\">setpointgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets point group membership in a geometry.</p><ul><li><code>int setpointgroup(int geohandle, string name, int pt, int value)</code></li><li><code>int setpointgroup(int geohandle, string name, int pt, int value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes a point group membership on the given geometry.</p>\n<p>If the group does not exist, it will be created.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the group to modify.</p>\n<p><code>pt</code> is the point number to change group membership for.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n\"set\"\n        \n<div class=\"content\">\n<p>Overwrite the attribute with the given value.  If the value is anything other than 0, the point will be in the group.</p>\n</div>\n</p>\n<p>\n\"add\"\n        \n<div class=\"content\">\n<p>Add to the attribute the value.  If the sum is anything other than 0, the point will be in the group.</p>\n</div>\n</p>\n<p>\n\"min\", \"minimum\"\n        \n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.  If the minimum is anything other than 0, the point will be in the group.</p>\n</div>\n</p>\n<p>\n\"max\", \"maximum\"\n        \n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.  If the maximum is anything other than 0, the point will be in the group.</p>\n</div>\n</p>\n<p>\n\"mult\", \"multiply\"\n        \n<div class=\"content\">\n<p>Multiply the attribute by the value.  If the product is anything other than 0, the point will be in the group.</p>\n</div>\n</p>\n<p>\n\"toggle\"\n        \n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "pt",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setprimattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setprimattrib\">setprimattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets a primitive attribute in a geometry.</p><ul><li><code>int setprimattrib(int geohandle, string name, int prim, int value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, int value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, string value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, string value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, float value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, float value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector2 value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector2 value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector4 value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector4 value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix2 value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix2 value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix3 value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix3 value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, int[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, int[] value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, string[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, string[] value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, float[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, float[] value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector2[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector2[] value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector[] value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector4[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, vector4[] value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix2[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix2[] value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix3[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix3[] value, string mode=\"set\")</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix[] value)</code></li><li><code>int setprimattrib(int geohandle, string name, int prim, matrix[] value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes a primitive attribute value on the given geometry.\nIt returns the geohandle on success or -1 on failure.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>If the attribute does not exist, this creates the attribute with a default value of zero, empty string, or an empty array.\n    If you want to control the default value of a numeric attribute, use <code>addattrib()</code>.</p>\n</div>\n</div>\n</div>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the attribute to write to.</p>\n<p><code>prim</code> is the primitive number to write to.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n<code>\"set\"</code>\n\n<div class=\"content\">\n<p>Overwrite the attribute with the given value.</p>\n</div>\n</p>\n<p>\n<code>\"add\"</code>\n\n<div class=\"content\">\n<p>Add to the attribute the value.</p>\n</div>\n</p>\n<p>\n<code>\"min\"</code>, <code>\"minimum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"max\"</code>, <code>\"maximum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"mult\"</code>, <code>\"multiply\"</code>\n\n<div class=\"content\">\n<p>Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise.</p>\n</div>\n</p>\n<p>\n<code>\"toggle\"</code>\n\n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n<p>\n<code>\"append\"</code>\n\n<div class=\"content\">\n<p>Valid for string and array attributes.  Appends the source value to the end of the original value.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setattrib\">setattrib</a><div class=\"related-summary\">Writes an attribute value to geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setpointattrib\">setpointattrib</a><div class=\"related-summary\">Sets a point attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setvertexattrib\">setvertexattrib</a><div class=\"related-summary\">Sets a vertex attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setdetailattrib\">setdetailattrib</a><div class=\"related-summary\">Sets a detail attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/prim\">prim</a><div class=\"related-summary\">Imports a primitive attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setprimgroup": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setprimgroup\">setprimgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets primitive group membership in a geometry.</p><ul><li><code>int setprimgroup(int geohandle, string name, int prim, int value)</code></li><li><code>int setprimgroup(int geohandle, string name, int prim, int value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes a primitive group membership on the given geometry.</p>\n<p>If the group does not exist, it will be created.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be\nused to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the group to write to.</p>\n<p><code>prim</code> is the primitive number to change group membership for.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n\"set\"\n        \n<div class=\"content\">\n<p>Overwrite the attribute with the given value.  If the value is anything other than 0, the primitive will be in the group.</p>\n</div>\n</p>\n<p>\n\"add\"\n        \n<div class=\"content\">\n<p>Add to the attribute the value.  If the sum is anything other than 0, the primitive will be in the group.</p>\n</div>\n</p>\n<p>\n\"min\", \"minimum\"\n        \n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.  If the minimum is anything other than 0, the primitive will be in the group.</p>\n</div>\n</p>\n<p>\n\"max\", \"maximum\"\n        \n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.  If the maximum is anything other than 0, the primitive will be in the group.</p>\n</div>\n</p>\n<p>\n\"mult\", \"multiply\"\n        \n<div class=\"content\">\n<p>Multiply the attribute by the value.  If the product is anything other than 0, the primitive will be in the group.</p>\n</div>\n</p>\n<p>\n\"toggle\"\n        \n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setprimintrinsic": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setprimintrinsic\">setprimintrinsic</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets a primitive intrinsic value in a geometry.</p><ul><li><code>int setprimintrinsic(int geohandle, string name, int prim, int value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, int value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, string value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, string value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, float value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, float value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector2 value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector2 value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector4 value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector4 value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix2 value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix2 value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix3 value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix3 value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, int[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, int[] value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, string[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, string[] value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, float[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, float[] value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector2[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector2[] value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector[] value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector4[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, vector4[] value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix2[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix2[] value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix3[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix3[] value, string mode=\"set\")</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix[] value)</code></li><li><code>int setprimintrinsic(int geohandle, string name, int prim, matrix[] value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes a primitive intrinsic value on the given geometry.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the intrinsic to write to.</p>\n<p><code>prim</code> is the primitive number to write to.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n\"set\"\n        \n<div class=\"content\">\n<p>Overwrite the attribute with the given value.</p>\n</div>\n</p>\n<p>\n\"add\"\n        \n<div class=\"content\">\n<p>Add to the attribute the value.</p>\n</div>\n</p>\n<p>\n\"min\", \"minimum\"\n        \n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.</p>\n</div>\n</p>\n<p>\n\"max\", \"maximum\"\n        \n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.</p>\n</div>\n</p>\n<p>\n\"mult\", \"multiply\"\n        \n<div class=\"content\">\n<p>Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise.</p>\n</div>\n</p>\n<p>\n\"toggle\"\n        \n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix3[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const matrix[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector4[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const vector[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "setprimvertex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setprimvertex\">setprimvertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Rewires a vertex in the geometry to a different point.</p><ul><li><code>int setprimvertex(int geohandle, int prim, int vtxofprim, int pt)</code></li></ul>\n\n\n\n<p>Rewires a specified vertex to a point number.</p>\n<p>If the point number is -1, no rewiring is done.</p>\n<p>If prim is -1, <code>vtxofprim</code> is treated as a linear index, and vice versa.  Otherwise, the pair (<code>prim</code>, <code>vtxofprim</code>) is used to identify a vertex in a primitive\u2019s vertex list.</p>\n<p>Since this sets a vertex\u2019s point, not a primitive\u2019s vertex, it\u2019s recommended to use the equivalent function <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setvertexpoint\" title=\"Rewires a vertex in the geometry to a different point.\">setvertexpoint()</a> for clarity, instead.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setvertexpoint\">setvertexpoint()</a><div class=\"related-summary\">Rewires a vertex in the geometry to a different point.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "vtxofprim",
                    "pt"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setsamplestore": {
        "added": "15.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setsamplestore\">setsamplestore</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.5</span></span><span class=\"padder\"><span class=\"pillow\">properties</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Stores sample data in a channel, referenced by a point.</p><ul><li><code>int setsamplestore(string channel, vector P, int value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int setsamplestore(string channel, vector P, float value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int setsamplestore(string channel, vector P, vector value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int setsamplestore(string channel, vector P, vector4 value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Stores a value in a named channel at a specified point.\nReturns a non-zero value on success, or returns 0 if the data could not be set.</p>\n<p>The sample store can be thought of as an in-memory point cloud, storing\nshading data at points. This allows data to be accessed across shader\nboundaries, unlike the internal export/import system. For example,\na lens shader could store data to be passed to the surface shader,\nan operation that is not supported using export variables due to the\nlayout of the shading pipeline.</p>\n<p>Please note that the stored samples can only be accessed within the same render\ntile.</p>\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n<code class=\"line\">cvex displacedlens(\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Inputs\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float x = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float y = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float Time = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float dofx = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float dofy = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float aspect = 1;\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float displaceScale = 1.0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0float displaceGain = 0.1;\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Outputs\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0export vector P = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0export vector I = 0;\n</code><code class=\"line\">)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0P = {x, y, 0};\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0I = {1, 0, 0};\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector displace = noise(P * displaceScale) * displaceGain;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0I += displace;\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Store the displacement at the eye point, 'P'\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int status = setsamplestore(\"displacedlens_d\", P, displace);\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">surface mysurface()\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Get the displacement at the eye point, 'Eye'\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector displace = 0;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int status = getsamplestore(\"displacedlens_d\", Eye, displace);\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0//...\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getsamplestore\">getsamplestore()</a><div class=\"related-summary\">Looks up sample data in a channel, referenced by a point.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "channel",
                    "P",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel",
                    "P",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel",
                    "P",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "channel",
                    "P",
                    "value"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setvertexattrib": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setvertexattrib\">setvertexattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets a vertex attribute in a geometry.</p><ul><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, int value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, int value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, string value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, string value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, float value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, float value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector2 value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector2 value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector4 value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector4 value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix2 value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix2 value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix3 value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix3 value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, int[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, int[] value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, string[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, string[] value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, float[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, float[] value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector2[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector2[] value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector[] value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector4[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, vector4[] value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix2[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix2[] value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix3[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix3[] value, string mode=\"set\")</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix[] value)</code></li><li><code>int setvertexattrib(int geohandle, string name, int elemnum, int vtxofprim, matrix[] value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes a vertex attribute value on the given geometry.\nIt returns the geohandle on success or -1 on failure.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>If the attribute does not exist, this creates the attribute with a default value of zero, empty string, or an empty array.\n    If you want to control the default value of a numeric attribute, use <code>addattrib()</code>.</p>\n</div>\n</div>\n</div>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the attribute, group, or intrinsic to write to.</p>\n<p><code>elemnum</code> and <code>vtxofprim</code> specify which element number to write to.\n<code>vtxofprim</code> should be -1 if <code>elemnum</code> is the vertex number.  To avoid a call to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexindex\" title=\"Converts a primitive/vertex pair into a linear vertex.\">vertexindex()</a>, if <code>vtxofprim</code> is 0 or above, <code>elemnum</code> is the primitive number and <code>vtxofprim</code> is the offset in the primitive\u2019s vertex list.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n<code>\"set\"</code>\n\n<div class=\"content\">\n<p>Overwrite the attribute with the given value.</p>\n</div>\n</p>\n<p>\n<code>\"add\"</code>\n\n<div class=\"content\">\n<p>Add to the attribute the value.</p>\n</div>\n</p>\n<p>\n<code>\"min\"</code>, <code>\"minimum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"max\"</code>, <code>\"maximum\"</code>\n\n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.</p>\n</div>\n</p>\n<p>\n<code>\"mult\"</code>, <code>\"multiply\"</code>\n\n<div class=\"content\">\n<p>Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise.</p>\n</div>\n</p>\n<p>\n<code>\"toggle\"</code>\n\n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n<p>\n<code>\"append\"</code>\n\n<div class=\"content\">\n<p>Valid for string and array attributes.  Appends the source value to the end of the original value.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setattrib\">setattrib</a><div class=\"related-summary\">Writes an attribute value to geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setpointattrib\">setpointattrib</a><div class=\"related-summary\">Sets a point attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setprimattrib\">setprimattrib</a><div class=\"related-summary\">Sets a primitive attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setdetailattrib\">setdetailattrib</a><div class=\"related-summary\">Sets a detail attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertex\">vertex</a><div class=\"related-summary\">Imports a vertex attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix3[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const matrix[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const float[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector4[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector2[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const vector[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setvertexgroup": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setvertexgroup\">setvertexgroup</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Sets vertex group membership in a geometry.</p><ul><li><code>int setvertexgroup(int geohandle, string name, int prim, int vtx, int value)</code></li><li><code>int setvertexgroup(int geohandle, string name, int elemnum, int vtxofprim, int value, string mode=\"set\")</code></li></ul>\n\n\n\n<p>Changes a vertex group membership on the given geometry.</p>\n<p>If the group does not exist, it will be created.</p>\n<p><code>geohandle</code> is a handle to the geometry to write to.  <code>geoself()</code> can be used to get a handle to the current geometry.</p>\n<p><code>name</code> is the name of the group to modify.</p>\n<p><code>elemnum</code> and <code>vtxofprim</code> specify which element number to write to.\n<code>vtxofprim</code> should be -1 if <code>elemnum</code> is the vertex number.  To avoid a call to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexindex\" title=\"Converts a primitive/vertex pair into a linear vertex.\">vertexindex()</a>, if <code>vtxofprim</code> is 0 or above, <code>elemnum</code> is the primitive number and <code>vtxofprim</code> is the offset in the primitive\u2019s vertex list.</p>\n<p><code>mode</code> is one of:</p>\n\n<p>\n\"set\"\n        \n<div class=\"content\">\n<p>Overwrite the attribute with the given value.  If the value is anything other than 0, the vertex will be in the group.</p>\n</div>\n</p>\n<p>\n\"add\"\n        \n<div class=\"content\">\n<p>Add to the attribute the value.  If the sum is anything other than 0, the vertex will be in the group.</p>\n</div>\n</p>\n<p>\n\"min\", \"minimum\"\n        \n<div class=\"content\">\n<p>Set the attribute to the minimum of itself and the value.  If the minimum is anything other than 0, the vertex will be in the group.</p>\n</div>\n</p>\n<p>\n\"max\", \"maximum\"\n        \n<div class=\"content\">\n<p>Set the attribute to the maximum of itself and the value.  If the maximum is anything other than 0, the vertex will be in the group.</p>\n</div>\n</p>\n<p>\n\"mult\", \"multiply\"\n        \n<div class=\"content\">\n<p>Multiply the attribute by the value.  If the product is anything other than 0, the vertex will be in the group.</p>\n</div>\n</p>\n<p>\n\"toggle\"\n        \n<div class=\"content\">\n<p>Toggles the attribute, independent of the source value.  Useful for toggling group membership.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "prim",
                    "vtx",
                    "value"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geohandle",
                    "name",
                    "elemnum",
                    "vtxofprim",
                    "value",
                    "mode=\"set\""
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int",
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "setvertexpoint": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/setvertexpoint\">setvertexpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Rewires a vertex in the geometry to a different point.</p><ul><li><code>int setvertexpoint(int geohandle, int prim, int vtxofprim, int pt)</code></li></ul>\n\n\n\n<p>Rewires a specified vertex to a point number.</p>\n<p>If the point number is -1, no rewiring is done.</p>\n<p>If prim is -1, <code>vtxofprim</code> is treated as a linear index, and vice versa.  Otherwise, the pair (<code>prim</code>, <code>vtxofprim</code>) is used to identify a vertex in a primitive\u2019s vertex list.</p>\n<p>This function is a new name for the equivalent function <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/setprimvertex\" title=\"Rewires a vertex in the geometry to a different point.\">setprimvertex()</a>, added for clarity.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexpoint\">vertexpoint()</a><div class=\"related-summary\">Returns the point number of linear vertex in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexprim\">vertexprim()</a><div class=\"related-summary\">Returns the primitive number of a linear vertex in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexprimindex\">vertexprimindex()</a><div class=\"related-summary\">Converts a linear vertex number into a vertex number within that primitive.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexindex\">vertexindex()</a><div class=\"related-summary\">Converts a primitive/vertex pair into a linear vertex.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexnext\">vertexnext()</a><div class=\"related-summary\">Returns the linear vertex number of next shared vertex in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexprev\">vertexprev()</a><div class=\"related-summary\">Returns the linear vertex number of previous shared vertex in a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "geohandle",
                    "prim",
                    "vtxofprim",
                    "pt"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "shadow": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/shadow\">shadow</a></h1><span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Calls shadow shaders for the current light source.</p><ul><li><code>void shadow(vector &amp;Cl)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>void shadow(vector &amp;Cl, vector P, vector L)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>vector shadow(vector Cl)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>vector shadow(vector Cl, vector P, vector L)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Calls shadow shaders for the current light source. This function can\nonly be called from within an <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> statement. The\nshadow(vector &amp;Cl) signature will assume the <code>P</code> and <code>L</code> global variables,\nso if you wish to shadow at another position you must use the 3-argument\nversion of shadow().</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "Cl"
                ],
                "args": [
                    "export vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "Cl"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "Cl",
                    "P",
                    "L"
                ],
                "args": [
                    "export vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "Cl",
                    "P",
                    "L"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            }
        ]
    },
    "shadow_light": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/shadow_light\">shadow_light</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span></span><p class=\"summary\">Executes the shadow shader for a given light and returns the amount of shadowing as a multiplier of the shaded color.</p><ul><li><code>vector shadow_light(int lightid, vector pos, vector dir, float time, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>This operation is similar to the shadow() function but it allows execution\nof the shadow shader outside an illuminance loop.  The position and\ndirection toward the light source are provided directly, and the shadow\nshader is executed - returning the shadow multiplier.  To produce the final\nshadowed color, multiply the shaded color by the value returned by\nshadow_light.</p>\n<p>Keyword variadic arguments can be passed to the shadow shader, for import\nin the shadow shader with with simport().</p>\n<p><code>lightid</code>:\nA light identifier, as returned by <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/getlights\" title=\"Returns an array of light identifiers for the currently shaded surface.\">getlights()</a>.</p>\n<p><code>pos</code>:\nThe origin of the ray (such as the global variable <code>P</code>).</p>\n<p><code>dir</code>:\nDirection vector from the origin. The length of this vector should be\nthe distance from <em>pos</em> to the light source.</p>\n<p><code>time</code>:\nTime to send the ray at.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/shadow\">shadow()</a><div class=\"related-summary\">Calls shadow shaders for the current light source.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_light\">sample_light()</a><div class=\"related-summary\">Samples a 3D position on a light source and runs the light shader at that point.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/intersect_lights\">intersect_lights()</a><div class=\"related-summary\">Finds the nearest intersection of a ray with any of a list of (area) lights and runs the light shader at the intersection point.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lightid",
                    "pos",
                    "dir",
                    "time"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "shadowmap": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/shadowmap\">shadowmap</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span></span><p class=\"summary\">The shadowmap function will treat the shadow map as if the image were\nrendered from a light source.</p><ul><li><code>float shadowmap(string filename, vector Pndc, float spread, float bias, float quality, ...)</code></li><li><code>vector shadowmap(string filename, vector Pndc, float spread, float bias, float quality, ...)</code></li><li><code>vector shadowmap(string filename, vector rect1, vector rect2, vector rect3, vector rect4, float spread, float bias, float quality, ...)</code></li></ul>\n\n\n\n<p>NOTE:\nThe shadowmap() operation that takes 4 vectors allow you to specify your own sampling rectangle. If you don\u2019t want any filtering of the shadow map or you are unable to compute your own derivatives, you can just pass in the same vector repeated 4 times to perform no filtering.</p>\n<p>The <code>shadowmap</code> function will treat the shadow map as if the image were\nrendered from a light source. You use this to access both depth maps and\ndeep shadow maps. In both cases it returns a vector where each color\ncomponent has the visibility of the light source to the point for that\ncolor.</p>\n<p><code>Pndc</code> is the position of the point being shaded in the NDC space of\nthe light\u2019s projection. <code>spread</code> is a softness control on the shadow.\n<code>bias</code> controls how accurate the depth samples need to be. <code>quality</code>\nis a general control to increase/decrease sampling, where <code>1</code> is default\nquality.</p>\n<p>NOTE:\nThis function returns the fractional amount of illumination which\nreaches the sample point. For example, if the point is fully in\nshadow, the return value will be 0, if it is fully illuminated, the\nreturn value will be 1.</p>\n<p>The shadowmap() VEX function takes the same variadic arguments as texture(). For additional information, see <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/texture\" title=\"Computes a filtered sample of the texture map specified.\">texture</a>.</p>\n\n<h2 class=\"label heading\" id=\"deep-camera-map-channels\">\n            \n            Deep camera map channels\n        </h2>\n<div class=\"content\" id=\"deep-camera-map-channels-body\">\n<p>If the shadow map is a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../render/dcm\">Deep camera map</a>,\n<code>shadowmap</code> takes an optional extra argument <code>\"channel\"</code>, followed by the\nstring name of the channel in the map evaluate.</p>\n<div class=\"code-container\">\n<code class=\"line\">shadowmap(mapname, pz, spread, bias, quality, \"channel\", channel);\n</code>\n</div>\n<p>This uses the same opacity semantics, so the function will return the\ncomplement of the actual color.  So, to get accurate results, you will\nusually want to evaluate:</p>\n<div class=\"code-container\">\n<code class=\"line\">{1,1,1} - shadowmap(...);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/depthmap\">depthmap</a><div class=\"related-summary\">The depthmap functions work on an image which was rendered as a\nz-depth image from mantra.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "Pndc",
                    "spread",
                    "bias",
                    "quality"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "Pndc",
                    "spread",
                    "bias",
                    "quality"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "rect1",
                    "rect2",
                    "rect3",
                    "rect4",
                    "spread",
                    "bias",
                    "quality"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "shimport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/shimport\">shimport</a></h1><span><span class=\"padder\"><span class=\"pillow\">fog</span></span><span class=\"padder\"><span class=\"pillow\">shadedata</span></span><span class=\"padder\"><span class=\"pillow\">surface</span></span></span><p class=\"summary\">Imports a variable from the shadow shader for the surface.</p><ul><li><code>int shimport(string name, int &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int shimport(string name, string &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int shimport(string name, float &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int shimport(string name, vector2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int shimport(string name, vector &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int shimport(string name, vector4 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int shimport(string name, matrix2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int shimport(string name, matrix3 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int shimport(string name, matrix &amp;value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Imports a variable from the shadow shader for the surface.</p>\n<p>If the shader variable named by the first argument is defined and\nexported, the function returns 1 and puts the value in the second\nargument. Otherwise, it returns 0.</p>\n<p>This function is only valid inside an <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> loop.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix2"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix3"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export float"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export int"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector4"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export string"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector2"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector"
                ],
                "contexts": [
                    "surface",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "shl": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/shl\">shl</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Bit-shifts an integer left.</p><ul><li><code>int shl(int a, int bits)</code></li></ul>\n\n\n\n<p>Bit-shifts <code>a</code> to the left by <code>bits</code>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/shr\">shr()</a><div class=\"related-summary\">Bit-shifts an integer right.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/shrz\">shrz()</a><div class=\"related-summary\">Bit-shifts an integer right.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "bits"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "shr": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/shr\">shr</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Bit-shifts an integer right.</p><ul><li><code>int shr(int a, int bits)</code></li></ul>\n\n\n\n<p>Bit-shifts <code>a</code> to the right by <code>bits</code>.</p>\n<p>This is an arithmetic shift, the sign is shifted with it.  Thus, <code>shr(-1, 2)</code>\nwill give -1, not zero.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/shl\">shl()</a><div class=\"related-summary\">Bit-shifts an integer left.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/shrz\">shrz()</a><div class=\"related-summary\">Bit-shifts an integer right.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "bits"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "shrz": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/shrz\">shrz</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Bit-shifts an integer right.</p><ul><li><code>int shrz(int a, int bits)</code></li></ul>\n\n\n\n<p>Bit-shifts <code>a</code> to the right by <code>bits</code>.  This is a zero-extend shift, so\nnew bits are always zero.  Thus, <code>shrz(-1, 2)</code> is zero, not -1.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/shl\">shl()</a><div class=\"related-summary\">Bit-shifts an integer left.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/shr\">shr()</a><div class=\"related-summary\">Bit-shifts an integer right.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "bits"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "sign": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sign\">sign</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the sign of the argument.</p><ul><li><code>int sign(int value)</code></li><li><code>float sign(float value)</code></li><li><code>vector2 sign(vector2 value)</code></li><li><code>vector sign(vector value)</code></li><li><code>vector4 sign(vector4 value)</code></li></ul>\n\n\n\n<p>For a scalar value, returns -1 for a negative number, 0 for the number zero,\nand +1 for a positive number. For vector values the sign of the individual\ncomponents is returned as a vector.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "simport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/simport\">simport</a></h1><span><span class=\"padder\"><span class=\"pillow\">fog</span></span><span class=\"padder\"><span class=\"pillow\">shadedata</span></span></span><p class=\"summary\">Imports a variable sent by a surface shader in an illuminance loop.</p><ul><li><code>int simport(string name, int &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int simport(string name, string &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int simport(string name, float &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int simport(string name, vector2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int simport(string name, vector &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int simport(string name, vector4 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int simport(string name, matrix2 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int simport(string name, matrix3 &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>int simport(string name, matrix &amp;value)</code><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">shadow</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Imports a variable from the surface shader.</p>\n<p>Mantra runs the shaders for a surface in a fixed order:</p>\n<ol>\n<li>\n<p>Displacement</p>\n</li>\n<li>\n<p>Surface (possibly calling light shaders in <code>illuminance</code> loops)</p>\n</li>\n<li>\n<p>Fog (possibly calling light shaders in <code>illuminance</code> loops)</p>\n</li>\n</ol>\n<p>Once the displacement shader has run, you can use <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/dimport\" title=\"Imports a variable from the displacement shader for the surface.\">dimport()</a>\nto retrieve exported variables from it. Once the surface shader\nhas run, you can use <code>simport</code> to retrieve exported variables\nfrom it.</p>\n<p>If the shader variable named by the first argument is defined and\nexported, the function returns 1 and puts the value in the second\nargument. Otherwise, it returns 0.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/dimport\">dimport()</a><div class=\"related-summary\">Imports a variable from the displacement shader for the surface.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix2"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix3"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export matrix"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export float"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export int"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector4"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export string"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector2"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "name",
                    "value"
                ],
                "args": [
                    "const string",
                    "export vector"
                ],
                "contexts": [
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "sin": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sin\">sin</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the sine of the argument.</p><ul><li><code>float sin(float value)</code></li><li><code>vector2 sin(vector2 value)</code></li><li><code>vector sin(vector value)</code></li><li><code>vector4 sin(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the sine of <code>value</code>, where <code>value</code> is given in radians.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sinh": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sinh\">sinh</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the hyperbolic sine of the argument.</p><ul><li><code>float sinh(float value)</code></li><li><code>vector2 sinh(vector2 value)</code></li><li><code>vector sinh(vector value)</code></li><li><code>vector4 sinh(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the hyperbolic sine of <code>value</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sleep": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sleep\">sleep</a></h1><span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Yields processing for a certain number of milliseconds.</p><ul><li><code>void sleep(int milliseconds)</code></li></ul>\n\n\n\n<p>Yields processing for a certain number of milliseconds.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "milliseconds"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "slerp": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/slerp\">slerp</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Quaternion blend between q1 and q2 based on the bias.</p><ul><li><code>vector4 slerp(vector4 q1, vector4 q2, float bias)</code></li></ul>\n\n\n\n<p>Quaternion blend between <code>q1</code> and <code>q2</code> based on the <code>bias</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "q1",
                    "q2",
                    "bias"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            }
        ]
    },
    "slice": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/slice\">slice</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Slices a sub-string or sub-array of a string or array.</p><ul><li><code>string slice(string s, int start, int end)</code></li><li><code>string slice(string s, int start, int end, int step)</code></li><li><code>string slice(string s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>int[] slice(int[] s, int start, int end)</code></li><li><code>int[] slice(int[] s, int start, int end, int step)</code></li><li><code>int[] slice(int[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>string[] slice(string[] s, int start, int end)</code></li><li><code>string[] slice(string[] s, int start, int end, int step)</code></li><li><code>string[] slice(string[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>float[] slice(float[] s, int start, int end)</code></li><li><code>float[] slice(float[] s, int start, int end, int step)</code></li><li><code>float[] slice(float[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>vector2[] slice(vector2[] s, int start, int end)</code></li><li><code>vector2[] slice(vector2[] s, int start, int end, int step)</code></li><li><code>vector2[] slice(vector2[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>vector[] slice(vector[] s, int start, int end)</code></li><li><code>vector[] slice(vector[] s, int start, int end, int step)</code></li><li><code>vector[] slice(vector[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>vector4[] slice(vector4[] s, int start, int end)</code></li><li><code>vector4[] slice(vector4[] s, int start, int end, int step)</code></li><li><code>vector4[] slice(vector4[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>matrix2[] slice(matrix2[] s, int start, int end)</code></li><li><code>matrix2[] slice(matrix2[] s, int start, int end, int step)</code></li><li><code>matrix2[] slice(matrix2[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>matrix3[] slice(matrix3[] s, int start, int end)</code></li><li><code>matrix3[] slice(matrix3[] s, int start, int end, int step)</code></li><li><code>matrix3[] slice(matrix3[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li><li><code>matrix[] slice(matrix[] s, int start, int end)</code></li><li><code>matrix[] slice(matrix[] s, int start, int end, int step)</code></li><li><code>matrix[] slice(matrix[] s, int hasstart, int start, int hasend, int end, int hasstep, int step)</code></li></ul>\n\n\n\n<p>Extracts a string or array from a larger array.</p>\n<p>This behavior can also be accessed using the : notation with the array\noperations.</p>\n<p>If start or end are negative, they refer to distances from the end of the array.</p>\n<p>The final range to extract is clamped to the bounds of the original array.</p>\n<p>If step is zero, it is an error and an empty string or array is returned.</p>\n<p>If step is negative, the end should be below the start.</p>\n<p>end is not included in the resulting slice.  Thus if start and end are the\nsame, an empty string or slice is returned.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/len\">len()</a><div class=\"related-summary\">Returns the length of an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/push\">push()</a><div class=\"related-summary\">Adds an item to an array.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/append\">append()</a><div class=\"related-summary\">Adds an item to an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/resize\">resize()</a><div class=\"related-summary\">Sets the length of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix2[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const matrix2[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const matrix2[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix3[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const matrix3[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const matrix3[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const matrix[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const matrix[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const matrix[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const float[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const float[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const float[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "float[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const int[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const int[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const int[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "int[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector4[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const vector4[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const vector4[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const string[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const string[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const string[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "string[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector2[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const vector2[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const vector2[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end"
                ],
                "args": [
                    "const vector[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "s",
                    "start",
                    "end",
                    "step"
                ],
                "args": [
                    "const vector[]",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "s",
                    "hasstart",
                    "start",
                    "hasend",
                    "end",
                    "hasstep",
                    "step"
                ],
                "args": [
                    "const vector[]",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "vector[]"
            }
        ]
    },
    "slideframe": {
        "added": "15.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/slideframe\">slideframe</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.5</span></span></span><p class=\"summary\">Finds the normal component of frame slid along a curve. </p><ul><li><code>vector slideframe(vector x0, vector t0, vector n0, vector x1, vector t1)</code></li></ul>\n\n\n\n<p>Given two points <code>x0</code> and <code>x1</code> with respective tangent vectors <code>t0</code> and <code>t1</code> along a curve, as well as the curve normal <code>n0</code> at the first point, this function returns the minimum rotation transfer of <code>n0</code> to the second point.</p>\n<p>You use this function to extend a curve normal at the starting point of a curve to the entire curve in a rotation minimizing fashion. </p>\n<p>See <a class=\"link missing \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../examples/nodes/sop/attribwrangle/curveframe\">an example</a>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "x0",
                    "t0",
                    "n0",
                    "x1",
                    "t1"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "smooth": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/smooth\">smooth</a></h1><span><span class=\"padder\"><span class=\"pillow\">interp</span></span></span><p class=\"summary\">Computes a number between zero and one.</p><ul><li><code>float smooth(float value1, float value2, float amount)</code></li><li><code>float smooth(float value1, float value2, float amount, float rolloff)</code></li></ul>\n\n\n\n<p>Computes a number between zero and one. Returns 0 if the amount passed\nin is less than or equal to value1, 1 if the amount is greater than or\nequal to value2.</p>\n<p>If the amount is between value1 and value2, a smooth (easin/easeout)\ninterpolation is computed. If a rolloff is specified, the inflection\npoint of the blend will be shifted.</p>\n<p>If the rolloff is greater than 1, the shift will be to the right, if the\nrolloff is less than 1 (and greater than 0), the shift will be to the\nleft.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value1",
                    "value2",
                    "amount",
                    "rolloff"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "smoothrotation": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/smoothrotation\">smoothrotation</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">matrix</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the closest equivalent Euler rotations to a reference rotation.</p><ul><li><code>vector smoothrotation(int order, vector r, vector r_reference)</code></li></ul>\n\n\n\n<p>Returns the Euler rotations that have the closest values to <code>r_reference</code> while still describing the same orientation as <code>r</code>.\nTypically, <code>r_reference</code> will be the rotations from the previous sample or frame.</p>\n<p>The angles are in radians.  Use the <code>radians()</code> function to convert degrees into radians.</p>\n<p>The rotation order is specified by the <code>order</code> parameter. Use the constants defined in <code>$HH/vex/include/math.h</code> (for example, <code>XFORM_XYZ</code>).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "order",
                    "r",
                    "r_reference"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "snoise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/snoise\">snoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">These functions are similar to wnoise.</p><ul><li><code>float snoise(vector pos)</code></li><li><code>float snoise(vector pos, int turbulence, float rough, float atten)</code></li><li><code>vector snoise(vector pos)</code></li><li><code>vector snoise(vector pos, int turbulence, float rough, float atten)</code></li></ul>\n\n\n\n<p>These functions are similar to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/wnoise\" title=\"Worley noise scatters points randomly through space (according to a\nnice Poisson distribution).\">wnoise</a>. The noise returned\nis based on the weights of all of the closest points, with each point\u2019s\ncontribution based on a meta-ball like rolloff curve. That is, if the\nsample point is close to the sphere, its contribution will be greater.</p>\n<p>The bounds on the noise are roughly (-1.7, 1.7). Only 3D noise is\nsupported. However, this noise has the ability to compute turbulence\nwith roughness and attenuation on the noise.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos",
                    "turbulence",
                    "rough",
                    "atten"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "pos",
                    "turbulence",
                    "rough",
                    "atten"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "solid_angle": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/solid_angle\">solid_angle</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\">Computes the solid angle (in steradians) a bsdf\u2019s function subtends.</p><ul><li><code>float solid_angle(bsdf b, int mask)</code></li></ul>\n\n\n\n\n<p>\n<code>b</code>\n\n<div class=\"content\">\n<p>BSDF to sample.</p>\n</div>\n</p>\n<p>\n<code>mask</code>\n\n<div class=\"content\">\n<p>A bitmask indicating which types of bounces to evaluate.\n    \n    \n    <p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n</p>\n</div>\n</p>\n\n<div class=\"code-container\">\n<code class=\"line\">// Split BSDF into component lobes\n</code><code class=\"line\">bsdf lobes[] = split_bsdf(hitF);\n</code><code class=\"line\">\n</code><code class=\"line\">// Get solid angle of lobes\n</code><code class=\"line\">float angles[];\n</code><code class=\"line\">resize(angles, len(lobes));\n</code><code class=\"line\">for (int i = 0; i &lt; len(lobes); i++)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0angles[i] = solid_angle(lobes[i], PBR_ALL_MASK);\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">// Compute PDF from angles\n</code><code class=\"line\">float pdf[] = compute_pdf(angles);\n</code><code class=\"line\">\n</code><code class=\"line\">// Compute CDF from PDF\n</code><code class=\"line\">float cdf[] = compute_cdf(pdf);\n</code><code class=\"line\">\n</code><code class=\"line\">// Randomly select a BSDF based on albedo distribution\n</code><code class=\"line\">int id = sample_cdf(cdf, sx);\n</code><code class=\"line\">\n</code><code class=\"line\">// Do something with the selected BSDF\n</code><code class=\"line\">// lobes[id] ...\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/split_bsdf\">split_bsdf()</a><div class=\"related-summary\">Splits a bsdf into it\u2019s component lobes.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_bsdf\">sample_bsdf()</a><div class=\"related-summary\">Samples a bsdf.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/eval_bsdf\">eval_bsdf()</a><div class=\"related-summary\">Evaluates a bsdf given two vectors.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/albedo\">albedo()</a><div class=\"related-summary\">Returns the albedo (percentage of reflected light) for a bsdf given the outgoing light direction.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "b",
                    "mask"
                ],
                "args": [
                    "const bsdf",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic_pair": true
            }
        ]
    },
    "solvecubic": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/solvecubic\">solvecubic</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Solves a cubic function returning the number of real roots.</p><ul><li><code>int solvecubic(float a, float b, float c, float d, float &amp;t1, float &amp;t2, float &amp;t3)</code></li><li><code>int solvecubic(float a, float b, float c, float d, vector2 &amp;t1, vector2 &amp;t2, vector2 &amp;t3)</code></li></ul>\n\n\n\n<p>Solves the given cubic function where <code>a</code> , <code>b</code>, <code>c</code>, and <code>d</code> are the coefficients as so: <code>ax^3 + bx^2 + cx + d = 0</code></p>\n<p>Returns the number of real roots.</p>\n<p>In the real case the returned roots will be in ascending order. In case of only one root that root is filled into <code>t1</code>, <code>t2</code>, and <code>t3</code>.</p>\n<p>In the complex case <code>t1</code>, <code>t2</code>, and <code>t3</code> are the complex roots.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/solvequadratic\">solvequadratic()</a><div class=\"related-summary\">Solves a quadratic function returning the number of real roots.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/solvepoly\">solvepoly()</a><div class=\"related-summary\">Finds the real roots of a polynomial.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "b",
                    "c",
                    "d",
                    "t1",
                    "t2",
                    "t3"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "a",
                    "b",
                    "c",
                    "d",
                    "t1",
                    "t2",
                    "t3"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "vector2",
                    "vector2",
                    "vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "solvepoly": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/solvepoly\">solvepoly</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Finds the real roots of a polynomial.</p><ul><li><code>int solvepoly(float[] coef, float[] &amp;root)</code></li><li><code>int solvepoly(float[] coef, float[] &amp;root, int maxiter)</code></li></ul>\n\n\n\n<p>Returns the number of real roots.</p>\n<p>The coefficients are specified such that <code>coef[i]</code> should be <code>x^i</code>. This is reverse of the order you would write the polynomial out normally.</p>\n<p>Parameter root is filled with the roots of the polynomial in ascending order.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/solvequadratic\">solvequadratic()</a><div class=\"related-summary\">Solves a quadratic function returning the number of real roots.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/solvecubic\">solvecubic()</a><div class=\"related-summary\">Solves a cubic function returning the number of real roots.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "coef",
                    "root"
                ],
                "args": [
                    "const float[]",
                    "float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "coef",
                    "root",
                    "maxiter"
                ],
                "args": [
                    "const float[]",
                    "float[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "solvequadratic": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/solvequadratic\">solvequadratic</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Solves a quadratic function returning the number of real roots.</p><ul><li><code>int solvequadratic(float a, float b, float c, float &amp;t1, float &amp;t2)</code></li><li><code>int solvequadratic(float a, float b, float c, vector2 &amp;t1, vector2 &amp;t2)</code></li></ul>\n\n\n\n<p>Solves the given quadratic function where <code>a</code> , <code>b</code>, and <code>c</code> are the coefficients as so: <code>ax^2 + bx + c = 0</code>.</p>\n<p>Returns the number of real roots.</p>\n<p>In the real case <code>t1</code> and <code>t2</code> are filled such that <code>t1</code>  \u2264 <code>t2</code>. If there is only one root then <code>t1</code> = <code>t2</code>. If there are no roots then <code>t1</code> = <code>t2</code> and is the projection of the vertex of the quadratic function onto the x-axis.</p>\n<p>In the complex case <code>t1</code> and <code>t2</code> are the complex roots.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/solvecubic\">solvecubic()</a><div class=\"related-summary\">Solves a cubic function returning the number of real roots.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/solvepoly\">solvepoly()</a><div class=\"related-summary\">Finds the real roots of a polynomial.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "a",
                    "b",
                    "c",
                    "t1",
                    "t2"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "a",
                    "b",
                    "c",
                    "t1",
                    "t2"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "vector2",
                    "vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "sort": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sort\">sort</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns the array sorted in increasing order.</p><ul><li><code>int[] sort(int[] value)</code></li><li><code>string[] sort(string[] value)</code></li><li><code>float[] sort(float[] value)</code></li></ul>\n\n\n\n<p>Returns a sorted array in increasing order.</p>\n<p>Often <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/argsort\" title=\"Returns the indices of a sorted version of an array.\">argsort()</a> is more useful as it allows you to apply the sort-order to other\nlists.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/reorder\">reorder()</a><div class=\"related-summary\">Reorders items in an array or string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/argsort\">argsort()</a><div class=\"related-summary\">Returns the indices of a sorted version of an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "specular": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/specular\">specular</a></h1><span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the illumination for specular highlights using different lighting models.</p><ul><li><code>vector specular(vector nml, vector V, float roughness, ...)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>bsdf specular(vector dir, ...)</code></li></ul>\n\n\n\n\n<p>\n<code>dir</code>\n\n<div class=\"content\">\n<p>the direction of specularity.</p>\n</div>\n</p>\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/specular.png\">[Image \ud83d\udd17]\n</a></p>\n<p><a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/phong\" title=\"Returns the illumination for specular highlights using different lighting models.\">phong()</a>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/blinn\" title=\"Returns the illumination for specular highlights using the Blinn model.\">blinn()</a>, and <code>specular</code> return the illumination for specular\nhighlights using different lighting models.</p>\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/phong\" title=\"Returns the illumination for specular highlights using different lighting models.\">phong()</a> for information on the basic lighting models.\nSee <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../pbr\">writing a PBR shader</a> for information on BSDFs.</p>\n<p>You can optionally specify a <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#lightmask\">light mask</a>.</p>\n<p>A mirror specular reflection along a given direction vector.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/matchvex_specular\">matchvex_specular()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phong\">phong()</a><div class=\"related-summary\">Returns the illumination for specular highlights using different lighting models.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "dir"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "nml",
                    "V",
                    "roughness"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "specularBRDF": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/specularBRDF\">specularBRDF</a></h1><p class=\"summary\">Returns the computed BRDFs for the different lighting models used in VEX shading.</p><ul><li><code>float specularBRDF(vector L, vector N, vector V, float rough)</code></li></ul>\n\n\n\n<p><code>specularBRDF</code>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/phongBRDF\">phongBRDF()</a>, <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/blinnBRDF\">blinnBRDF()</a>,\nand <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/diffuseBRDF\">diffuseBRDF()</a> return the computed BRDF for the\ndifferent lighting models used in VEX shading. You can use them in\ncustom <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/illuminance\" title=\"Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.\">illuminance()</a> loops to replicate the lighting models of the\ncorresponding VEX lighting functions.</p>\n<div class=\"code-container\">\n<code class=\"line\">vector nn = normalize(frontface(N, I));\n</code><code class=\"line\">vector ii = normalize(-I);\n</code><code class=\"line\">Cf = 0;\n</code><code class=\"line\">illuminance(P, nn)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector ll = normalize(L);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0Cf += Cl * (specularBRDF(ll, nn, ii, rough) + diffuseBRDF(ll, nn));\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/phongBRDF\">phongBRDF()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/blinnBRDF\">blinnBRDF()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/diffuseBRDF\">diffuseBRDF()</a></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/illuminance\">illuminance()</a><div class=\"related-summary\">Loops through all light sources in the scene, calling the light shader for each light source to set the Cl and L global variables.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "L",
                    "N",
                    "V",
                    "rough"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "spline": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/spline\">spline</a></h1><p class=\"summary\">Returns an interpolated value along a polyline or spline curve.</p><ul><li><code>float spline(string basis, float t, float v0, ...)</code></li><li><code>float spline(string basis, float coord, float[] array, ...)</code></li><li><code>float spline(string[] bases, float coord, float[] array, ...)</code></li><li><code>float spline(string[] bases, float coord, float[] values, float[] knots, ...)</code></li><li><code>vector spline(string basis, float t, vector v0, ...)</code></li><li><code>vector spline(string basis, float coord, vector[] array, ...)</code></li><li><code>vector spline(string[] bases, float coord, vector[] array, ...)</code></li><li><code>vector spline(string[] bases, float coord, vector[] values, float[] knots, ...)</code></li><li><code>vector4 spline(string basis, float t, vector4 v0, ...)</code></li><li><code>vector4 spline(string basis, float coord, vector4[] array, ...)</code></li><li><code>vector4 spline(string[] bases, float coord, vector4[] array, ...)</code></li><li><code>vector4 spline(string[] bases, float coord, vector4[] values, float[] knots, ...)</code></li></ul>\n\n\n<p>This function returns the value at a certain point\n<code>t</code> along a polyline or cubic spline specified by uniformly\nspaced control points (unless the key positions are explicitly provided).</p>\n<p>The spline must have uniform keys (unless the keys are explicitly provided),\nthat is, the key values must be spaces evenly along the length\nof the spline. To specify non-uniform control points (that is,\nto specify both the \"x\" and the \"y\" of the control points),\nuse <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/kspline\" title=\"Returns an interpolated value along a spline curve.\">kspline()</a>. Note, however, that the drawback of <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/kspline\" title=\"Returns an interpolated value along a spline curve.\">kspline()</a> is that\nit always performs \"solvelinear\", which does not guarantee tangent continuity,\nwhereas the version of <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/spline\" title=\"Returns an interpolated value along a polyline or spline curve.\">spline()</a> function that takes the keys array\nas an argument performs non-linear solve, ensuring the curve is smooth (tangent\ncontinuous) across the control points that join segments of the same\ninterpolation basis type.</p>\n\n<h2 class=\"label heading\" id=\"variadic-arguments\">\n            \n            Variadic arguments\n        </h2>\n<div class=\"content\" id=\"variadic-arguments-body\">\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float spline(string basis; float t; float v0, ...)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector spline(string basis; float t; vector v0, ...)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 spline(string basis; float t; vector4 v0, ...)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>These forms take a variable number of arguments\nto specify the key values of the spline.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"single-basis-array-of-keys\">\n            \n            Single basis, array of keys\n        </h2>\n<div class=\"content\" id=\"single-basis-array-of-keys-body\">\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float spline(string basis, float coord, float [] array)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector spline(string basis; float coord; vector [] array)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 spline(string basis; float coord; vector4 [] array)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>These forms take a single string specifying the interpolation\nbasis for all keys, and an array of key values.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"array-of-bases-and-keys\">\n            \n            Array of bases and keys\n        </h2>\n<div class=\"content\" id=\"array-of-bases-and-keys-body\">\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float spline(string [] bases, float coord, float [] array)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector spline(string [] bases; float coord; vector [] array)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 spline(string [] bases; float coord; vector4 [] array)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>These forms take an array of strings specifying the interpolation\nbases between the keys, and array of key values.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"array-of-bases-key-values-and-key-positions\">\n            \n            Array of bases, key values, and key positions\n        </h2>\n<div class=\"content\" id=\"array-of-bases-key-values-and-key-positions-body\">\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float spline(string [] bases, float coord, float [] values, float[] knots)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector spline(string [] bases; float coord; vector [] values, float[] knots)\n</code>\n\n<div class=\"content\"></div>\n</li>\n<li class=\"usage item\">\n\n<code class=\"codehilite\">vector4 spline(string [] bases; float coord; vector4 [] values, float[] knots)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>These forms take an array of strings specifying the interpolation\nbases between the keys, an array of key values, and an array of key positions.\nThey ensure that the interpolation curve is smooth (tangent-continuous) across\nthe control points (keys) if the adjoining segments have the same basis, even if\nthe key positions are not evenly spaced (i.e., are non-uniform and the distances\nbetween them are not equal).</p>\n<p>NOTE:\nFor b-spline basis, this function implicitly assumes the multiplicity of 3\nfor b-spline curve end point, even though the given control points and\nknots are not explicitly repeated. This ensures the curve passes through the\nend control points, making it easier to create continuous ramp curves with\nmixed interpolation bases (e.g., b-spline basis segments surrounded by\nlinear interpolation segments).</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"linear\">\n            \n            Linear\n        </h2>\n<div class=\"content\" id=\"linear-body\">\n<p>When <code>basis</code> is <code>\"linear\"</code>, this function connects the control\npoint values with a polyline.</p>\n<p>For example, if you specified four values:</p>\n<div class=\"code-container\">\nspline(\"linear\", t, v0, v1, v2, v3)\n</div>\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../images/spline_linear.svg\">[Image \ud83d\udd17]\n</a></p>\n<p>\u2026the function returns the height of the orange dot at position <code>t</code>.</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"cubic-spline\">\n            \n            Cubic spline\n        </h2>\n<div class=\"content\" id=\"cubic-spline-body\">\n<p>When <code>basis</code> is <code>\"cubic\"</code>, <code>\"catrom\"</code>, or <code>\"catmull-rom\"</code>, this\nfunction connects the point values with a Catmull-Rom spline.</p>\n<p>Note that the first and last values are outside the sample area to\nprovide the slope of the curve at the second point (at the start of the\nsample range) and the second-to-last point (at the end of the sample\nrange).</p>\n<p>For example, if you specified six values:</p>\n<div class=\"code-container\">\nspline(\"catrom\", t, v0, v1, v2, v3, v4, v5)\n</div>\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../images/spline_catrom.svg\">[Image \ud83d\udd17]\n</a></p>\n<p>\u2026the function returns the height of the orange dot at position <code>t</code>.</p>\n<p>(This image is for illustration only, it does not show the correct\ncurve for the shown points.)</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"linear-solve\">\n            \n            Linear solve\n        </h2>\n<div class=\"content\" id=\"linear-solve-body\">\n<p>When <code>basis</code> is <code>\"linearsolve\"</code>, this function maps between a set\nof non-uniform positions and a set of values. The <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/kspline\" title=\"Returns an interpolated value along a spline curve.\">kspline()</a>\nfunction does this mapping implicitly.</p>\n<div class=\"code-container\">\ntk = spline(\"linearsolve\", t, k0, k1, k2, k3, ...);\nv = spline(basis, tk, v1, v2, v3, ...);\n</div>\n<p>(Technically, <code>linearsolve</code> interprets the values as key values, solves the\nintersection of the spline, and returns the intercept point.)</p>\n</div>\n\n\n<h2 class=\"label heading\" id=\"spline-bases-recognized-by-the-vex-spline-function\">\n            \n            Spline bases recognized by the VEX spline function\n        </h2>\n<div class=\"content\" id=\"spline-bases-recognized-by-the-vex-spline-function-body\">\n<ul class=\"bullets\">\n<li class=\"bullet \">\nconstant\n</li>\n<li class=\"bullet \">\ncatmullrom (also catmull-rom, cubic, cspline)\n</li>\n<li class=\"bullet \">\nmonotonecubic\n</li>\n<li class=\"bullet \">\nlinearsolve (also solvelinear)\n</li>\n</ul>\n<p>These are the same interpolations supported by ramps.</p>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/kspline\">kspline()</a><div class=\"related-summary\">Returns an interpolated value along a spline curve.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "basis",
                    "t",
                    "v0"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "basis",
                    "coord",
                    "array"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "bases",
                    "coord",
                    "array"
                ],
                "args": [
                    "const string[]",
                    "const float",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "bases",
                    "coord",
                    "values",
                    "knots"
                ],
                "args": [
                    "const string[]",
                    "const float",
                    "const float[]",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true
            },
            {
                "argnames": [
                    "basis",
                    "t",
                    "v0"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "basis",
                    "coord",
                    "array"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "bases",
                    "coord",
                    "array"
                ],
                "args": [
                    "const string[]",
                    "const float",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "bases",
                    "coord",
                    "values",
                    "knots"
                ],
                "args": [
                    "const string[]",
                    "const float",
                    "const vector4[]",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true
            },
            {
                "argnames": [
                    "basis",
                    "t",
                    "v0"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            },
            {
                "argnames": [
                    "basis",
                    "coord",
                    "array"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            },
            {
                "argnames": [
                    "bases",
                    "coord",
                    "array"
                ],
                "args": [
                    "const string[]",
                    "const float",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            },
            {
                "argnames": [
                    "bases",
                    "coord",
                    "values",
                    "knots"
                ],
                "args": [
                    "const string[]",
                    "const float",
                    "const vector[]",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true
            }
        ]
    },
    "split": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/split\">split</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Splits a string into tokens.</p><ul><li><code>string[] split(string s)</code></li><li><code>string[] split(string s, string separators)</code></li><li><code>string[] split(string s, string separators, int maxsplits)</code></li></ul>\n\n\n\n<p>Splits a string into tokens by removing separator characters from the string\nand creating an array entry for each substring bounded by separators. When no\nseparator string is provided, the string is split on whitespace (spaces, tab,\nand return).</p>\n<p>The <code>maxsplits</code> option limits the number of times the string is split,\nthis is useful to peel off one token at a time from a larger string.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>This differs from Python\u2019s split() in that it takes a list of separators, not a single string to use as a separator.</p>\n</div>\n</div>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "s"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "s",
                    "separators"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            },
            {
                "argnames": [
                    "s",
                    "separators",
                    "maxsplits"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string[]"
            }
        ]
    },
    "split_bsdf": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/split_bsdf\">split_bsdf</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">sampling</span></span></span><p class=\"summary\">Splits a bsdf into it\u2019s component lobes.</p><ul><li><code>void split_bsdf(bsdf[] &amp;lobes, bsdf b, float[] &amp;weights)</code></li><li><code>void split_bsdf(bsdf[] &amp;lobes, bsdf b, float[] &amp;weights, int mask)</code></li><li><code>void split_bsdf(bsdf[] &amp;lobes, bsdf b, float[] &amp;weights, int mask, int type)</code></li><li><code>void split_bsdf(bsdf[] &amp;lobes, bsdf b, float[] &amp;weights, int mask, int type, float u)</code></li><li><code>void split_bsdf(bsdf[] &amp;lobes, bsdf b, float[] &amp;weights, int mask, int type, float u, float[] cdf)</code></li></ul>\n\n\n\n\n<p>\n<code>b</code>\n\n<div class=\"content\">\n<p>BSDF to split.</p>\n</div>\n</p>\n<p>\n<code>weights</code>\n\n<div class=\"content\">\n<p>Weights for the split lobes (same length as returned bsdf array). Illumination sampled using the returned lobes must be scaled by these weights.</p>\n</div>\n</p>\n<p>\n<code>mask</code>\n\n<div class=\"content\">\n<p>A bitmask indicating which types of bounces to evaluate.\n    \n    \n    <p>The following bitmask constants are defined in  \n<code>pbr.h</code>:  </p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>PBR_DIFFUSE_MASK</code> - diffuse component  \n</li>\n<li class=\"bullet \">\n<code>PBR_GLOSSY_MASK</code> - glossy component  \n</li>\n<li class=\"bullet \">\n<code>PBR_SPECULAR_MASK</code> - mirror specular component  \n</li>\n<li class=\"bullet \">\n<code>PBR_VOLUME_MASK</code> - volume component\n</li>\n</ul>\n</p>\n</div>\n</p>\n<p>\n<code>type</code>\n\n<div class=\"content\">\n<p>Indicaties what split type is to be used.\n    <a class=\"link missing Include\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/pbr_h\">/vex/functions/pbr_h</a></p>\n</div>\n</p>\n<p>\n<code>u</code>\n\n<div class=\"content\">\n<p>Random value to sample the CDF at.</p>\n</div>\n</p>\n<p>\n<code>cdf</code>\n\n<div class=\"content\">\n<p>CDF used to control sampling among components of the BSDF.</p>\n</div>\n</p>\n\n<div class=\"code-container\">\n<code class=\"line\">// Split BSDF into component lobes\n</code><code class=\"line\">float weights[];\n</code><code class=\"line\">bsdf lobes[] = split_bsdf(hitF, weights);\n</code><code class=\"line\">\n</code><code class=\"line\">// Get albedos of lobes\n</code><code class=\"line\">float albedos[];\n</code><code class=\"line\">resize(albedos, len(lobes));\n</code><code class=\"line\">for (int i = 0; i &lt; len(lobes); i++)\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0albedos[i] = luminance(albedo(lobes[i], -hitnI)) * weights[i];\n</code><code class=\"line\">}\n</code><code class=\"line\">\n</code><code class=\"line\">// Compute CDF\n</code><code class=\"line\">float cdf[] = compute_cdf(albedos);\n</code><code class=\"line\">\n</code><code class=\"line\">// Randomly select a BSDF based on albedo distribution\n</code><code class=\"line\">int index = 0;\n</code><code class=\"line\">sample_cdf(cdf, s.x, index);\n</code><code class=\"line\">\n</code><code class=\"line\">// Do something with the selected BSDF\n</code><code class=\"line\">// lobes[index] ...\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_bsdf\">sample_bsdf()</a><div class=\"related-summary\">Samples a bsdf.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/eval_bsdf\">eval_bsdf()</a><div class=\"related-summary\">Evaluates a bsdf given two vectors.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/albedo\">albedo()</a><div class=\"related-summary\">Returns the albedo (percentage of reflected light) for a bsdf given the outgoing light direction.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/create_cdf\">create_cdf()</a><div class=\"related-summary\">Creates a CDF from an array of input PDF values.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sample_cdf\">sample_cdf()</a><div class=\"related-summary\">Samples a CDF based on a random variable.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "lobes",
                    "b",
                    "weights",
                    "mask",
                    "type",
                    "u",
                    "cdf"
                ],
                "args": [
                    "bsdf[]",
                    "const bsdf",
                    "float[]",
                    "const int",
                    "const int",
                    "const float",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "lobes",
                    "b",
                    "weights",
                    "mask",
                    "type",
                    "u"
                ],
                "args": [
                    "bsdf[]",
                    "const bsdf",
                    "float[]",
                    "const int",
                    "const int",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "lobes",
                    "b",
                    "weights",
                    "mask",
                    "type"
                ],
                "args": [
                    "bsdf[]",
                    "const bsdf",
                    "float[]",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "lobes",
                    "b",
                    "weights",
                    "mask"
                ],
                "args": [
                    "bsdf[]",
                    "const bsdf",
                    "float[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "lobes",
                    "b",
                    "weights"
                ],
                "args": [
                    "bsdf[]",
                    "const bsdf",
                    "float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "splitpath": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/splitpath\">splitpath</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Splits a file path into the directory and name parts.</p><ul><li><code>void splitpath(string fullpath, string &amp;dir, string &amp;name)</code></li></ul>\n\n\n\n<p>Splits a string representing a path into the <code>directory</code> and <code>name</code> components.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "fullpath",
                    "dir",
                    "name"
                ],
                "args": [
                    "const string",
                    "string",
                    "string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "void"
            }
        ]
    },
    "sprintf": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sprintf\">sprintf</a></h1><span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Formats a string like printf but returns the result as a string\ninstead of printing it.</p><ul><li><code>string sprintf(string format, ...)</code></li></ul>\n\n\n\n<p>Formats a string like <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/printf\" title=\"Prints values to the console which started the VEX program.\">printf</a> but returns the result as a\nstring instead of printing it.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/printf\">printf</a><div class=\"related-summary\">Prints values to the console which started the VEX program.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "format"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string",
                "variadic": true
            }
        ]
    },
    "sqrt": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sqrt\">sqrt</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the square root of the argument.</p><ul><li><code>float sqrt(float value)</code></li><li><code>vector2 sqrt(vector2 value)</code></li><li><code>vector sqrt(vector value)</code></li><li><code>vector4 sqrt(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the square root of <code>value</code>.</p>\n<p>For vectors, this is done component-by-component.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>The square root of a negative number is defined to be zero.</p>\n<p>To quote Edgar Rice Burroughs, Pirates of Venus:\n    <em>\"I saw that argument was useless and said no more: there is no use arguing with a man who can multiply anything by the square root of minus one\"</em></p>\n</div>\n</div>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "sssapprox": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sssapprox\">sssapprox</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Creates an approximate SSS BSDF.</p><ul><li><code>bsdf sssapprox(vector albedo, float meanFreePath, float roughness, float scale, ...)</code></li></ul>\n\n\n\n\n<p>\n<code>albedo</code>\n\n<div class=\"content\">\n<p>Average surface reflectance.</p>\n</div>\n</p>\n<p>\n<code>meanFreePath</code>\n\n<div class=\"content\">\n<p>Average distance between scattering events.</p>\n</div>\n</p>\n<p>\n<code>roughness</code>\n\n<div class=\"content\">\n<p>A value from '0.0' to '1.0' blending to an ideal diffuse transmission reflectance profile.</p>\n</div>\n</p>\n<p>\n<code>scale</code>\n\n<div class=\"content\">\n<p>Physical scale of the material. Smaller scale values will make the material more transmissive.</p>\n</div>\n</p>\n\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../pbr\">writing a PBR shader</a> for information on BSDFs.</p>\n<p>Models SSS illumination based on an approximate reflectance profile.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/diffuse\">diffuse()</a><div class=\"related-summary\">Returns the diffuse (Lambertian) illumination given the normalized\nsurface normal.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/translucent\">translucent()</a><div class=\"related-summary\">Returns the lambertian translucence given the surface normal.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "albedo",
                    "meanFreePath",
                    "roughness",
                    "scale"
                ],
                "args": [
                    "const vector",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "startswith": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/startswith\">startswith</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns 1 if the string starts with the specified string.</p><ul><li><code>int startswith(string str, string startswith)</code></li></ul>\n\n\n\n<p>Returns 1 if the string ends with the given string. 0 otherwise.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/endswith\">endswith()</a><div class=\"related-summary\">Indicates the string ends with the specified string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "str",
                    "startswith"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "storelightexport": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/storelightexport\">storelightexport</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">light</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span></span><p class=\"summary\">Stores exported data for a light.</p><ul><li><code>void storelightexport(string lightname, string exportname, int value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>void storelightexport(string lightname, string exportname, float value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>void storelightexport(string lightname, string exportname, vector value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>void storelightexport(string lightname, string exportname, vector4 value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>void storelightexport(string lightname, string exportname, int[] value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>void storelightexport(string lightname, string exportname, float[] value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>void storelightexport(string lightname, string exportname, vector[] value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li><li><code>void storelightexport(string lightname, string exportname, vector4[] value)</code><span class=\"padder\"><span class=\"pillow\">surface</span></span><span class=\"padder\"><span class=\"pillow\">displace</span></span><span class=\"padder\"><span class=\"pillow\">fog</span></span></li></ul>\n\n\n\n<p>Stores a per-light export to a shader export variable.  This method should\nnormally be called for each light to ensure that all light exports for the\ngiven variable are created, for example by placing the call in an\nilluminance() loop or a loop over the light array.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>This method replaces the legacy storelightexports() method previously\n    used in Houdini 12.5 and earlier.</p>\n</div>\n</div>\n</div>\n<div class=\"code-container\">\n<code class=\"line\">surface test(export vector perlight = {0,0,0})\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0int             lights[] = getlights();\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0for (int i = 0; i &lt; len(lights); i++)\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector val = set(lights[i], 0, 0);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0storelightexport(getlightname(lights[i]), \"perlight\", val);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">}\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "lightname",
                    "exportname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "lightname",
                    "exportname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "lightname",
                    "exportname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "lightname",
                    "exportname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "lightname",
                    "exportname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "lightname",
                    "exportname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "lightname",
                    "exportname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "lightname",
                    "exportname",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "fog"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            }
        ]
    },
    "strip": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/strip\">strip</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Strips leading and trailing whitespace from a string.</p><ul><li><code>string strip(string value)</code></li><li><code>string strip(string value, string whitespace)</code></li></ul>\n\n\n\n<p>Returns a string with the leading and trailing whitespace removed.  If\nwhitespace is provided, it is a string of characters that will be stripped.</p>\n<p>This is also equivalent of doing both <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/rstrip\" title=\"Strips trailing whitespace from a string.\">rstrip()</a> and <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/lstrip\" title=\"Strips leading whitespace from a string.\">lstrip()</a> on a string.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rstrip\">rstrip()</a><div class=\"related-summary\">Strips trailing whitespace from a string.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/lstrip\">lstrip()</a><div class=\"related-summary\">Strips leading whitespace from a string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "value",
                    "whitespace"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "strlen": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/strlen\">strlen</a></h1><span><span class=\"padder\"><span class=\"pillow\">string</span></span></span><p class=\"summary\">Returns the length of the string.</p><ul><li><code>int strlen(string string)</code></li></ul>\n\n\n\n<p>Returns the length of the string in bytes.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "string"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "sum": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/sum\">sum</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Returns the sum of the vector\u2019s components.</p><ul><li><code>int sum(int v)</code></li><li><code>int sum(int[] v)</code></li><li><code>float sum(float v)</code></li><li><code>float sum(vector2 v)</code></li><li><code>float sum(vector v)</code></li><li><code>float sum(vector4 v)</code></li><li><code>float sum(float[] v)</code></li><li><code>vector2 sum(vector2[] v)</code></li><li><code>vector sum(vector[] v)</code></li><li><code>vector4 sum(vector4[] v)</code></li></ul>\n\n\n\n<p>Returns the sum of the vector\u2019s 2 components.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float sum(vector v)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the sum of the vector\u2019s 3 components.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">float sum(vector4 v)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the sum of the vector\u2019s 4 components.</p>\n<div class=\"usage_group item_group\">\n<li class=\"usage item\">\n\n<code class=\"codehilite\">type sum(type[] arr)\n</code>\n\n<div class=\"content\"></div>\n</li>\n</div>\n<p>Returns the sum of the elements of the array.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "float"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "int"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector2[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector"
            }
        ]
    },
    "switch": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/switch\">switch</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Use a different bsdf for direct or indirect lighting.</p><ul><li><code>bsdf switch(bsdf direct, bsdf indirect)</code></li></ul>\n\n\n\n<p>This makes it possible to use a different bsdf for direct and indirect lighting.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "direct",
                    "indirect"
                ],
                "args": [
                    "const bsdf",
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf"
            }
        ]
    },
    "swizzle": {
        "added": "11.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/swizzle\">swizzle</a></h1><span><span class=\"padder\"><span class=\"pillow\">11.0</span></span><span class=\"padder\"><span class=\"pillow\">vector</span></span></span><p class=\"summary\">Rearranges components of a vector.</p><ul><li><code>vector2 swizzle(vector2 uv, int i0, int i1)</code></li><li><code>vector swizzle(vector xyz, int i0, int i1, int i2)</code></li><li><code>vector4 swizzle(vector4 xyzw, int i0, int i1, int i2, int i3)</code></li></ul>\n\n\n\n<p>The integer arguments specify which component of the original vector to put in each place in the returned vector. So, for example, if <code>i0</code> is <code>3</code>, the third component of the original vector is copied to the zeroth component of the returned vector.</p>\n<div class=\"code-container\">\nswizzle({10, 20, 30, 40}, 3, 2, 1, 0) == {40, 30, 20, 10}\nswizzle({10, 20, 30, 40}, 0, 0, 0, 0) == {10, 10, 10, 10}\n</div>\n<p>Integer arguments less than <code>0</code> or greater than <code>2</code> or <code>3</code> are clamped.</p>\n<p>The equivalent VEX code might look like this:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector swizzle(vector v; int i0, i1, i2)\n</code><code class=\"line\">{\n</code><code class=\"line\">return set(getcomp(v, i0), getcomp(v, i1), getcomp(v, i2));\n</code><code class=\"line\">}\n</code>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "xyzw",
                    "i0",
                    "i1",
                    "i2",
                    "i3"
                ],
                "args": [
                    "const vector4",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "uv",
                    "i0",
                    "i1"
                ],
                "args": [
                    "const vector2",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector2"
            },
            {
                "argnames": [
                    "xyz",
                    "i0",
                    "i1",
                    "i2"
                ],
                "args": [
                    "const vector",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "tan": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/tan\">tan</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the trigonometric tangent of the argument</p><ul><li><code>float tan(float value)</code></li><li><code>vector2 tan(vector2 value)</code></li><li><code>vector tan(vector value)</code></li><li><code>vector4 tan(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the trigonometric tangent of <code>value</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "tanh": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/tanh\">tanh</a></h1><span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Returns the hyperbolic tangent of the argument</p><ul><li><code>float tanh(float value)</code></li><li><code>vector2 tanh(vector2 value)</code></li><li><code>vector tanh(vector value)</code></li><li><code>vector4 tanh(vector4 value)</code></li></ul>\n\n\n\n<p>Returns the hyperbolic tangent of <code>value</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "tet_adjacent": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/tet_adjacent\">tet_adjacent</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns primitive number of an adjacent tetrahedron.</p><ul><li><code>int tet_adjacent(int opinput, int primindex, int faceno)</code></li><li><code>int tet_adjacent(string geometry, int primindex, int faceno)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the primitive is not a tet or doesn\u2019t have an adjacent\ntetrahedron.  Otherwise returns the primitive number of the tetrahedron\nopposite the given vertex.</p>\n<p><code>tet_faceindex</code> can be used to get the vertex indices of each face\nof a tetrahedron.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>primindex</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>faceno</code>\n\n<div class=\"content\">\n<p>The face on the tetrahedron.  Face 0 is the triangle that doesn\u2019t\n    have vertex 0.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primindex",
                    "faceno"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "primindex",
                    "faceno"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "tet_faceindex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/tet_faceindex\">tet_faceindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns vertex indices of each face of a tetrahedron.</p><ul><li><code>int tet_faceindex(int faceno, int vtxno)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if an invalid number is specified.</p>\n<p>Returns <code>0</code> to <code>3</code> to refer to the four vertices of a generic tetrahedron.</p>\n\n<p>\n<code>faceno</code>\n\n<div class=\"content\">\n<p>The face on the tetrahedron.  Face 0 is the triangle that doesn\u2019t\n    have vertex 0.</p>\n</div>\n</p>\n<p>\n<code>vtxno</code>\n\n<div class=\"content\">\n<p>Which vertex on the triangle to return, <code>0</code> to <code>2</code>.  Starts with\n    the lowest number and follows Houdini\u2019s winding convention, ie,\n    face 0 is vertices 1, 2, and 3.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "faceno",
                    "vtxno"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "teximport": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/teximport\">teximport</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Imports attributes from texture files.</p><ul><li><code>int teximport(string map, string attribute, int &amp;value)</code></li><li><code>int teximport(string map, string attribute, string &amp;value)</code></li><li><code>int teximport(string map, string attribute, float &amp;value)</code></li><li><code>int teximport(string map, string attribute, vector &amp;value)</code></li><li><code>int teximport(string map, string attribute, vector4 &amp;value)</code></li><li><code>int teximport(string map, string attribute, matrix3 &amp;value)</code></li><li><code>int teximport(string map, string attribute, matrix &amp;value)</code></li><li><code>int teximport(string map, string attribute, int[] &amp;value)</code></li><li><code>int teximport(string map, string attribute, string[] &amp;value)</code></li></ul>\n\n\n\n<p>This function queries metadata stored in an image file, and works with most texture formats.</p>\n<p>The single-value versions return 1 on success and 0 on failure.\nThe <code>string &amp;values[]</code> version returns the number of strings in the array.</p>\n<p>If the function fails, the <code>value</code> variable will not be modified,\nand may be left uninitialized.</p>\n<p>You can choose what properties are stored using the <code>vm_saveoptions</code>\nHoudini property on a camera or light\n(<code>image:saveoptions</code> in <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../render/ifd\">IFD</a>).\nHowever, the defaults probably contain all the information you'd want.\nSee <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../props\">rendering properties</a>.</p>\n\n<h2 class=\"label heading\" id=\"queryable-attributes\">\n            \n            Queryable attributes\n        </h2>\n<div class=\"content\" id=\"queryable-attributes-body\">\n<p>There are several generic attributes you can always query:</p>\n\n<p>\n<code>int texture:xres</code>\n\n<div class=\"content\">\n<p>X resolution of the texture map.</p>\n</div>\n</p>\n<p>\n<code>int texture:yres</code>\n\n<div class=\"content\">\n<p>Y resolution of the texture map.</p>\n</div>\n</p>\n<p>\n<code>int texture:channels</code>\n\n<div class=\"content\">\n<p>Number of channels in the texture map.</p>\n</div>\n</p>\n<p>\n<code>vector texture:resolution</code>\n\n<div class=\"content\">\n<p>Resolution of the texture as the vector <code>(xres, yres, channels)</code>.</p>\n</div>\n</p>\n<p>\n<code>matrix texture:worldtoview</code>\n\n<div class=\"content\">\n<p>The transform matrix that will take world space points into the camera\n    space used to generate the image.</p>\n</div>\n</p>\n<p>\n<code>matrix texture:projection</code>\n\n<div class=\"content\">\n<p>The transform matrix representing the projection matrix of the camera\n    used to generate the image.</p>\n</div>\n</p>\n<p>\n<code>matrix texture:worldtondc</code>\n\n<div class=\"content\">\n<p>The transform matrix that will transform world spaced points into the NDC\n    space of the camera used to make the image. The points are generated in\n    homogeneous coordinates.  That is, to get the values in the range 0 to 1:</p>\n<div class=\"code-container\">\n<code class=\"line\">matrix ndc;\n</code><code class=\"line\">if (teximport(map, \"texture:worldtoNDC\", ndc))\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0vector P_ndc = pos * ndc;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// If the camera is a perspective camera,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// dehomogenize the point\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0if (getcomp(ndc, 2, 3) != 0)\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P_ndc.x = P_ndc.x / P_ndc.z;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0P_ndc.y = P_ndc.y / P_ndc.z;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// Finally, scale and offset XY\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0// from [-1,1] to [0,1]\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0P_ndc *= {.5, .5, 1};\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0P_ndc += {.5, .5, 0};\n</code><code class=\"line\">}\n</code>\n</div></div>\n</p>\n<p>\n<code>string texture:tokens</code>\n\n<div class=\"content\">\n<p>A space separated list of all attribute names you can query.</p>\n</div>\n</p>\n<p>\nThe <code>string &amp;values[]</code> version can query the following\n        \n<div class=\"content\">\n\n<p>\n<code>texture:channelnames</code>\n\n<div class=\"content\">\n<p>List of all the raster plane channel names.</p>\n</div>\n</p>\n<p>\n<code>texture:channelsize</code>\n\n<div class=\"content\">\n<p>This returns an array of the number of floats in each image channel.</p>\n</div>\n</p>\n<p>\n<code>texture:channelstorage</code>\n\n<div class=\"content\">\n<p>This returns an array with a string for the underlying storage type for\n        each channel (i.e.  \"uint8\" or \"real16\").</p>\n</div>\n</p>\n<p>\n<code>texture:tokens</code>\n\n<div class=\"content\">\n<p>List of all the built-in tokens understood by <code>teximport()</code>.</p>\n</div>\n</p>\n\n</div>\n</p>\n\n</div>\n\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n<code class=\"line\">cvex\n</code><code class=\"line\">\u00a0test(string map=\"Mandril.rat\")\n</code><code class=\"line\">{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0for (string token : {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"texture:xres\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"texture:yres\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"texture:channels\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"texture:resolution\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"texture:tokens\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"image:pixelaspect\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"space:world\"\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0{\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float fval;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector vval;\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0matrix mval;\n</code><code class=\"line\">\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"----------------- %s ---------------------\\n\", token);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (teximport(map, token, fval))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"'%s' = %g\\n\", token, fval);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (teximport(map, token, vval))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"'%s' = %g\\n\", token, vval);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else if (teximport(map, token, mval))\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"'%s' = %g\\n\", token, mval);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0}\n</code><code class=\"line\">}\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/dsmpixel\">dsmpixel()</a><div class=\"related-summary\">Reads the z-records stored in a pixel of a deep shadow map\nor deep camera map.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export int[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "map",
                    "attribute",
                    "value"
                ],
                "args": [
                    "const string",
                    "const string",
                    "export string[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            }
        ]
    },
    "texprintf": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/texprintf\">texprintf</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Similar to sprintf, but does expansion of UDIM or UVTILE texture filename expansion.</p><ul><li><code>string texprintf(float u, float v, string format, ...)</code></li></ul>\n\n\n\n<p>Formats a string like <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/sprintf\" title=\"Formats a string like printf but returns the result as a string\ninstead of printing it.\">sprintf</a>, but scans for special conversion\ncharacters to perform either UDIM or UVTILE style filename expansion.</p>\n<p>This can be significantly more efficient than calling sprintf() directly.</p>\n\n<p>\nThe special conversion sequences are:\n<code>%(UDIM)d</code>\n\n<div class=\"content\">\n<p>The UDIM coordinate, as computed by <code>1000 + int(u)+1 + int(v)*10</code></p>\n</div>\n</p>\n<p>\n<code>%(U)d</code>\n\n<div class=\"content\">\n<p>The UVTILE style u-coordinate (<code>int(u)+1</code>)</p>\n</div>\n</p>\n<p>\n<code>%(V)d</code>\n\n<div class=\"content\">\n<p>The UVTILE style v-coordinate (<code>int(v)+1</code>)</p>\n</div>\n</p>\n<p>\n<code>%(UVTILE)d</code>\n\n<div class=\"content\">\n<p>Expands to both u and v coordinates in the form <code>u%d_v%d</code>.</p>\n</div>\n</p>\n\n<p>The \"d\" conversion specifier for texture identification can be modified with\nfield modifiers.  For example <code>%(U)02d</code> or <code>%(V)04d</code>.</p>\n\n<h2 class=\"label heading\" id=\"example\">\n            \n            Example\n        </h2>\n<div class=\"content\" id=\"example-body\">\n<div class=\"code-container\">\n!vex\n// Returns \"map_1044.rat\ntexprintf(3.1, 4.15, \"map_%(UDIM)d.rat\");\n\n// Returns \"map_04_05.rat\"\ntexprintf(3.1, 4.15, \"map_%(U)02d_%(V)02d.rat\");\n\n// Returns \"map_u4_v12.rat\"\ntexprintf(3.14, 11.5, \"map_u%(U)d_v%(V)d.rat\");\n\n// Returns \"/path/basename_04_05.rat\"\ntexprintf(3.1, 4.1, \"%s/%s_%(U)02d_%(V)02d.rat\", \"/path\", \"basename\");\n\n// Returns \"/path/basename_u04_v05.rat\"\ntexprintf(3.1, 4.1, \"%s/%s_%(UVTILE)02d.rat\", \"/path\", \"basename\")\n</div><div class=\"code-container\">\n<code class=\"line\">string map = texprintf(u, v, \"%s/%s_%(UDIM)d.rat\", texture_path, texture_base);\n</code><code class=\"line\">Cf = texture(map, u, v);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/sprintf\">sprintf()</a><div class=\"related-summary\">Formats a string like printf but returns the result as a string\ninstead of printing it.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/expand_udim\">expand_udim()</a><div class=\"related-summary\">Perform UDIM or UVTILE texture filename expansion.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/texture\">texture()</a><div class=\"related-summary\">Computes a filtered sample of the texture map specified.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "u",
                    "v",
                    "format"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string",
                "variadic": true
            }
        ]
    },
    "texture": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/texture\">texture</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Computes a filtered sample of the texture map specified.</p><ul><li><code>vector texture(string map, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector texture(string map, float ss, float tt, ...)</code></li><li><code>vector texture(string map, float s0, float t0, float s1, float t1, float s2, float t2, float s3, float t3, ...)</code></li><li><code>vector4 texture(string map, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>vector4 texture(string map, float ss, float tt, ...)</code></li><li><code>vector4 texture(string map, float s0, float t0, float s1, float t1, float s2, float t2, float s3, float t3, ...)</code></li></ul>\n\n\n\n<p>Computes a filtered sample of the texture map specified.  There are 3 basic\nforms of the texture() function, each returning either a vector or vector4.\nThe signature that takes no s and t coordinate parameter will use the global\ns and t values from the shading context (this signature is only available\nin shading contexts).  The signature taking a single s and t coordinate will\nsample the texture centered at that point and using a filter width based on\nthe derivatives of s and t at that point.  If used outside a shading\ncontext, the filter area is 0.  The final signature takes an explicit\nsampling quadrilateral, numbered from 0 to 3 around the perimeter of the\nquad.</p>\n<p>The forms returning vector4 will store the alpha from the texture map in\nthe fourth component.</p>\n\n<h2 class=\"label heading\" id=\"optional-arguments\">\n            \n            Optional arguments\n        </h2>\n<div class=\"content\" id=\"optional-arguments-body\">\n<p>You can specify additional keyword,value argument pairs to set filtering\noptions for the texture. These arguments must be defined at load time\n(literals or parameters).</p>\n<p>To specify one of the additional arguments, pass the keyword as a\nstring, with the next argument being the value for the keyword. For\nexample <code>..., \"wrap\", \"clamp\", \"border\", {.1,1,1})</code>. See\n<a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#imagefilter\">optional image filter arguments</a>.</p>\n<p>If the texture is a deep <code>.rat</code> file, you can use the <code>\"channel\"</code> keyword argument\nto specify a channel in the file:</p>\n<div class=\"code-container\">\nstring channelname = \"N\";\ncf = texture(map, \"channel\", channelname);\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/colormap\">colormap()</a><div class=\"related-summary\">Looks up a color from a disk image.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "map"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "ss",
                    "tt"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "s0",
                    "t0",
                    "s1",
                    "t1",
                    "s2",
                    "t2",
                    "s3",
                    "t3"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "ss",
                    "tt"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "map",
                    "s0",
                    "t0",
                    "s1",
                    "t1",
                    "s2",
                    "t2",
                    "s3",
                    "t3"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "texture3d": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/texture3d\">texture3d</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">map</span></span></span><p class=\"summary\">Returns the value of the 3d image at the position specified by P.</p><ul><li><code>float texture3d(string filename, string channel, vector P, ...)</code></li><li><code>vector texture3d(string filename, string channel, vector P, ...)</code></li><li><code>vector4 texture3d(string filename, string channel, vector P, ...)</code></li><li><code>matrix3 texture3d(string filename, string channel, vector P, ...)</code></li><li><code>matrix texture3d(string filename, string channel, vector P, ...)</code></li></ul>\n\n\n\n<p>Returns the value of the 3d image at the position specified by P. If P\nis outside of the bounding box of the image, the value returned will be\n0. If the channel specified contains more values than the return type\n(i.e. a vector channel when a float return type is desired), the first\ncomponent of the vector will be returned. If the channel specified\ncontains fewer values than the return type, the missing components will\nbe filled with the last valid channel.</p>\n<p>Texture files will be searched for in the path specified by the\n<code>HOUDINI_TEXTURE_PATH</code> environment variable.</p>\n<p>You can pass additional arguments to control the evaluation (see\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/colormap\" title=\"Looks up a color from a disk image.\">colormap</a>):</p>\n\n<tr>\n</tr>\n<th>\n     Keyword\n    \n</th>\n<th>\n     Value\n    \n</th>\n<tr>\n</tr>\n<td>\n</td>\n<p><code>filter</code>\ntd&gt;&gt; Specifies the filter for evaluation.\ntr&gt;&gt;\ntd&gt;&gt;\n<code>width</code>\ntd&gt;&gt; Specifies the filter width for evaluation.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "channel",
                    "P"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "channel",
                    "P"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "channel",
                    "P"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "channel",
                    "P"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "filename",
                    "channel",
                    "P"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "texture3dBox": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/texture3dBox\">texture3dBox</a></h1><p class=\"summary\">This function queries the 3D texture map specified and returns the\nbounding box information of the file.</p><ul><li><code>void texture3dBox(string filename, string channel, vector &amp;min, vector &amp;max, ...)</code></li></ul>\n\n\n\n<p>This function queries the 3D texture map specified and returns the\nbounding box information of the file. The bounding box is returned in\nthe vectors <code>min</code> and <code>max</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "filename",
                    "channel",
                    "min",
                    "max"
                ],
                "args": [
                    "const string",
                    "const string",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "titlecase": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/titlecase\">titlecase</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Returns a string that is the titlecase version of the input string.</p><ul><li><code>string titlecase(string str)</code></li></ul>\n\n\n\n<p>Converts a normal sentence into titlecase. The rules in use are as follows:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nFirst and last world are always capitalized\n</li>\n<li class=\"bullet \">\nSubtitles are capitalized\n</li>\n<li class=\"bullet \">\nCapitalize all words other than: articles, prepositions, and conjunctions.\n</li>\n<li class=\"bullet \">\nHyphicated words that are capitalized should have their second part capitalized as well\n</li>\n<li class=\"bullet \">\nWords that already contain capital letters are not modified\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/tolower\">tolower()</a><div class=\"related-summary\">Converts all charactors in string to lower case</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/toupper\">toupper()</a><div class=\"related-summary\">Convers all charactors in string to upper case</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "str"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "toNDC": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/toNDC\">toNDC</a></h1><p class=\"summary\">Transforms a position into normal device coordinates.</p><ul><li><code>vector toNDC(string camera_name, vector point)</code></li><li><code>vector toNDC(vector point)</code></li></ul>\n\n\n\n<p>Transforms a position to the normal device coordinates for a camera.\nThe point should be in the local space of the object (i.e. not in the space of the camera).</p>\n<p>toNDC() will return values above and below the 0-1 range outside the view of the camera or light. To the right of the camera are values of 1+ and to the left are values of 0-. The same goes for the range above and below the camera or light.</p>\n<p>Transforms a position into normal device coordinates. This space is only\nwell-defined for the <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts\">Displacement, Surface, and Light\ncontexts</a>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "camera_name",
                    "point"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "point"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "tolower": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/tolower\">tolower</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Converts all charactors in string to lower case</p><ul><li><code>string tolower(string str)</code></li></ul>\n\n\n\n<p>Returns the string with A-Z replaced with a-z.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/toupper\">toupper()</a><div class=\"related-summary\">Convers all charactors in string to upper case</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/titlecase\">titlecase()</a><div class=\"related-summary\">Returns a string that is the titlecase version of the input string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "str"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "toupper": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/toupper\">toupper</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Convers all charactors in string to upper case</p><ul><li><code>string toupper(string str)</code></li></ul>\n\n\n\n<p>Returns the string with a-z replaced with A-Z.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/tolower\">tolower()</a><div class=\"related-summary\">Converts all charactors in string to lower case</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/titlecase\">titlecase()</a><div class=\"related-summary\">Returns a string that is the titlecase version of the input string.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "str"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "trace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace</a></h1><span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Sends a ray from P along the normalized vector D.</p><ul><li><code>void trace(vector &amp;cv, vector &amp;of, float &amp;af, vector P, vector D, float shadow_bias, float max_contrib, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>int trace(vector pos, vector dir, float time, ...)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>Only the second signature accepts any of the following variadic arguments. The first trace signature is more specific, and is legacy from older versions of mantra.</p>\n</div>\n</div>\n</div>\n\n<h2 class=\"label heading\" id=\"variadic-gather-arguments\">\n            \n            Variadic Gather Arguments\n        </h2>\n<div class=\"content\" id=\"variadic-gather-arguments-body\">\n<p>There are three types of arguments you can pass to the gather loop: arguments controlling how to send rays, what information to pass to the shaders of other surfaces hit by the ray, and what information to import back from each sent ray.</p>\n\n<h3 class=\"label heading\" id=\"controlling-how-to-send-the-rays\">\n            \n            Controlling how to send the rays\n        </h3>\n<div class=\"content\" id=\"controlling-how-to-send-the-rays-body\">\n<p>These argument pairs control how the gather statement sends rays into the scene.</p>\n\n<p>See also the Pipeline option section in the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/gather\" title=\"Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.\">gather()</a> function help.</p>\n</div>\n\n\n<h3 class=\"label heading\" id=\"sending-information-to-the-hit-surface-s-shader\">\n            \n            Sending information to the hit surface\u2019s shader\n        </h3>\n<div class=\"content\" id=\"sending-information-to-the-hit-surface-s-shader-body\">\n<p>Using a keyword in the form <code>\"send:<code>name</code>\", value</code>, you can pass data from the originating surface to surfaces which are intersected by the ray. These arguments pass any values you want.</p>\n<div class=\"code-container\">\n<code class=\"line\">gather(P, dir, \"send:N\", normalize(N)) { ... }\n</code>\n</div>\n<p>You can extract this passed data on the receiving end (that is, in the surface being hit by the ray) with the <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/rayimport\" title=\"Imports a value sent by a shader in a gather loop.\">rayimport()</a> function. The first argument is the name (without the <code>send:</code> prefix) and the second argument is a variable in which to store the imported value.</p>\n<p><code>int rayimport(string name, <code>type</code> &amp;value)</code></p>\n<p><code>rayimport</code> returns <code>1</code> if the value was imported successfully.</p>\n</div>\n\n\n<h3 class=\"label heading\" id=\"importing-information-back-from-the-ray\">\n            \n            Importing information back from the ray\n        </h3>\n<div class=\"content\" id=\"importing-information-back-from-the-ray-body\">\n<p>You can specify names of global or exported variables to import from the hit shader in the form <code>\"<code>varname</code>\", &amp;var</code>, typically including <code>Cf</code> (color vector of surface hit) and <code>Of</code> (opacity vector of surface hit).</p>\n<div class=\"code-container\">\n<code class=\"line\">vector  hitcf;\n</code><code class=\"line\">gather(P, dir, \"bias\", 0.01, \"Cf\", hitcf) {...}\n</code>\n</div>\n<p>In addition, you can import the following special keywords to get information about the ray itself:</p>\n\n<p>By default, Houdini composites the global variables using opacity blending. In some cases, it\u2019s more useful to get the value from the closest surface (regardless of whether it\u2019s transparent). You can use the special <code>samplefilter</code> keyword with a string value of either <code>closest</code> or <code>opacity</code> to control whether the value of a global is from the closest surface or opacity blended.</p>\n<p>When the <code>samplefilter</code> keyword is encountered in the argument list, <em>all following</em> import variables will use the specified filtering mode. You can specify multiple <code>samplefilter</code> arguments in a single gather statement to filter different variables in different ways.</p>\n<p>The current types of allowed for <code>samplefilter</code> are</p>\n\n<p>\n<code>minimum</code>\n\n<div class=\"content\">\n<p>Take the minimum value of all the samples.  Note that with tuple values, the minimum value of each component will be used.</p>\n</div>\n</p>\n<p>\n<code>maximum</code>\n\n<div class=\"content\">\n<p>Take the maximum value of all the samples.  Note that with tuple values, the maximum value of each component will be used.</p>\n</div>\n</p>\n<p>\n<code>opacity</code>\n\n<div class=\"content\">\n<p>Composite samples using the over operation.</p>\n</div>\n</p>\n<p>\n<code>closest</code>\n\n<div class=\"content\">\n<p>This is the default behavior, returning only the closest surface.</p>\n</div>\n</p>\n<p>\n<code>screendoor</code>\n\n<div class=\"content\">\n<p>Use stochastic compositing of the samples.</p>\n</div>\n</p>\n<p>\n<code>sum</code>\n\n<div class=\"content\">\n<p>Return the sum of the values for all samples.</p>\n</div>\n</p>\n<p>\n<code>sum_square</code>\n\n<div class=\"content\">\n<p>Return the sum of the squares of the values of all samples.</p>\n</div>\n</p>\n<p>\n<code>sum_reciprocal</code>\n\n<div class=\"content\">\n<p>Return the sum of the reciprocals of each sample.</p>\n</div>\n</p>\n\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>When using <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/sample_geometry\" title=\"Samples geometry in the scene and returns information from the shaders of surfaces that were sampled.\">sample_geometry()</a>, the default <code>samplefilter</code> is set to <code>closest</code> by default, since opacity blending only works when compositing data along a ray.</p>\n</div>\n</div>\n</div>\n<div class=\"code-container\">\n<code class=\"line\">gather(P, dir,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"opacity\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cf\", hitCf,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Of\", hitOf,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"closest\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"P\", hitP,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"N\", hitN)\n</code><code class=\"line\">\n</code><code class=\"line\">trace(pos, dir, time,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Composite the bsdf of the hit surfaces using stochastic transparency\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"screendoor\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"F\", hitF,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// But find the closest sample's position\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"closest\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"P\", hitP);\n</code>\n</div>\n<p>It is also possible to retrieve information about more than one hit along\nthe ray by requesting data in an array variable in VEX.  When an imported\nvalue is of an array type, the trace() function will automatically append\nan entry in the array for each individual hit point that was composited\nduring ray tracing.  For the <code>opacity</code> <code>samplefilter</code>, an entry will be\ncreated in the array for each semi-transparent sample encountered until\nfull opacity is reached.  When using array outputs, it may also be useful\nto use the <code>all</code> <code>samplefilter</code>, which will cause all hits along the ray to\nbe inserted regardless of whether the opacity limit was exceeded.</p>\n<div class=\"code-container\">\n<code class=\"line\">// Find the position and normal for all hit points along the ray,\n</code><code class=\"line\">// regardless of visibility.\n</code><code class=\"line\">vector a_pos[];\n</code><code class=\"line\">vector a_nml[];\n</code><code class=\"line\">trace(P, dir, Time,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"samplefilter\", \"all\",\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"P\", a_pos,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"N\", a_nml);\n</code>\n</div>\n</div>\n\n</div>\n\n\n<h2 class=\"label heading\" id=\"pipeline-option\">\n            \n            Pipeline option\n        </h2>\n<div class=\"content\" id=\"pipeline-option-body\">\n<p>As you specify variables, you can intersperse <code>pipeline</code> keyword options to control where in the pipeline to fill out read/write variables. The value can be one of <code>surface</code>, <code>atmosphere</code>, or <code>displacement</code>. You can specify the <code>pipeline</code> option multiple times. Each use of the option affects any variables specified after it (up to the next usage of <code>pipeline</code> if any).</p>\n<div class=\"code-container\">\n<code class=\"line\">gather(p, d, \"pipeline\", \"surface\", \"Cf\", surfCf,\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"pipeline\", \"atmosphere\" \"Cf\", fogCf, \"P\", hitP)\n</code>\n</div>\n</div>\n\n\n<h2 class=\"label heading\" id=\"light-mask\">\n            \n            Light mask\n        </h2>\n<div class=\"content\" id=\"light-mask-body\">\n\n<p>\n<code>lightmask</code>\n\n<div class=\"content\">\n<p>You can use the <code>lightmask</code> keyword argument to pass a light name\n    pattern to limit the set of lights used to illuminate the hit surface.\n    This allows the tracing surface to control the lighting of the hit\n    surface.  The <code>\"scope:default\"</code> value will cause the <code>lightmask</code>\n    argument to use the default light mask for the current context - as if\n    the argument were not specified.</p>\n<div class=\"code-container\">\n..., \"lightmask\", \"hotlights*\");\n\n</div></div>\n</p>\n\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rayhittest\">rayhittest()</a><div class=\"related-summary\">Sends a ray from the position P along the direction D.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/reflectlight\">reflectlight()</a><div class=\"related-summary\">Computes the amount of reflected light which hits the surface.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/gather\">gather()</a><div class=\"related-summary\">Sends rays into the scene and returns information from the shaders of\nsurfaces hit by the rays.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/trace\">trace()</a><div class=\"related-summary\">Sends a ray from P along the normalized vector D.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/irradiance\">irradiance()</a><div class=\"related-summary\">Computes irradiance (global illumination) at the point P with the\nnormal N.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "pos",
                    "dir",
                    "time"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "int",
                "variadic": true,
                "variadic_pair": true
            },
            {
                "argnames": [
                    "cv",
                    "of",
                    "af",
                    "P",
                    "D",
                    "shadow_bias",
                    "max_contrib"
                ],
                "args": [
                    "vector",
                    "vector",
                    "float",
                    "const vector",
                    "const vector",
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "translate": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/translate\">translate</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Translates the given matrix.</p><ul><li><code>void translate(matrix &amp;mat, vector amount)</code></li><li><code>void translate(matrix &amp;mat, vector4 amount)</code></li></ul>\n\n\n\n<p>Translates the given matrix.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "mat",
                    "amount"
                ],
                "args": [
                    "export matrix",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "void"
            },
            {
                "argnames": [
                    "mat",
                    "amount"
                ],
                "args": [
                    "export matrix",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "translucent": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/translucent\">translucent</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">bsdf</span></span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Returns the lambertian translucence given the surface normal.</p><ul><li><code>bsdf translucent(vector nml, vector ng, ...)</code></li></ul>\n\n\n\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../pbr\">writing a PBR shader</a> for information on BSDFs.</p>\n<p>This method returns a diffuse bsdf for the transmission direction. This can\nbe used as a cheap alternative to subsurface scattering for thin surfaces,\nto allow illumination to pass from one side of the object to the other\nwhile also broadly diffusing the illumination like diffuse.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/diffuse\">diffuse()</a><div class=\"related-summary\">Returns the diffuse (Lambertian) illumination given the normalized\nsurface normal.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "nml",
                    "ng"
                ],
                "args": [
                    "const vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "transpose": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/transpose\">transpose</a></h1><span><span class=\"padder\"><span class=\"pillow\">matrix</span></span></span><p class=\"summary\">Transposes the given matrix.</p><ul><li><code>void transpose(matrix2 &amp;mat)</code></li><li><code>void transpose(matrix3 &amp;mat)</code></li><li><code>void transpose(matrix &amp;mat)</code></li><li><code>matrix2 transpose(matrix2 mat)</code></li><li><code>matrix3 transpose(matrix3 mat)</code></li><li><code>matrix transpose(matrix mat)</code></li></ul>\n\n\n\n<p>Transposes the given matrix.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "export matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "void"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "export matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "void"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "export matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "void"
            },
            {
                "argnames": [
                    "mat"
                ],
                "args": [
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            }
        ]
    },
    "trunc": {
        "added": "12.1",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/trunc\">trunc</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.1</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">If the argument is negative, this returns ceil(x), otherwise it returns floor(x).</p><ul><li><code>float trunc(float value)</code></li><li><code>vector2 trunc(vector2 value)</code></li><li><code>vector trunc(vector x)</code></li><li><code>vector4 trunc(vector4 x)</code></li></ul>\n\n\n\n<p>if the argument is negative, this returns <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/ceil\" title=\"Returns the smallest integer greater than or equal to the argument.\">ceil()</a>(x), otherwise it returns\n<a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/floor\" title=\"Returns the largest integer less than or equal to the argument.\">floor()</a>(x).</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector2"
            },
            {
                "argnames": [
                    "x"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "tw_nspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/tw_nspace\">tw_nspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a normal vector from Texture to World space.</p><ul><li><code>vector tw_nspace(vector n)</code></li></ul>\n\n\n\n<p>Transforms a normal vector from <em>Texture</em> to <em>World</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "n"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "tw_space": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/tw_space\">tw_space</a></h1><span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a position value from Texture to World space.</p><ul><li><code>vector tw_space(vector v)</code></li><li><code>vector4 tw_space(vector4 v)</code></li><li><code>matrix tw_space()</code></li></ul>\n\n\n\n<p>Transforms a position value from <em>Texture</em> to <em>World</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "tw_vspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/tw_vspace\">tw_vspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a direction vector from Texture to World space.</p><ul><li><code>vector tw_vspace(vector v)</code></li></ul>\n\n\n\n<p>Transforms a direction vector from <em>Texture</em> to <em>World</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "uniqueval": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/uniqueval\">uniqueval</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns a unique value from an integer or string attribute.</p><ul><li><code>int uniqueval(int opinput, string class, string attribute_name, int which)</code></li><li><code>int uniqueval(string file, string class, string attribute_name, int which)</code></li><li><code>string uniqueval(int opinput, string class, string attribute_name, int which)</code></li><li><code>string uniqueval(string file, string class, string attribute_name, int which)</code></li></ul>\n\n\n\n<p>Returns a unique value from an integer or string attribute.</p>\n\n<p>\n<code>opinput</code>\n\n<div class=\"content\">\n<p>Which input to the current node.</p>\n</div>\n</p>\n<p>\n<code>file</code>\n\n<div class=\"content\">\n<p>A geometry file on disk or an op: operator reference.</p>\n</div>\n</p>\n<p>\n<code>class</code>\n\n<div class=\"content\">\n<p>What type of attribute: <code>detail</code>, <code>primitive</code>, <code>point</code>, or <code>vertex</code>.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute, ie <code>P</code> or <code>Cd</code>.</p>\n</div>\n</p>\n<p>\n<code>which</code>\n\n<div class=\"content\">\n<p>Which one of the unique values to return.\n    Use <code>nuniqueval</code> to determine how many matched.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name",
                    "which"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "file",
                    "class",
                    "attribute_name",
                    "which"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "class",
                    "attribute_name",
                    "which"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "file",
                    "class",
                    "attribute_name",
                    "which"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "unpack_intfromsafefloat": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/unpack_intfromsafefloat\">unpack_intfromsafefloat</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">polysoup</span></span></span><p class=\"summary\">Reverses the packing of pack_inttosafefloat to get back the original integer.</p><ul><li><code>int unpack_intfromsafefloat(float value)</code></li></ul>\n\n\n\n<p>This is used to find the inner polygon number, from the w component\nof a primitive uvw vector referring to a polygon soup primitive.</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\nIntegers in the range\n<code>abs(i) &lt;= (2^24) = 16,777,216</code>\nwill be represented exactly by the floats of the same value.\n</li>\n<li class=\"bullet \">\nIntegers in the range\n<code>16,777,216 &lt; abs(i) &lt; (2^24) + 104*(2^23) = 889,192,448</code>\nwill be represented by larger, non-infinite floats.\n</li>\n<li class=\"bullet \">\nIntegers in the range\n<code>889,192,448 &lt;= abs(i) &lt; (2^24) + 230*(2^23) = 1,946,157,056</code>\nwill be represented by small, non-denormal floats.\n</li>\n<li class=\"bullet \">\nAny other integers, <code>abs(i) &gt;= 1,946,157,056</code>, will not be\nrepresented correctly.\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pack_inttosafefloat\">pack_inttosafefloat()</a><div class=\"related-summary\">Reversibly packs an integer into a finite, non-denormal float.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/xyzdist\">xyzdist()</a><div class=\"related-summary\">Finds the distance of a point to a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/intersect\">intersect()</a><div class=\"related-summary\">This function computes the intersection of the specified ray with the geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "value"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "unserialize": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/unserialize\">unserialize</a></h1><p class=\"summary\">Turns a flat array of floats into an array of vectors or matrices.</p><ul><li><code>vector2[] unserialize(float[] array)</code></li><li><code>vector[] unserialize(float[] array)</code></li><li><code>vector4[] unserialize(float[] array)</code></li><li><code>matrix2[] unserialize(float[] array)</code></li><li><code>matrix3[] unserialize(float[] array)</code></li><li><code>matrix[] unserialize(float[] array)</code></li></ul>\n\n\n<ol>\n<li>\n<p><code>vector []  unserialize(float [])</code></p>\n</li>\n<li>\n<p><code>vector4 [] unserialize(float [])</code></p>\n</li>\n<li>\n<p><code>matrix3 [] unserialize(float [])</code></p>\n</li>\n<li>\n<p><code>matrix4 [] unserialize(float [])</code></p>\n</li>\n</ol>\n<p>The inverse operation to <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/serialize\" title=\"Flattens an array of vector or matrix types into an array of floats.\">serialize()</a>. This operation takes an array of float values\nand creates a new array of vectors or floats by taking each float and assigning it to the\nnext component of the vector or matrix in the output array. For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">vector v[]\n</code><code class=\"line\">float  f[] = { 1, 2, 3,  7, 8, 9 };\n</code><code class=\"line\">\n</code><code class=\"line\">v = vector(unserialize(f));\n</code><code class=\"line\">// Now v has a length of 2 and contains { {1,2,3}, {7,8,9} }\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/serialize\">serialize()</a><div class=\"related-summary\">Flattens an array of vector or matrix types into an array of floats.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "array"
                ],
                "args": [
                    "const float[]"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector[]"
            }
        ]
    },
    "upush": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/upush\">upush</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span></span><p class=\"summary\">Adds a uniform item to an array.</p><ul><li><code>void upush(int[] &amp;array, int value)</code></li><li><code>void upush(string[] &amp;array, string value)</code></li><li><code>void upush(float[] &amp;array, float value)</code></li><li><code>void upush(vector2[] &amp;array, vector2 value)</code></li><li><code>void upush(vector[] &amp;array, vector value)</code></li><li><code>void upush(vector4[] &amp;array, vector4 value)</code></li><li><code>void upush(matrix2[] &amp;array, matrix2 value)</code></li><li><code>void upush(matrix3[] &amp;array, matrix3 value)</code></li><li><code>void upush(matrix[] &amp;array, matrix value)</code></li><li><code>void upush(bsdf[] &amp;array, bsdf value)</code></li><li><code>void upush(light[] &amp;array, light value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li><li><code>void upush(material[] &amp;array, material value)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>Pushes a uniform value onto an array for all SIMD processors (regardless of the processor enabled state).</p>\n<p>This is a very specialized function, primarily used to manage light exports in PBR lighting.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/push\">push()</a><div class=\"related-summary\">Adds an item to an array.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix2[]",
                    "const matrix2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix3[]",
                    "const matrix3"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export matrix[]",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export bsdf[]",
                    "const bsdf"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export light[]",
                    "const light"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export material[]",
                    "const material"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export float[]",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export int[]",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector4[]",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export string[]",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector2[]",
                    "const vector2"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            },
            {
                "argnames": [
                    "array",
                    "value"
                ],
                "args": [
                    "export vector[]",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARRAY",
                "return": "void"
            }
        ]
    },
    "uvdist": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/uvdist\">uvdist</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds the distance of a uv coordinate to a geometry in uv space.</p><ul><li><code>float uvdist(int input, string uvname, vector pt, int &amp;prim, vector &amp;primuv)</code></li><li><code>float uvdist(int input, string uvname, vector pt, int &amp;prim, vector &amp;primuv, float maxdist)</code></li><li><code>float uvdist(string geometry, string uvname, vector uv, int &amp;prim, vector &amp;primuv)</code></li><li><code>float uvdist(string geometry, string uvname, vector uv, int &amp;prim, vector &amp;primuv, float maxdist)</code></li></ul>\n\n\n\n<p>Returns the distance to the closest uv coordinate on the geometry in uv space.  This will find\npositions on the surfaces of the geometry, not just point positions.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>input</code>\n\n<div class=\"content\">\n<p>An input index.</p>\n</div>\n</p>\n<p>\n<code>uvname</code>\n\n<div class=\"content\">\n<p>The name of a point or vertex attribute on the <code>geometry</code> to\n    use as the uv space. The geometry will be unwrapped inplace based\n    on this attribute.\n    The attribute can be a 2D UV, 3D UVW, but also any vector attribute.</p>\n</div>\n</p>\n<p>\n<code>uv</code>\n\n<div class=\"content\">\n<p>The position in uv space to find the closest position on the geometry to.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The number of the closest primitive.  -1 if no primitive found.</p>\n</div>\n</p>\n<p>\n<code>primuv</code>\n\n<div class=\"content\">\n<p>The primitive uv coordinates the closest primitive.  The <code>primuv</code> function\n    can be used to evaluate attributes at that location.</p>\n</div>\n</p>\n<p>\n<code>maxdist</code>\n\n<div class=\"content\">\n<p>The maximum distance to search in uv space. The operation can be sped up if it\n    is allowed to quit early.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "uvname",
                    "pt",
                    "prim",
                    "primuv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "int",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "uvname",
                    "pt",
                    "prim",
                    "primuv",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "int",
                    "vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "uvname",
                    "uv",
                    "prim",
                    "primuv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "int",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "uvname",
                    "uv",
                    "prim",
                    "primuv",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "int",
                    "vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "uvintersect": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/uvintersect\">uvintersect</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">This function computes the intersection of the specified ray with the geometry in uv space.</p><ul><li><code>int uvintersect(int input, string uvname, vector orig, vector dir, vector &amp;pos, vector &amp;primuv)</code></li><li><code>int uvintersect(string filename, string uvname, vector orig, vector dir, vector &amp;pos, vector &amp;primuv)</code></li></ul>\n\n\n\n<p>This function computes the intersection of the specified ray with the geometry in uv space. The primitive number is returned, or -1 if there is an error or no intersection found.</p>\n<p>The position in uvspace of the intersection location is stored in <code>p</code>. The corresponding parametric location of the intersection is stored in <code>primuv</code>. In the case of multiple intersections, the intersection closest to the ray origin is used.</p>\n<p>This function does not expect a normalized direction vector. Instead, it uses the length of the vector as the maximum distance. The integer result is the primitive hit.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>It can be hard to visualize a 3D intersection of a ray in a 3D UV space. One trick that can be used is to unwrap the geometry in SOP to get better visualization of the space. This can be done by using a <a class=\"link missing Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/splitvertex\">Split Vertex SOP</a> followed by a <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/sop/attribcopy\" title=\"Copies attributes between groups of vertices,\npoints, or primitives.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/SOP/attribcopy.svg\">[Image \ud83d\udd17]</a>Attribute Copy SOP</a>. This will disconnect the faces at uv boundaries and stamp the uvw values on top of the <code>P</code> attribute.</p>\n</div>\n</div>\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>When intersections are performed against metaball geometry, it is impossible to determine the primitive number of the metaball which was hit. In this case, the function returns the number of primitives in the intersection geometry.</p>\n</div>\n</div>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "uvname",
                    "orig",
                    "dir",
                    "pos",
                    "primuv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "uvname",
                    "orig",
                    "dir",
                    "pos",
                    "primuv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "const vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "uvsample": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/uvsample\">uvsample</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Evaluates an attribute on a geometry using a uv attribute name and value.</p><ul><li><code>int uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>int uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>float uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>float uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>vector2 uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>vector2 uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>vector uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>vector uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>vector4 uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>vector4 uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>matrix2 uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>matrix2 uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>matrix3 uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>matrix3 uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>matrix uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>matrix uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>int[] uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>int[] uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>float[] uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>float[] uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>vector2[] uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>vector2[] uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>vector[] uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>vector[] uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>vector4[] uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>vector4[] uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>matrix2[] uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>matrix2[] uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>matrix3[] uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>matrix3[] uvsample(string filename, string att, string uvname, vector uv)</code></li><li><code>matrix[] uvsample(int input, string att, string uvname, vector uv)</code></li><li><code>matrix[] uvsample(string filename, string att, string uvname, vector uv)</code></li></ul>\n\n\n\n<p>Evaluates the attribute <code>att</code> on a geometry using a uv attribute name <code>uvname</code> at &lt;uv&gt; value.\nIt returns the value at the closest uv location.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>input</code>\n\n<div class=\"content\">\n<p>An input index.</p>\n</div>\n</p>\n<p>\n<code>att</code>\n\n<div class=\"content\">\n<p>The name of a primitive, point, or vertex attribute to sample.\n    The attribute value is interpolated based on the uv location.</p>\n</div>\n</p>\n<p>\n<code>uvname</code>\n\n<div class=\"content\">\n<p>The name of a point or vertex attribute on the <code>geometry</code> to\n    use as the uv space. The geometry will be unwrapped inplace based\n    on this attribute.\n    The attribute can be a 2D UV, 3D UVW, but also any vector attribute.</p>\n</div>\n</p>\n<p>\n<code>uv</code>\n\n<div class=\"content\">\n<p>The position in uv space to find the sample location on the geometry.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "input",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "filename",
                    "att",
                    "uvname",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector[]"
            }
        ]
    },
    "uvunwrap": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/uvunwrap\">uvunwrap</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">raytracing</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\">Computes the position and normal of an object given a (u, v) coordinate</p><ul><li><code>int uvunwrap(string undocumented, float u, float v, float time, vector &amp;P, vector &amp;I)</code></li><li><code>int uvunwrap(string undocumented, float u, float v, float time, vector &amp;undocumented, vector &amp;undocumented, vector &amp;undocumented, vector &amp;undocumented)</code></li></ul>\n\n\n\n<p>Computes the position and normal of an object given a (u, v) coordinate, and stores the resulting position and normal on the object in the vectors <code>P</code> and <code>I</code>, respectively.</p>\n<p>A return value of 1 means that the (u, v) coordinate corresponds to a point on a face of the object. A return value of 0 means it doesn\u2019t.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "undocumented",
                    "u",
                    "v",
                    "time",
                    "P",
                    "I"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "undocumented",
                    "u",
                    "v",
                    "time",
                    "undocumented",
                    "undocumented",
                    "undocumented",
                    "undocumented"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const float",
                    "vector",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "variance": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/variance\">variance</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">math</span></span></span><p class=\"summary\">Computes the mean value and variance for a value.</p><ul><li><code>float variance(float variable, float &amp;mean, int &amp;sample_size)</code></li></ul>\n\n\n\n<p>This function will compute the mean and variance from nearby samples.  Similar to the way that VEX is able to compute derivatives, this function is able to inspect the <code>variable</code> for a nearby area and compute the mean and variance of the <code>variable</code>.</p>\n<p>The function returns the <code>variance</code> (\u03c3<sup>2</sup>).  The <code>mean</code> value will also be returned along with the <code>sample_size</code> indicating how many nearby samples were considered.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "variable",
                    "mean",
                    "sample_size"
                ],
                "args": [
                    "const float",
                    "float",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "velocityname": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/velocityname\">velocityname</a></h1><span><span class=\"padder\"><span class=\"pillow\">output_plane</span></span></span><p class=\"summary\">Returns the default name of the velocity plane (as it appears in the\ncompositor preferences).</p><ul><li><code>string velocityname()</code><span class=\"padder\"><span class=\"pillow\">cop2</span></span></li></ul>\n\n\n\n<p>Returns the default name of the velocity plane (as it appears in the\ncompositor preferences). Using this instead of hardcoding the default\nmakes your code more portable. Default is \"V\".</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "cop2"
                ],
                "fillstate": "NOARG",
                "return": "string"
            }
        ]
    },
    "vertex": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertex\">vertex</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a vertex attribute value from a geometry.</p><ul><li><code>int vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>int vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>int vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>int vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>string vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>string vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>string vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>string vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>float vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>float vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>float vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>float vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>vector2 vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>vector2 vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>vector2 vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>vector2 vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>vector vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>vector vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>vector vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>vector vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>vector4 vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>vector4 vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>vector4 vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>vector4 vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>matrix2 vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>matrix2 vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>matrix2 vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>matrix2 vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>matrix3 vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>matrix3 vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>matrix3 vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>matrix3 vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>matrix vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>matrix vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>matrix vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>matrix vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>int[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>int[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>int[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>int[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>string[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>string[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>string[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>string[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>float[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>float[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>float[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>float[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>vector2[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>vector2[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>vector2[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>vector2[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>vector[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>vector[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>vector[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>vector[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>vector4[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>vector4[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>vector4[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>vector4[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>matrix2[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>matrix2[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>matrix2[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>matrix2[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>matrix3[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>matrix3[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>matrix3[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>matrix3[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li><li><code>matrix[] vertex(int opinput, string attribute_name, int linearvertex)</code></li><li><code>matrix[] vertex(int opinput, string attribute_name, int prim, int vertex)</code></li><li><code>matrix[] vertex(string geometry, string attribute_name, int linearvertex)</code></li><li><code>matrix[] vertex(string geometry, string attribute_name, int prim, int vertex)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if importing the attribute failed, the value of the attribute on success.</p>\n<p><code>opinput</code>:\nThe number of the input to the current node, starting with <code>0</code> being the first input.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n<p>\n<code>linearvertex</code>\n\n<div class=\"content\">\n<p>The linear vertex number.  The <code>vertexindex</code> function can be used to compute a linear vertex from a primitive number and vertex number pair.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>vertex</code>\n\n<div class=\"content\">\n<p>The vertex number inside of a primitive.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">vector        uv;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the value of the \"uv\" attribute for vertex 2 of primitive\n</code><code class=\"line\">// number 3 in the file defgeo.bgeo\n</code><code class=\"line\">uv = vertex(\"defgeo.bgeo\", \"uv\", 3, 2);\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexattrib\">vertexattrib</a><div class=\"related-summary\">Imports a vertex attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/setvertexattrib\">setvertexattrib</a><div class=\"related-summary\">Sets a vertex attribute in a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/hasvertexattrib\">hasvertexattrib</a><div class=\"related-summary\">Returns if a geometry vertex attribute exists.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexattribsize\">vertexattribsize</a><div class=\"related-summary\">Returns the size of a geometry vertex attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexattribtype\">vertexattribtype</a><div class=\"related-summary\">Returns the type of a geometry vertex attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertexattribtypeinfo\">vertexattribtypeinfo</a><div class=\"related-summary\">Returns the type info of a geometry attribute.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/addvertexattrib\">addvertexattrib</a><div class=\"related-summary\">Adds an attribute to a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/attrib\">attrib</a><div class=\"related-summary\">Reads an attribute value from geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getattrib\">getattrib</a><div class=\"related-summary\">Reads an attribute value from geometry, with validity check.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/point\">point</a><div class=\"related-summary\">Imports a point attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/prim\">prim</a><div class=\"related-summary\">Imports a primitive attribute value from a geometry.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/detail\">detail</a><div class=\"related-summary\">Imports a detail attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "prim",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "vertexattrib": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexattrib\">vertexattrib</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Imports a vertex attribute value from a geometry.</p><ul><li><code>int vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>int vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>string vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>string vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>float vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>float vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector2 vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector2 vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector4 vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector4 vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix2 vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix2 vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix3 vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix3 vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>int[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>int[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>string[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>string[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>float[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>float[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector2[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector2[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector4[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>vector4[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix2[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix2[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix3[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix3[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix[] vertexattrib(int opinput, string attribute_name, int linearvertex, int &amp;success)</code></li><li><code>matrix[] vertexattrib(string geometry, string attribute_name, int linearvertex, int &amp;success)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if importing the attribute failed, the value of the attribute on success.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>This only supports linear vertices.</p>\n</div>\n</div>\n</div>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n<p>\n<code>linearvertex</code>\n\n<div class=\"content\">\n<p>The linear vertex number.  The <code>vertexindex</code> function can be used to compute a linear vertex from a primitive number and vertex number pair.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The primitive number.</p>\n</div>\n</p>\n<p>\n<code>vertex</code>\n\n<div class=\"content\">\n<p>The vertex number inside of a primitive.</p>\n</div>\n</p>\n<p>\n<code>success</code>\n\n<div class=\"content\">\n<p>Set to 1 if the import was successful, 0 if it failed due to no matching attribute or invalid number.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/vertex\">vertex</a><div class=\"related-summary\">Imports a vertex attribute value from a geometry.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix3[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "matrix[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "float[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "int[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector4[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "string[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector2[]"
            },
            {
                "argnames": [
                    "opinput",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name",
                    "linearvertex",
                    "success"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const int",
                    "int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "RETRN",
                "return": "vector[]"
            }
        ]
    },
    "vertexattribsize": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexattribsize\">vertexattribsize</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the size of a geometry vertex attribute.</p><ul><li><code>int vertexattribsize(int opinput, string attribute_name)</code></li><li><code>int vertexattribsize(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>0</code> if the attribute cannot be found.</p>\n<p>Otherwise, it is the tuple size of the attribute.  A vector, for example, has size 3.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        size;\n</code><code class=\"line\">// Get the size of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">size = vertexattribsize(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vertexattribtype": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexattribtype\">vertexattribtype</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type of a geometry vertex attribute.</p><ul><li><code>int vertexattribtype(int opinput, string attribute_name)</code></li><li><code>int vertexattribtype(string geometry, string attribute_name)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the attribute can\u2019t be found.</p>\n<p>Otherwise:</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>-1</code>: Unknown or not found type.\n</li>\n<li class=\"bullet \">\n<code>0</code>: Integer type\n</li>\n<li class=\"bullet \">\n<code>1</code>: Float type\n</li>\n<li class=\"bullet \">\n<code>2</code>: String type\n</li>\n<li class=\"bullet \">\n<code>3</code>: Integer Array type\n</li>\n<li class=\"bullet \">\n<code>4</code>: Float Array type\n</li>\n<li class=\"bullet \">\n<code>5</code>: String Array type\n</li>\n</ul>\n<p>NOTE:\nVectors are considered float type.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        type;\n</code><code class=\"line\">// Get the type of the position attribute of \"defgeo.bgeo\"\n</code><code class=\"line\">type = vertexattribtype(\"defgeo.bgeo\", \"P\");\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vertexattribtypeinfo": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexattribtypeinfo\">vertexattribtypeinfo</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the type info of a geometry attribute.</p><ul><li><code>string vertexattribtypeinfo(int opinput, string attribute_name)</code></li><li><code>string vertexattribtypeinfo(string geometry, string attribute_name)</code></li></ul>\n\n\n\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>attribute_name</code>\n\n<div class=\"content\">\n<p>The name of the attribute (e.g. <code>Cd</code> or <code>P</code>).</p>\n</div>\n</p>\n\n<p>Returns <code>\"\"</code> if the attribute can\u2019t be found. Otherwise:</p>\n\n<p>\n<code>none</code>\n\n<div class=\"content\">\n<p>No transformations should be applied.</p>\n</div>\n</p>\n<p>\n<code>point</code>\n\n<div class=\"content\">\n<p>Scales, rotations, and translations should be applied.</p>\n</div>\n</p>\n<p>\n<code>hpoint</code>\n\n<div class=\"content\">\n<p>A four-vector with scales, rotations, and translations applied.</p>\n</div>\n</p>\n<p>\n<code>vector</code>\n\n<div class=\"content\">\n<p>Scales and rotations should be applied.</p>\n</div>\n</p>\n<p>\n<code>normal</code>\n\n<div class=\"content\">\n<p>Scales and rotations should be applied.  Scales are applied with inverse-transpose.</p>\n</div>\n</p>\n<p>\n<code>color</code>\n\n<div class=\"content\">\n<p>No transformations.</p>\n</div>\n</p>\n<p>\n<code>matrix</code>\n\n<div class=\"content\">\n<p>A 4\u00d74 matrix with scale, rotations, and translations applied.</p>\n</div>\n</p>\n<p>\n<code>quaternion</code>\n\n<div class=\"content\">\n<p>A four-vector with rotations applied.</p>\n</div>\n</p>\n<p>\n<code>indexpair</code>\n\n<div class=\"content\">\n<p>No transformations.</p>\n</div>\n</p>\n<p>\n<code>integer</code>\n\n<div class=\"content\">\n<p>Integer values that do not blend when points are averaged.</p>\n</div>\n</p>\n<p>\n<code>integer-blend</code>\n\n<div class=\"content\">\n<p>Integer values that blend when points are averaged.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "attribute_name"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            },
            {
                "argnames": [
                    "geometry",
                    "attribute_name"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "string"
            }
        ]
    },
    "vertexhedge": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexhedge\">vertexhedge</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the half-edge which has a vertex as source.</p><ul><li><code>int vertexhedge(int opinput, int vertex)</code></li><li><code>int vertexhedge(string geometry, int vertex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if failed to find the corresponding vertex. Otherwise returns the number for the half-edge that has <code>vertex</code> as source and the vertex following <code>vertex</code> in the primitive of <code>vertex</code> as destination.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>vertex</code>\n\n<div class=\"content\">\n<p>The linear vertex number in the geometry.  <code>0</code> is the first vertex.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int vtxhedge;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the hedge out of vertex vertex number 2.\n</code><code class=\"line\">vtxhedge = vertexhedge(\"defgeo.bgeo\", 2);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vertexindex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexindex\">vertexindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Converts a primitive/vertex pair into a linear vertex.</p><ul><li><code>int vertexindex(int opinput, int primnum, int vertex)</code></li><li><code>int vertexindex(string geometry, int primnum, int vertex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if failed to find the corresponding linear vertex.</p>\n<p>This function looks at the vertexth vertex on the given primitive.\n0 for vertex means the first vertex on the primitive.  It returns the\nlinear vertex number that is unique over the whole geometry and\ncan be used by other vex functions.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini, this may be <code>op:full_path_to_sop</code> to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>primnum</code>\n\n<div class=\"content\">\n<p>The primitive number to get a vertex from.</p>\n</div>\n</p>\n<p>\n<code>vertex</code>\n\n<div class=\"content\">\n<p>The vertex number inside of a primitive.  0 is the first vertex.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int linearvtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the linear vertex value of vertex 2 of primitive 3.\n</code><code class=\"line\">linearvtx = vertexindex(\"defgeo.bgeo\", 3, 2);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primnum",
                    "vertex"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "primnum",
                    "vertex"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vertexnext": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexnext\">vertexnext</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the linear vertex number of next shared vertex in a geometry.</p><ul><li><code>int vertexnext(int opinput, int linearvertex)</code></li><li><code>int vertexnext(string geometry, int linearvertex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the vertex has no more shared vertices.\nOtherwise returns the linear index of the next shared vertex.</p>\n<p>Using this one can iterate over all vertices that share a point.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>linearvertex</code>\n\n<div class=\"content\">\n<p>The linear vertex number.  The <code>vertexindex</code> function can be used\n    to compute a linear vertex from a primitive number and vertex\n    number pair.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        vtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the next vertex of vertex 3\n</code><code class=\"line\">vtx = vertexnext(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vertexpoint": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexpoint\">vertexpoint</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the point number of linear vertex in a geometry.</p><ul><li><code>int vertexpoint(int geometry, int linearvertex)</code></li><li><code>int vertexpoint(string geometry, int linearvertex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the vertex has no point.  Returns the point\nindex of the vertex otherwise.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>linearvertex</code>\n\n<div class=\"content\">\n<p>The linear vertex number.  The <code>vertexindex</code> function can be used\n    to compute a linear vertex from a primitive number and vertex\n    number pair.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        pt;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the point of vertex 3\n</code><code class=\"line\">pt = vertexpoint(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "geometry",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "ARGMT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vertexprev": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexprev\">vertexprev</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the linear vertex number of previous shared vertex in a geometry.</p><ul><li><code>int vertexprev(int opinput, int linearvertex)</code></li><li><code>int vertexprev(string geometry, int linearvertex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the vertex has no earlier shared vertices.\nOtherwise returns the linear index of the previous shared vertex.</p>\n<p>Using this one can iterate over all vertices that share a point.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>linearvertex</code>\n\n<div class=\"content\">\n<p>The linear vertex number.  The <code>vertexindex</code> function can be used\n    to compute a linear vertex from a primitive number and vertex\n    number pair.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        vtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the previous vertex of vertex 3\n</code><code class=\"line\">vtx = vertexprev(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vertexprim": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexprim\">vertexprim</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Returns the primitive number of a linear vertex in a geometry.</p><ul><li><code>int vertexprim(int opinput, int linearvertex)</code></li><li><code>int vertexprim(string geometry, int linearvertex)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if the vertex has no primitive.  Returns the primitive\nindex of the vertex otherwise.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>linearvertex</code>\n\n<div class=\"content\">\n<p>The linear vertex number.  The <code>vertexindex</code> function can be used\n    to compute a linear vertex from a primitive number and vertex\n    number pair.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int        pt;\n</code><code class=\"line\">\n</code><code class=\"line\">// Get the primitive of vertex 3\n</code><code class=\"line\">pt = vertexprim(\"defgeo.bgeo\", 3);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "linearvertex"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "linearvertex"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vertexprimindex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vertexprimindex\">vertexprimindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Converts a linear vertex number into a vertex number within that primitive.</p><ul><li><code>int vertexprimindex(int opinput, int linearvertexnum)</code></li><li><code>int vertexprimindex(string geometry, int linearvertexnum)</code></li></ul>\n\n\n\n<p>Returns <code>-1</code> if failed to find the corresponding vertex.</p>\n<p>This function looks at the vertex specified by the linear vertex number\nand finds where in its primitive it lies.  The <code>vertexprim</code> function\ncan be used to find out which primitive it is in.</p>\n<p>0 refers to the first vertex in the primitive.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>Due to the nature of the geometry structure, the first time this is run on\n    a geometry it has to run over all primitives to find the look up table.\n    This will be amortized out if most vertices are invoking this function.</p>\n</div>\n</div>\n</div>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>linearvertex</code>\n\n<div class=\"content\">\n<p>The linear vertex number.</p>\n</div>\n</p>\n\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<div class=\"code-container\">\n<code class=\"line\">int prim, vtx;\n</code><code class=\"line\">\n</code><code class=\"line\">// Find the primitive and vertex offset of the linear vertex 6.\n</code><code class=\"line\">prim = vertexprim(\"defgeo.bgeo\", 6);\n</code><code class=\"line\">vtx = vertexprimindex(\"defgeo.bgeo\", 6);\n</code>\n</div>\n</div>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "linearvertexnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            },
            {
                "argnames": [
                    "geometry",
                    "linearvertexnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "int"
            }
        ]
    },
    "vnoise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vnoise\">vnoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Voronoi noise gives almost identical results to the Worley noise\nfunctions.</p><ul><li><code>void vnoise(float position, float jitter, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;pos1, float &amp;pos2)</code></li><li><code>void vnoise(float position, float jitter, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;pos1, float &amp;pos2, int period)</code></li><li><code>void vnoise(float position_s, float position_t, float jitter_s, float jitter_t, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;pos1_u, float &amp;pos1_v, float &amp;pos2_u, float &amp;pos2_v)</code></li><li><code>void vnoise(float position_s, float position_t, float jitter_s, float jitter_t, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;pos1_u, float &amp;pos1_v, float &amp;pos2_u, float &amp;pos2_v, int period_s, int period_t)</code></li><li><code>void vnoise(vector position, vector jitter, int &amp;seed, float &amp;f1, float &amp;f2, vector &amp;pos1, vector &amp;pos1)</code></li><li><code>void vnoise(vector position, vector jitter, int &amp;seed, float &amp;f1, float &amp;f2, vector &amp;pos1, vector &amp;pos1, int period_x, int period_y, int period_z)</code></li><li><code>void vnoise(vector position, vector jitter, int &amp;seed, float &amp;f1, float &amp;f2, vector &amp;pos1, vector &amp;pos1, vector period)</code></li><li><code>void vnoise(vector4 position, vector4 jitter, int &amp;seed, float &amp;f1, float &amp;f2, vector4 &amp;pos1, vector4 &amp;pos2)</code></li><li><code>void vnoise(vector4 position, vector4 jitter, int &amp;seed, float &amp;f1, float &amp;f2, vector4 &amp;pos1, vector4 &amp;pos2, int period_x, int period_y, int period_z, int period_w)</code></li><li><code>void vnoise(vector4 position, vector4 jitter, int &amp;seed, float &amp;f1, float &amp;f2, vector4 &amp;pos1, vector4 &amp;pos2, vector4 period)</code></li></ul>\n\n\n\n<p>Voronoi noise gives almost identical results to the Worley noise\nfunctions. However, the Voronoi noise functions have controls over\njittering (i.e. how randomly the points are scattered through space) and\nalso return the actual locations of the two nearest points. The Voronoi\nnoise functions are limited to returning the two nearest points.</p>\n<p>The general form of the wnoise functions is:</p>\n<div class=\"code-container\">\n<code class=\"line\">void vnoise(position, jitter; int &amp;seed; float &amp;f1, &amp;f2; &amp;pos1, &amp;pos2)\n</code>\n</div>\n<p>where position, jitter, pos1 and pos2 are a single float (1D noise), two\nfloats (2D noise), a vector (3D noise) or a vector4 (4D noise). The seed\nis returned in the integer parameter, and the distance to pos1 and pos2\nare returned in f1 and f2.</p>\n<p>Though this function is slightly more expensive than wnoise, the fact\nthat the actual point positions are returned allows the function to\novercome some of the artifacts of Worley noise. For example, to get even\nboundaries along the cell boundaries:</p>\n<div class=\"code-container\">\n<code class=\"line\">if (f2 - f1 &lt; tolerance * (distance(p1, p2) / (f1 + f2)) ...\n</code>\n</div>\n<p>\u2026which will \"normalize\" the boundary width based on the distance\nbetween the two random points in space.</p>\n<p>There are also periodic forms of vnoise()</p>\n<p>For example:</p>\n<div class=\"code-container\">\n<code class=\"line\">// 1D noise\n</code><code class=\"line\">float    fp0, fp1, p1x, p1y, p2x, p2y;\n</code><code class=\"line\">vector    vp0, vp1;\n</code><code class=\"line\">vnoise(s*10, 0.8, seed, f1, f2, fp0, fp1);\n</code><code class=\"line\">vnoise(s*10, t*10, 0.8, 0.8, seed, f1, f2, p1x, p1y, p2x, p2y);\n</code><code class=\"line\">vnoise(P*10, {.8, .8, .8}, seed, f1, f2, vp0, vp1);\n</code>\n</div>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "position_s",
                    "position_t",
                    "jitter_s",
                    "jitter_t",
                    "seed",
                    "f1",
                    "f2",
                    "pos1_u",
                    "pos1_v",
                    "pos2_u",
                    "pos2_v"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position_s",
                    "position_t",
                    "jitter_s",
                    "jitter_t",
                    "seed",
                    "f1",
                    "f2",
                    "pos1_u",
                    "pos1_v",
                    "pos2_u",
                    "pos2_v",
                    "period_s",
                    "period_t"
                ],
                "args": [
                    "const float",
                    "const float",
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "jitter",
                    "seed",
                    "f1",
                    "f2",
                    "pos1",
                    "pos2"
                ],
                "args": [
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "jitter",
                    "seed",
                    "f1",
                    "f2",
                    "pos1",
                    "pos2",
                    "period"
                ],
                "args": [
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "jitter",
                    "seed",
                    "f1",
                    "f2",
                    "pos1",
                    "pos2"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "int",
                    "float",
                    "float",
                    "vector4",
                    "vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "jitter",
                    "seed",
                    "f1",
                    "f2",
                    "pos1",
                    "pos2",
                    "period_x",
                    "period_y",
                    "period_z",
                    "period_w"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "int",
                    "float",
                    "float",
                    "vector4",
                    "vector4",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "jitter",
                    "seed",
                    "f1",
                    "f2",
                    "pos1",
                    "pos2",
                    "period"
                ],
                "args": [
                    "const vector4",
                    "const vector4",
                    "int",
                    "float",
                    "float",
                    "vector4",
                    "vector4",
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "jitter",
                    "seed",
                    "f1",
                    "f2",
                    "pos1",
                    "pos1"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "int",
                    "float",
                    "float",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "jitter",
                    "seed",
                    "f1",
                    "f2",
                    "pos1",
                    "pos1",
                    "period_x",
                    "period_y",
                    "period_z"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "int",
                    "float",
                    "float",
                    "vector",
                    "vector",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "jitter",
                    "seed",
                    "f1",
                    "f2",
                    "pos1",
                    "pos1",
                    "period"
                ],
                "args": [
                    "const vector",
                    "const vector",
                    "int",
                    "float",
                    "float",
                    "vector",
                    "vector",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "volume": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volume\">volume</a></h1><span><span class=\"padder\"><span class=\"pillow\">shading</span></span><span class=\"padder\"><span class=\"pillow\">volume</span></span></span><p class=\"summary\">Returns the volume of the microvoxel containing a variable such as P.</p><ul><li><code>float volume(vector pos, ...)</code></li></ul>\n\n\n\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>This function relies on the fact that VEX \"knows\" that <code>pos</code> has\n    derivatives (<code>dPdu</code>, <code>dPdv</code>, and <code>dPdz</code>).\n    Passing a literal vector instead of a special variables such as <code>P</code>\n    will return <code>0</code> since VEX will not be able to access the derivatives.</p>\n</div>\n</div>\n</div>\n<p>You can <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../contexts/shading_contexts#derive\">specify optional parameters</a>\nto control the computation. The optional parameter <code>\"extrapolate\"</code>\ncontrols whether to do derivative extrapolation at the edges.</p>\n\n<h2 class=\"label heading\" id=\"examples\">\n            \n            Examples\n        </h2>\n<div class=\"content\" id=\"examples-body\">\n<p>Return the volume of the current micro-voxel in camera space:</p>\n<div class=\"code-container\">\n<code class=\"line\">volume(P)\n</code>\n</div>\n<p>Returns <code>0</code>, since the argument is not a variable VEX knows the derivatives for:</p>\n<div class=\"code-container\">\n<code class=\"line\">volume({0.1, 2.3, 4.5})\n</code>\n</div>\n</div>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/area\">area()</a><div class=\"related-summary\">Returns the area of the micropolygon containing a variable such as P.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/gradient\">gradient()</a><div class=\"related-summary\">Returns the gradient of a field.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Du\">Du()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to U.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Dv\">Dv()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to V.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/Dw\">Dw()</a><div class=\"related-summary\">Takes the derivative of the given value with respect to the 3rd axis, for volume rendering.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "pos"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "volumegradient": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumegradient\">volumegradient</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Calculates the volume primitive\u2019s gradient.</p><ul><li><code>vector volumegradient(int inputnum, int primnum, vector pos)</code></li><li><code>vector volumegradient(int inputnum, string volumename, vector pos)</code></li><li><code>vector volumegradient(string filename, int primnum, vector pos)</code></li><li><code>vector volumegradient(string filename, string volumename, vector pos)</code></li></ul>\n\n\n\n<p>Calculates the volume primitive\u2019s gradient. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a volume primitive. The gradient is\na vector pointing in the direction of increasing value.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum",
                    "pos"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename",
                    "pos"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primnum",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "volumename",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "volumeindex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumeindex\">volumeindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Gets the value of a specific voxel.</p><ul><li><code>float volumeindex(int inputnum, int primnum, vector voxel)</code></li><li><code>float volumeindex(int inputnum, string volumename, vector voxel)</code></li><li><code>float volumeindex(string filename, int primnum, vector voxel)</code></li><li><code>float volumeindex(string filename, string volumename, vector voxel)</code></li></ul>\n\n\n\n<p>Gets the value of a specific voxel in a volume primitive. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a volume primitive.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum",
                    "voxel"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename",
                    "voxel"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "filename",
                    "primnum",
                    "voxel"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "filename",
                    "volumename",
                    "voxel"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "volumeindexorigin": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumeindexorigin\">volumeindexorigin</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Gets the index of the bottom left of a volume primitive.</p><ul><li><code>vector volumeindexorigin(int inputnum, int primnum)</code></li><li><code>vector volumeindexorigin(int inputnum, string volumename)</code></li><li><code>vector volumeindexorigin(string filename, int primnum)</code></li><li><code>vector volumeindexorigin(string filename, string volumename)</code></li></ul>\n\n\n\n<p>Returns the index of the bottom left of a volume primitive. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a volume primitive.</p>\n<p>For Volume primitives, this is always zero.  However, for VDB primitives,\nthis represents the bottom left of their active bounding box of voxels.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "volumename"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "volumeindextopos": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumeindextopos\">volumeindextopos</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Converts a volume voxel index into a position.</p><ul><li><code>vector volumeindextopos(int inputnum, int primnum, vector voxel)</code></li><li><code>vector volumeindextopos(int inputnum, string volumename, vector voxel)</code></li><li><code>vector volumeindextopos(string filename, int primnum, vector voxel)</code></li><li><code>vector volumeindextopos(string filename, string volumename, vector voxel)</code></li></ul>\n\n\n\n<p>Calculates the position of the center of a voxel. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a volume primitive.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum",
                    "voxel"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename",
                    "voxel"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primnum",
                    "voxel"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "volumename",
                    "voxel"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "volumeindexv": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumeindexv\">volumeindexv</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Gets the vector value of a specific voxel.</p><ul><li><code>vector volumeindexv(int inputnum, int primnum, vector voxel)</code></li><li><code>vector volumeindexv(int inputnum, string volumename, vector voxel)</code></li><li><code>vector volumeindexv(string filename, int primnum, vector voxel)</code></li><li><code>vector volumeindexv(string filename, string volumename, vector voxel)</code></li></ul>\n\n\n\n<p>Gets the vector value of a specific voxel in a volume primitive. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a vector volume primitive.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum",
                    "voxel"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename",
                    "voxel"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primnum",
                    "voxel"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "volumename",
                    "voxel"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "volumepostoindex": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumepostoindex\">volumepostoindex</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Converts a position into a volume voxel index.</p><ul><li><code>vector volumepostoindex(int inputnum, int primnum, vector position)</code></li><li><code>vector volumepostoindex(int inputnum, string volumename, vector position)</code></li><li><code>vector volumepostoindex(string filename, int primnum, vector position)</code></li><li><code>vector volumepostoindex(string filename, string volumename, vector position)</code></li></ul>\n\n\n\n<p>Calculates the index of a voxel at a position. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a volume primitive.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum",
                    "position"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename",
                    "position"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primnum",
                    "position"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "volumename",
                    "position"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "volumeres": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumeres\">volumeres</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Gets the resolution of a volume primitive.</p><ul><li><code>vector volumeres(int inputnum, int primnum)</code></li><li><code>vector volumeres(int inputnum, string volumename)</code></li><li><code>vector volumeres(string filename, int primnum)</code></li><li><code>vector volumeres(string filename, string volumename)</code></li></ul>\n\n\n\n<p>Returns the resolution of a volume primitive. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a volume primitive.</p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>For VDBs, the valid range of indices is not 0..res-1, but\n    volumeindexorigin..volumeindexorigin+res-1</p>\n</div>\n</div>\n</div>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "volumename"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "volumesample": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumesample\">volumesample</a></h1><span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Samples the volume primitive\u2019s value.</p><ul><li><code>float volumesample(int inputnum, int primnum, vector pos)</code></li><li><code>float volumesample(int inputnum, string volumename, vector pos)</code></li><li><code>float volumesample(string filename, int primnum, vector pos)</code></li><li><code>float volumesample(string filename, string volumename, vector pos)</code></li></ul>\n\n\n\n<p>Samples the volume primitive\u2019s value. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a volume primitive.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum",
                    "pos"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename",
                    "pos"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "filename",
                    "primnum",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "filename",
                    "volumename",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "volumesamplev": {
        "added": "13.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumesamplev\">volumesamplev</a></h1><span><span class=\"padder\"><span class=\"pillow\">13.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Samples the volume primitive\u2019s vector value.</p><ul><li><code>vector volumesamplev(int inputnum, int primnum, vector pos)</code></li><li><code>vector volumesamplev(int inputnum, string volumename, vector pos)</code></li><li><code>vector volumesamplev(string filename, int primnum, vector pos)</code></li><li><code>vector volumesamplev(string filename, string volumename, vector pos)</code></li></ul>\n\n\n\n<p>Samples the volume primitive\u2019s vector value. Returns 0 if\n<code>primnum</code> or <code>inputnum</code> is out of range, the <code>filename</code> is invalid, or\nthe given primitive is not a vector volume primitive.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum",
                    "pos"
                ],
                "args": [
                    "const int",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "inputnum",
                    "volumename",
                    "pos"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "primnum",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "filename",
                    "volumename",
                    "pos"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "volumevoxeldiameter": {
        "added": "16.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/volumevoxeldiameter\">volumevoxeldiameter</a></h1><span><span class=\"padder\"><span class=\"pillow\">16.0</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Computes the approximate diameter of a voxel.</p><ul><li><code>float volumevoxeldiameter(int inputnum, int primnum)</code></li><li><code>float volumevoxeldiameter(int inputnum, string primname)</code></li><li><code>float volumevoxeldiameter(string geofile, int primnum)</code></li><li><code>float volumevoxeldiameter(string geofile, string primname)</code></li></ul>\n\n\n\n<p>Computes the diameter of a voxel in the given primitive.  Returns 0\nif an invalid volume.  To find the side of a voxel, divide by\n<code>sqrt(3)</code>.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "inputnum",
                    "primnum"
                ],
                "args": [
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "inputnum",
                    "primname"
                ],
                "args": [
                    "const int",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geofile",
                    "primnum"
                ],
                "args": [
                    "const string",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geofile",
                    "primname"
                ],
                "args": [
                    "const string",
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "vtransform": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/vtransform\">vtransform</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">See ptransform.</p><ul><li><code>vector vtransform(string fromspace, string tospace, vector v)</code></li><li><code>vector vtransform(string tospace, vector v)</code></li><li><code>vector vtransform(vector v, matrix transform_matrix)</code></li></ul>\n\n\n\n<p>See <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/ptransform\" title=\"Transforms a vector from one space to another.\">ptransform</a>.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ntransform\">ntransform</a><div class=\"related-summary\">See ptransform.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/ptransform\">ptransform</a><div class=\"related-summary\">Transforms a vector from one space to another.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/getspace\">getspace</a><div class=\"related-summary\">See getspace</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "fromspace",
                    "tospace",
                    "v"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "tospace",
                    "v"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "v",
                    "transform_matrix"
                ],
                "args": [
                    "const vector",
                    "const matrix"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "warning": {
        "added": "15.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/warning\">warning</a></h1><span><span class=\"padder\"><span class=\"pillow\">15.0</span></span><span class=\"padder\"><span class=\"pillow\">string</span></span><span class=\"padder\"><span class=\"pillow\">utility</span></span></span><p class=\"summary\">Reports a custom runtime VEX warning.</p><ul><li><code>void warning(string format, ...)</code></li></ul>\n\n\n\n<p>Reports a custom runtime VEX warning.  This uses the same format string syntax as <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/printf\" title=\"Prints values to the console which started the VEX program.\">printf()</a>.</p>\n<p>If something is so problematic that there is no acceptable fallback behavior, it may be worth reporting an <a class=\"link Vex\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/error\" title=\"Reports a custom runtime VEX error.\">error()</a>, instead of a warning. </p>\n<div class=\"notices ind-group\">\n<div class=\"notice ind-item note \">\nNote\n<div class=\"content\">\n<p>It\u2019s quite easy to accidentally report thousands of different warnings.</p>\n</div>\n</div>\n</div>\n<p>Examples:</p>\n<div class=\"code-container\">\n<code class=\"line\">if (primintrinsic(0,\"typeid\",@primnum) != 1) {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0warning(\"Primitives that aren't polygons are being ignored.\");\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return;\n</code><code class=\"line\">}\n</code><code class=\"line\">if (primintrinsic(0,\"closed\",@primnum) == 0 || @numvtx &lt; 3) {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0warning(\"Open or degenerate polygons are being ignored.\");\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0return;\n</code><code class=\"line\">}\n</code><code class=\"line\">float minimumValue = chf(\"min\");\n</code><code class=\"line\">float maximumValue = chf(\"max\");\n</code><code class=\"line\">if (minimumValue &gt; maximumValue) {\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0warning(\"Minimum (%f) can't be greater than maximum (%f); replacing minimum with maximum.\", minimumValue, maximumValue);\n</code><code class=\"line\">\u00a0\u00a0\u00a0\u00a0minimumValue = maximumValue;\n</code><code class=\"line\">}\n</code>\n</div>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/error\">error()</a><div class=\"related-summary\">Reports a custom runtime VEX error.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/printf\">printf()</a><div class=\"related-summary\">Prints values to the console which started the VEX program.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "format"
                ],
                "args": [
                    "const string"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void",
                "variadic": true
            }
        ]
    },
    "wireblinn": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wireblinn\">wireblinn</a></h1><span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\"></p><ul><li><code>bsdf wireblinn(vector tangent, float exponent, ...)</code></li></ul>\n\n\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/wireblinn.png\">[Image \ud83d\udd17]\n</a></p>\n<p>Blinn function defined around a tangent vector. You can use this to produce the average specular illumination for thin wire-like primitives such as hair.</p>\n<ul class=\"bullets\">\n<li class=\"bullet \">\n<code>tangent</code> \u2013 tangent vector along the hair.\n</li>\n<li class=\"bullet \">\n<code>exponent</code> \u2013 blinn exponent.\n</li>\n</ul>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/wirediffuse\">wirediffuse()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "tangent",
                    "exponent"
                ],
                "args": [
                    "const vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "wirediffuse": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wirediffuse\">wirediffuse</a></h1><span><span class=\"padder\"><span class=\"pillow\">pbr</span></span><span class=\"padder\"><span class=\"pillow\">shading</span></span></span><p class=\"summary\"></p><ul><li><code>bsdf wirediffuse(vector tangent, ...)</code></li></ul>\n\n\n\n<p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../images/rendering/wirediffuse.png\">[Image \ud83d\udd17]\n</a></p>\n<p>Diffuse function defined around a tangent vector. This can be used to produce the average diffuse illumination for thin wire-like primitives such as hair.</p>\n\n<p>\n<code>tangent</code>\n\n<div class=\"content\">\n<p>tangent vector along the hair.</p>\n</div>\n</p>\n\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/wireblinn\">wireblinn()</a></p></div>",
        "sigs": [
            {
                "argnames": [
                    "tangent"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "bsdf",
                "variadic": true,
                "variadic_pair": true
            }
        ]
    },
    "wnoise": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wnoise\">wnoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Worley noise scatters points randomly through space (according to a\nnice Poisson distribution).</p><ul><li><code>void wnoise(float position, int &amp;seed, float &amp;f1, float &amp;f2)</code></li><li><code>void wnoise(float position, int &amp;seed, float &amp;f1, float &amp;f2, int period)</code></li><li><code>void wnoise(float position, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;f3, float &amp;f4)</code></li><li><code>void wnoise(float position, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;f3, float &amp;f4, int period)</code></li><li><code>void wnoise(float position_s, float position_t, int &amp;seed, float &amp;f1, float &amp;f2)</code></li><li><code>void wnoise(float position_s, float position_t, int &amp;seed, float &amp;f1, float &amp;f2, int period_s, int period_v)</code></li><li><code>void wnoise(float position_s, float position_t, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;f3, float &amp;f4)</code></li><li><code>void wnoise(float position_s, float position_t, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;f3, float &amp;f4, int period_s, int period_v)</code></li><li><code>void wnoise(vector position, int &amp;seed, float &amp;f1, float &amp;f2)</code></li><li><code>void wnoise(vector position, int &amp;seed, float &amp;f1, float &amp;f2, int period_x, int period_y, int period_z)</code></li><li><code>void wnoise(vector position, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;f3, float &amp;f4)</code></li><li><code>void wnoise(vector position, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;f3, float &amp;f4, int period_x, int period_y, int period_z)</code></li><li><code>void wnoise(vector4 position, int &amp;seed, float &amp;f1, float &amp;f2)</code></li><li><code>void wnoise(vector4 position, int &amp;seed, float &amp;f1, float &amp;f2, int period_x, int period_y, int period_z, int period_w)</code></li><li><code>void wnoise(vector4 position, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;f3, float &amp;f4)</code></li><li><code>void wnoise(vector4 position, int &amp;seed, float &amp;f1, float &amp;f2, float &amp;f3, float &amp;f4, int period_x, int period_y, int period_z, int period_w)</code></li></ul>\n\n\n\n<p>Worley noise scatters points randomly through space (according to a nice\nPoisson distribution). The wnoise functions return the distance to the N\nclosest points (where N is either 2 or 4). They also return a \"seed\"\nwhich is associated with the first closest point. This seed is pretty\nmuch guaranteed to be unique for every point (meaning that it\u2019s unlikely\nthat two points close by have the same seed associated with them).</p>\n<p>The general form of the wnoise functions is:</p>\n<div class=\"code-container\">\n<code class=\"line\">void wnoise(position; int &amp;seed; float &amp;f1, &amp;f2)\n</code><code class=\"line\">void wnoise(position; int &amp;seed; float &amp;f1, &amp;f2, &amp;f3, &amp;f4)\n</code>\n</div>\n<p>where position is either a single float (1D noise), two floats (2D\nnoise), a vector (3D noise) or a vector4 (4D noise). The seed is\nreturned in the integer parameter, and the N closest points are returned\nin f1\u2026fN (where N is 2 or 4).</p>\n<p>The distances returned will be sorted from closest to farthest, meaning\nthat the following identity is true: <code>f1 &lt;= f2 &lt;= f3 &lt;= f4</code></p>\n<p>It is then possible to combine these distances to generate noise\npatterns. The noise generated tends to be very \"cellular\" in nature, in\nfact, one of the nice things is that you can determine \"cell\" boundaries\nby using the expression: <code>if (f2 - f1</code> which will be true if the point\nin space is crossing the boundary between two cells.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "position_s",
                    "position_t",
                    "seed",
                    "f1",
                    "f2"
                ],
                "args": [
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position_s",
                    "position_t",
                    "seed",
                    "f1",
                    "f2",
                    "f3",
                    "f4"
                ],
                "args": [
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position_s",
                    "position_t",
                    "seed",
                    "f1",
                    "f2",
                    "f3",
                    "f4",
                    "period_s",
                    "period_v"
                ],
                "args": [
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position_s",
                    "position_t",
                    "seed",
                    "f1",
                    "f2",
                    "period_s",
                    "period_v"
                ],
                "args": [
                    "const float",
                    "const float",
                    "int",
                    "float",
                    "float",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2"
                ],
                "args": [
                    "const float",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "f3",
                    "f4"
                ],
                "args": [
                    "const float",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "f3",
                    "f4",
                    "period"
                ],
                "args": [
                    "const float",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "period"
                ],
                "args": [
                    "const float",
                    "int",
                    "float",
                    "float",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2"
                ],
                "args": [
                    "const vector4",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "f3",
                    "f4"
                ],
                "args": [
                    "const vector4",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "f3",
                    "f4",
                    "period_x",
                    "period_y",
                    "period_z",
                    "period_w"
                ],
                "args": [
                    "const vector4",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "period_x",
                    "period_y",
                    "period_z",
                    "period_w"
                ],
                "args": [
                    "const vector4",
                    "int",
                    "float",
                    "float",
                    "const int",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2"
                ],
                "args": [
                    "const vector",
                    "int",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "f3",
                    "f4"
                ],
                "args": [
                    "const vector",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "f3",
                    "f4",
                    "period_x",
                    "period_y",
                    "period_z"
                ],
                "args": [
                    "const vector",
                    "int",
                    "float",
                    "float",
                    "float",
                    "float",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "position",
                    "seed",
                    "f1",
                    "f2",
                    "period_x",
                    "period_y",
                    "period_z"
                ],
                "args": [
                    "const vector",
                    "int",
                    "float",
                    "float",
                    "const int",
                    "const int",
                    "const int"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "wo_nspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wo_nspace\">wo_nspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a normal vector from World to Object space.</p><ul><li><code>vector wo_nspace(vector n)</code></li></ul>\n\n\n\n<p>Transforms a normal vector from <em>World</em> to <em>Object</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "n"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "wo_space": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wo_space\">wo_space</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a position value from World to Object space.</p><ul><li><code>vector wo_space(vector v)</code></li><li><code>vector4 wo_space(vector4 v)</code></li><li><code>matrix wo_space()</code></li></ul>\n\n\n<ol>\n<li>\n<p><code>matrix wo_space()</code></p>\n</li>\n<li>\n<p><code>vector wo_space(vector )</code></p>\n</li>\n<li>\n<p><code>vector4 wo_space(vector4 )</code></p>\n</li>\n</ol>\n<p>Transforms a position value from <em>World</em> to <em>Object</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "wo_vspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wo_vspace\">wo_vspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a direction vector from World to Object space.</p><ul><li><code>vector wo_vspace(vector v)</code></li></ul>\n\n\n\n<p>Transforms a direction vector from <em>World</em> to <em>Object</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "writepixel": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/writepixel\">writepixel</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">experimental</span></span><span class=\"padder\"><span class=\"pillow\">file</span></span></span><p class=\"summary\">Writes color information to a pixel in the output image </p><ul><li><code>void writepixel(string channel, float ndc_x, float ndc_y, vector clr)</code><span class=\"padder\"><span class=\"pillow\">shading contexts</span></span></li></ul>\n\n\n\n<p>This is an experimental function which can be used by the generator rendering engine to write pixel values into the image.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "channel",
                    "ndc_x",
                    "ndc_y",
                    "clr"
                ],
                "args": [
                    "const string",
                    "const float",
                    "const float",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "wt_nspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wt_nspace\">wt_nspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a normal vector from World to Texture space.</p><ul><li><code>vector wt_nspace(vector n)</code></li></ul>\n\n\n\n<p>Transforms a normal vector from <em>World</em> to <em>Texture</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "n"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "wt_space": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wt_space\">wt_space</a></h1><span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a position value from World to Texture space.</p><ul><li><code>vector wt_space(vector v)</code></li><li><code>vector4 wt_space(vector4 v)</code></li><li><code>matrix wt_space()</code></li></ul>\n\n\n\n<p>Transforms a position value from <em>World</em> to <em>Texture</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [],
                "args": [],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "NOARG",
                "return": "matrix"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "REARG",
                "return": "vector4"
            },
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "wt_vspace": {
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/wt_vspace\">wt_vspace</a></h1><span><span class=\"padder\"><span class=\"pillow\">map</span></span><span class=\"padder\"><span class=\"pillow\">transform</span></span></span><p class=\"summary\">Transforms a direction vector from World to Texture space.</p><ul><li><code>vector wt_vspace(vector v)</code></li></ul>\n\n\n\n<p>Transforms a direction vector from <em>World</em> to <em>Texture</em> space.</p>\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "v"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "xnoise": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/xnoise\">xnoise</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Simplex noise is very close to Perlin noise, except with the samples on a simplex mesh rather than a grid.  This results in less grid artifacts.  It also uses a higher order bspline to provide better derivatives.</p><ul><li><code>float xnoise(float x)</code></li><li><code>float xnoise(float x, float y)</code></li><li><code>float xnoise(vector xyz)</code></li><li><code>float xnoise(vector4 xyzt)</code></li><li><code>vector xnoise(float x)</code></li><li><code>vector xnoise(float x, float y)</code></li><li><code>vector xnoise(vector xyz)</code></li><li><code>vector xnoise(vector4 xyzt)</code></li></ul>\n\n\n\n<p>Simplex noise is very close to Perlin noise, except with the samples on a\nsimplex mesh rather than a grid.  This results in less grid artifacts.  It also\nuses a higher order <code>bspline</code> to provide better derivatives.</p>\n<p>The various functions return the noise value at a 4D (vector4 argument),\n3D (vector argument), 2D (two float arguments) or 1D (float argument)\nposition. You can get a random float value or a vector of three random\nvalues.</p>\n<p>The noise is in the range 0-1 with a median of 0.5. The distribution of\nthe noise depends on the dimension, with higher dimensions approaching a\nGaussian distribution of noise values.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/pnoise\">pnoise</a><div class=\"related-summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/noise\">noise</a><div class=\"related-summary\">There are two forms of Perlin-style noise: a non-periodic noise which\nchanges randomly throughout N-dimensional space, and a periodic form\nwhich repeats over a given range of space.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x",
                    "y"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyzt"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "xyz"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "x"
                ],
                "args": [
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "x",
                    "y"
                ],
                "args": [
                    "const float",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyzt"
                ],
                "args": [
                    "const vector4"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            },
            {
                "argnames": [
                    "xyz"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    },
    "xnoised": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/xnoised\">xnoised</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">noise</span></span></span><p class=\"summary\">Derivatives of Simplex Noise.</p><ul><li><code>void xnoised(float x, float &amp;v, float &amp;dvdx)</code></li><li><code>void xnoised(float x, float y, float &amp;v, float &amp;dvdx, float &amp;dvdy)</code></li><li><code>void xnoised(float x, float y, vector &amp;v, vector &amp;dvdx, vector &amp;dvdy)</code></li><li><code>void xnoised(float x, vector &amp;v, vector &amp;dvdx)</code></li><li><code>void xnoised(vector xyz, float &amp;v, float &amp;dvdx, float &amp;dvdy, float &amp;dvdz)</code></li><li><code>void xnoised(vector xyz, vector &amp;v, vector &amp;dvdx, vector &amp;dvdy, vector &amp;dvdz)</code></li><li><code>void xnoised(vector4 xyzw, float &amp;v, float &amp;dvdx, float &amp;dvdy, float &amp;dvdz, float &amp;dvdw)</code></li><li><code>void xnoised(vector4 xyzw, vector &amp;v, vector &amp;dvdx, vector &amp;dvdy, vector &amp;dvdz, vector &amp;dvdw)</code></li></ul>\n\n\n\n<p>This computes both the simplex noise value, and the derivatives of the\nnoise along each axis.  This can be performed quite efficiently as\nthere are analytic derivatives available.</p>\n<p>See <a class=\"link \" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../random\">noise and randomness</a>  in the VEX language\nguide for more information.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/xnoise\">xnoise</a><div class=\"related-summary\">Simplex noise is very close to Perlin noise, except with the samples on a simplex mesh rather than a grid.  This results in less grid artifacts.  It also uses a higher order bspline to provide better derivatives.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "x",
                    "v",
                    "dvdx"
                ],
                "args": [
                    "const float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "x",
                    "y",
                    "v",
                    "dvdx",
                    "dvdy"
                ],
                "args": [
                    "const float",
                    "const float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "x",
                    "y",
                    "v",
                    "dvdx",
                    "dvdy"
                ],
                "args": [
                    "const float",
                    "const float",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "x",
                    "v",
                    "dvdx"
                ],
                "args": [
                    "const float",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xyzw",
                    "v",
                    "dvdx",
                    "dvdy",
                    "dvdz",
                    "dvdw"
                ],
                "args": [
                    "const vector4",
                    "float",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xyzw",
                    "v",
                    "dvdx",
                    "dvdy",
                    "dvdz",
                    "dvdw"
                ],
                "args": [
                    "const vector4",
                    "vector",
                    "vector",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xyz",
                    "v",
                    "dvdx",
                    "dvdy",
                    "dvdz"
                ],
                "args": [
                    "const vector",
                    "float",
                    "float",
                    "float",
                    "float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            },
            {
                "argnames": [
                    "xyz",
                    "v",
                    "dvdx",
                    "dvdy",
                    "dvdz"
                ],
                "args": [
                    "const vector",
                    "vector",
                    "vector",
                    "vector",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "void"
            }
        ]
    },
    "xyzdist": {
        "added": "12.5",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/xyzdist\">xyzdist</a></h1><span><span class=\"padder\"><span class=\"pillow\">12.5</span></span><span class=\"padder\"><span class=\"pillow\">geo</span></span></span><p class=\"summary\">Finds the distance of a point to a geometry.</p><ul><li><code>float xyzdist(int opinput, string primgroup, vector pt)</code></li><li><code>float xyzdist(int opinput, string primgroup, vector pt, int &amp;prim, vector &amp;uv)</code></li><li><code>float xyzdist(int opinput, string primgroup, vector pt, int &amp;prim, vector &amp;uv, float maxdist)</code></li><li><code>float xyzdist(int opinput, vector pt)</code></li><li><code>float xyzdist(int opinput, vector pt, int &amp;prim, vector &amp;uv)</code></li><li><code>float xyzdist(int opinput, vector pt, int &amp;prim, vector &amp;uv, float maxdist)</code></li><li><code>float xyzdist(string geometry, string primgroup, vector pt)</code></li><li><code>float xyzdist(string geometry, string primgroup, vector pt, int &amp;prim, vector &amp;uv)</code></li><li><code>float xyzdist(string geometry, string primgroup, vector pt, int &amp;prim, vector &amp;uv, float maxdist)</code></li><li><code>float xyzdist(string geometry, vector pt)</code></li><li><code>float xyzdist(string geometry, vector pt, int &amp;prim, vector &amp;uv)</code></li><li><code>float xyzdist(string geometry, vector pt, int &amp;prim, vector &amp;uv, float maxdist)</code></li></ul>\n\n\n\n<p>Returns the distance to the closest point on the geometry.  This will find\npositions on the surfaces of the geometry, not just point positions.</p>\n\n<p>\n<code>geometry</code>\n\n<div class=\"content\">\n<p>The name of the geometry file to reference.  Inside Houdini,\n    this may be \"op:full_path_to_sop\" to reference a SOP.</p>\n</div>\n</p>\n<p>\n<code>primgroup</code>\n\n<div class=\"content\">\n<p>The name of a primitive group or a pattern to generate a primitive\n    group.  Uses the same semantics as a SOP group, so empty strings\n    will match all primitives.  Attribute groups like <code>@Cd.x&gt;0</code> can\n    also be used, but note that the <code>@</code> may need to be escaped with\n    a backslash in a <a class=\"link Node\" href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../nodes/vop/snippet\" title=\"Runs a VEX snippet to modify the incoming values.\"><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/../../icons/COMMON/wrangle.svg\">[Image \ud83d\udd17]</a>Snippet VOP</a>.</p>\n</div>\n</p>\n<p>\n<code>pt</code>\n\n<div class=\"content\">\n<p>The position in space to find the closest position on the geometry to.</p>\n</div>\n</p>\n<p>\n<code>prim</code>\n\n<div class=\"content\">\n<p>The number of the closest primitive.  -1 if no primitive found.</p>\n</div>\n</p>\n<p>\n<code>uv</code>\n\n<div class=\"content\">\n<p>The uv coordinates the closest primitive.  The <code>primuv</code> function\n    can be used to evaluate attributes at that location.</p>\n</div>\n</p>\n<p>\n<code>maxdist</code>\n\n<div class=\"content\">\n<p>The maximum distance to search.  The operation can be sped up if it\n    is allowed to quit early.</p>\n</div>\n</p>\n\n\n</div>",
        "sigs": [
            {
                "argnames": [
                    "opinput",
                    "primgroup",
                    "pt"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "primgroup",
                    "pt",
                    "prim",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "int",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "primgroup",
                    "pt",
                    "prim",
                    "uv",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const string",
                    "const vector",
                    "int",
                    "vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "pt"
                ],
                "args": [
                    "const int",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "pt",
                    "prim",
                    "uv"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "int",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "opinput",
                    "pt",
                    "prim",
                    "uv",
                    "maxdist"
                ],
                "args": [
                    "const int",
                    "const vector",
                    "int",
                    "vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "primgroup",
                    "pt"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "primgroup",
                    "pt",
                    "prim",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "int",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "primgroup",
                    "pt",
                    "prim",
                    "uv",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const string",
                    "const vector",
                    "int",
                    "vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "pt"
                ],
                "args": [
                    "const string",
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "pt",
                    "prim",
                    "uv"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "int",
                    "vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            },
            {
                "argnames": [
                    "geometry",
                    "pt",
                    "prim",
                    "uv",
                    "maxdist"
                ],
                "args": [
                    "const string",
                    "const vector",
                    "int",
                    "vector",
                    "const float"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "float"
            }
        ]
    },
    "xyztorgb": {
        "added": "14.0",
        "help": "<div id=\"helpcard\"><h1><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/xyztorgb\">xyztorgb</a></h1><span><span class=\"padder\"><span class=\"pillow\">14.0</span></span><span class=\"padder\"><span class=\"pillow\">color</span></span></span><p class=\"summary\">Convert CIE XYZ tristimulus values to a linear sRGB triplet.</p><ul><li><code>vector xyztorgb(vector xyz)</code></li></ul>\n\n\n\n<p>Convert CIE XYZ tristimulus values to linear sRGB (Rec. 709) triplet.\nXYZ can be thought of as a 'universal color space'.</p>\n\n<h2>See also</h2><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/rgbtoxyz\">rgbtoxyz()</a><div class=\"related-summary\">Convert a linear sRGB triplet to CIE XYZ tristimulus values.</div></p><p><a href=\"https://www.sidefx.com/docs/houdini/vex/functions/https://www.sidefx.com/docs/houdini/vex/functions/blackbody\">blackbody()</a><div class=\"related-summary\">Compute the color value of an incandescent black body.</div></p></div>",
        "sigs": [
            {
                "argnames": [
                    "xyz"
                ],
                "args": [
                    "const vector"
                ],
                "contexts": [
                    "surface",
                    "displace",
                    "light",
                    "shadow",
                    "fog",
                    "chop",
                    "pop",
                    "sop",
                    "cop2",
                    "image3d",
                    "cvex"
                ],
                "fillstate": "EXACT",
                "return": "vector"
            }
        ]
    }
}